/*
 * pageSwitch
 * @author qiqiboy
 * @github https://github.com/qiqiboy/pageSwitch
 */
;
(function(ROOT, struct, undefined){
    "use strict";
    
    var VERSION='2.3.1';
    var lastTime=0,
        nextFrame=ROOT.requestAnimationFrame            ||
                ROOT.webkitRequestAnimationFrame        ||
                ROOT.mozRequestAnimationFrame           ||
                ROOT.msRequestAnimationFrame            ||
                function(callback){
                    var currTime=+new Date,
                        delay=Math.max(1000/60,1000/60-(currTime-lastTime));
                    lastTime=currTime+delay;
                    return setTimeout(callback,delay);
                },
        cancelFrame=ROOT.cancelAnimationFrame           ||
                ROOT.webkitCancelAnimationFrame         ||
                ROOT.webkitCancelRequestAnimationFrame  ||
                ROOT.mozCancelRequestAnimationFrame     ||
                ROOT.msCancelRequestAnimationFrame      ||
                clearTimeout,
        DOC=ROOT.document,
        divstyle=DOC.createElement('div').style,
        cssVendor=function(){
            var tests="-webkit- -moz- -o- -ms-".split(" "),
                prop;
            while(prop=tests.shift()){
                if(camelCase(prop+'transform') in divstyle){
                    return prop;
                }
            }
            return '';
        }(),
        opacity=cssTest('opacity'),
        transform=cssTest('transform'),
        perspective=cssTest('perspective'),
        transformStyle=cssTest('transform-style'),
        transformOrigin=cssTest('transform-origin'),
        backfaceVisibility=cssTest('backface-visibility'),
        preserve3d=transformStyle&&function(){
            divstyle[transformStyle]='preserve-3d';
            return divstyle[transformStyle]=='preserve-3d';
        }(),
        toString=Object.prototype.toString,
        slice=[].slice,
        class2type={},
        event2type={},
        event2code={
            click:4,
            mousewheel:5,
            dommousescroll:5,
            keydown:6
        },
        POINTERTYPES={
            2:'touch',
            3:'pen',
            4:'mouse',
            pen:'pen'
        },
        STARTEVENT=[],
        MOVEEVENT=[],
        EVENT=function(){
            var ret={},
                states={
                    start:1,
                    down:1,
                    move:2,
                    end:3,
                    up:3,
                    cancel:3
                };
            each("mouse touch pointer MSPointer-".split(" "),function(prefix){
                var _prefix=/pointer/i.test(prefix)?'pointer':prefix;
                ret[_prefix]=ret[_prefix]||{};
                POINTERTYPES[_prefix]=_prefix;
                each(states,function(endfix,code){
                    var ev=camelCase(prefix+endfix);
                    ret[_prefix][ev]=code;
                    event2type[ev.toLowerCase()]=_prefix;
                    event2code[ev.toLowerCase()]=code;
                    if(code==1){
                        STARTEVENT.push(ev);
                    }else{
                        MOVEEVENT.push(ev);
                    }
                });
            });
            return ret;
        }(),
        POINTERS={
            touch:{},
            pointer:{},
            mouse:{}
        },
        EASE={
            linear:function(t,b,c,d){ return c*t/d + b; },
            ease:function(t,b,c,d){ return -c * ((t=t/d-1)*t*t*t - 1) + b; },
            'ease-in':function(t,b,c,d){ return c*(t/=d)*t*t + b; },
            'ease-out':function(t,b,c,d){ return c*((t=t/d-1)*t*t + 1) + b; },
            'ease-in-out':function(t,b,c,d){ if ((t/=d/2) < 1) return c/2*t*t*t + b; return c/2*((t-=2)*t*t + 2) + b; },
            bounce:function(t,b,c,d){ if ((t/=d) < (1/2.75)) { return c*(7.5625*t*t) + b; } else if (t < (2/2.75)) { return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b; } else if (t < (2.5/2.75)) { return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b; } else { return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b; } }
        },
        TRANSITION={
            /* 更改切换效果
             * @param Element cpage 当前页面
             * @param Float cp      当前页面过度百分比
             * @param Element tpage 前序页面
             * @param Float tp      前序页面过度百分比
             */
            fade:function(cpage,cp,tpage,tp){
                if(opacity){
                    cpage.style.opacity=1-Math.abs(cp);
                    if(tpage){
                        tpage.style.opacity=Math.abs(cp);
                    }
                }else{
                    cpage.style.filter='alpha(opacity='+(1-Math.abs(cp))*100+')';
                    if(tpage){
                        tpage.style.filter='alpha(opacity='+Math.abs(cp)*100+')';
                    }
                }
            }
        };

    each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(name){
        class2type["[object "+name+"]"]=name.toLowerCase();
    });

    each("X Y ".split(" "),function(name){
        var XY={X:'left',Y:'top'},
            fire3D=perspective?' translateZ(0)':'';
            
        TRANSITION['scroll'+name]=function(cpage,cp,tpage,tp){
            var prop=name||['X','Y'][this.direction];
            transform?cpage.style[transform]='translate'+prop+'('+cp*100+'%)'+fire3D:cpage.style[XY[prop]]=cp*100+'%';
            if(tpage){
                transform?tpage.style[transform]='translate'+prop+'('+tp*100+'%)'+fire3D:tpage.style[XY[prop]]=tp*100+'%';
            }
        }

        TRANSITION['scroll3d'+name]=function(cpage,cp,tpage,tp){
            var prop=name||['X','Y'][this.direction],
                fix=cp<0?-1:1,
                abscp=Math.abs(cp),
                deg;
            if(perspective){
                if(abscp<.05){
                    deg=abscp*1200;
                    cp=0;tp=fix*-1;
                }else if(abscp<.95){
                    deg=60;
                    cp=(cp-.05*fix)/.9;
                    tp=(tp+.05*fix)/.9;
                }else{
                    deg=(1-abscp)*1200;
                    cp=fix;tp=0;
                }
                cpage.parentNode.style[transform]='perspective(1000px) rotateX('+deg+'deg)';
                cpage.style[transform]='translate'+prop+'('+cp*100+'%)';
                if(tpage){
                    tpage.style[transform]='translate'+prop+'('+tp*100+'%)';
                }
            }else TRANSITION['scroll'+name].apply(this,arguments);
        }

        TRANSITION['slide'+name]=function(cpage,cp,tpage,tp){
            TRANSITION['slideCoverReverse'+name].apply(this,arguments);
        }

        TRANSITION['flow'+name]=function(cpage,cp,tpage,tp){
            TRANSITION['flowCoverIn'+name].apply(this,arguments);
        }

        TRANSITION['slice'+name]=function(){
            var createWrap=function(node,container){
                    var wrap=DOC.createElement('div');
                    wrap.style.cssText='position:absolute;top:0;left:0;height:100%;width:100%;overflow:hidden;';
                    wrap.appendChild(node);
                    container.appendChild(wrap);
                },
                fixBlock=function(cpage,tpage,pages,container){
                    each(pages,function(page){
                        if(page.parentNode==container)return;
                        if(cpage!=page && tpage!=page){
                            page.parentNode.style.display='none';
                        }else{
                            page.parentNode.style.display='block';
                        }
                    });
                };
                    
            return function(cpage,cp,tpage,tp){
                var prop=name||['X','Y'][this.direction],
                    len=prop=='X'?'width':'height',
                    total=this.container[camelCase('client-'+len)],
                    m=Math.abs(cp)*100,
                    n=Math.abs(tp)*100,
                    end=cp==0||tp==0;

                cpage.style[len]=end?'100%':total+'px';
                if(cpage.parentNode==this.container){
                    createWrap(cpage,this.container);
                }
                cpage.parentNode.style.zIndex=cp>0?0:1;
                cpage.parentNode.style[len]=(Math.min(cp,0)+1)*100+'%';

                if(tpage){
                    tpage.style[len]=end?'100%':total+'px';
                    if(tpage.parentNode==this.container){
                        createWrap(tpage,this.container);
                    }
                    tpage.parentNode.style.zIndex=cp>0?1:0;
                    tpage.parentNode.style[len]=(Math.min(tp,0)+1)*100+'%';
                }

                fixBlock(cpage,tpage,this.pages,this.container);
            }
        }();

        TRANSITION['flip'+name]=function(cpage,cp,tpage,tp){
            var prop=name||['X','Y'][1-this.direction],
                fix=prop=='X'?-1:1;
            if(perspective){
                cpage.style[backfaceVisibility]='hidden';
                cpage.style[transform]='perspective(1000px) rotate'+prop+'('+cp*180*fix+'deg)'+fire3D;
                if(tpage){
                    tpage.style[backfaceVisibility]='hidden';
                    tpage.style[transform]='perspective(1000px) rotate'+prop+'('+tp*180*fix+'deg)'+fire3D;
                }
            }else TRANSITION['scroll'+name].apply(this,arguments);
        }

        TRANSITION['flip3d'+name]=function(){
            var inited;
            return function(cpage,cp,tpage,tp){
                var prop=name||['X','Y'][1-this.direction],
                    fe=prop=='X'?-1:1,
                    fix=fe*(cp<0?1:-1),
                    zh=cpage['offset'+(prop=='X'?'Height':'Width')]/2;
                if(preserve3d){
                    if(!inited){
                        inited=true;
                        cpage.parentNode.parentNode.style[perspective]='1000px';
                        cpage.parentNode.style[transformStyle]='preserve-3d';
                    }
                    cpage.parentNode.style[transform]='translateZ(-'+zh+'px) rotate'+prop+'('+cp*90*fe+'deg)';
                    cpage.style[transform]='rotate'+prop+'(0) translateZ('+zh+'px)';
                    if(tpage){
                        tpage.style[transform]='rotate'+prop+'('+(fix*90)+'deg) translateZ('+zh+'px)';
                    }
                }else TRANSITION['scroll'+name].apply(this,arguments);
            }
        }();

        TRANSITION['flipClock'+name]=function(){
            var createWrap=function(node,container,prop,off){
                    var wrap=node.parentNode,
                        len=prop=='X'?'height':'width',
                        pos=prop=='X'?'top':'left',
                        origin=['50%',(off?0:100)+'%'][prop=='X'?'slice':'reverse']().join(' ');

                    if(!wrap||wrap==container){
                        wrap=DOC.createElement('div');
                        wrap.style.cssText='position:absolute;top:0;left:0;height:100%;width:100%;overflow:hidden;display:none;';
                        wrap.style[transformOrigin]=origin;
                        wrap.style[backfaceVisibility]='hidden';
                        wrap.appendChild(node);
                        container.appendChild(wrap);
                    }

                    wrap.style[len]='50%';
                    wrap.style[pos]=off*100+'%';
                    node.style[len]='200%';
                    node.style[pos]=-off*200+'%';

                    return wrap;
                },
                fixBlock=function(cpage,tpage,pages,container){
                    each(pages,function(page){
                        if(page.parentNode==container)return;
                        if(cpage!=page && tpage!=page){
                            page.parentNode.style.display=page._clone.parentNode.style.display='none';
                        }else{
                            page.parentNode.style.display=page._clone.parentNode.style.display='block';
                        }
                    });
                };

            return function(cpage,cp,tpage,tp){
                var prop=name||['X','Y'][1-this.direction],
                    isSelf=this.pages[this.current]==cpage,
                    zIndex=Number(Math.abs(cp)<.5),
                    fix=prop=='X'?1:-1,
                    m,n;
                if(perspective){
                    createWrap(cpage,this.container,prop,0);
                    createWrap(cpage._clone||(cpage._clone=cpage.cloneNode(true)),this.container,prop,.5);

                    m=n=-cp*180*fix;
                    cp>0?n=0:m=0;
                    cpage.parentNode.style.zIndex=cpage._clone.parentNode.style.zIndex=zIndex;
                    cpage.parentNode.style[transform]='perspective(1000px) rotate'+prop+'('+m+'deg)';
                    cpage._clone.parentNode.style[transform]='perspective(1000px) rotate'+prop+'('+n+'deg)';

                    if(tpage){
                        createWrap(tpage,this.container,prop,0);
                        createWrap(tpage._clone||(tpage._clone=tpage.cloneNode(true)),this.container,prop,.5);

                        m=n=-tp*180*fix;
                        cp>0?m=0:n=0;
                        tpage.parentNode.style.zIndex=tpage._clone.parentNode.style.zIndex=1-zIndex;
                        tpage.parentNode.style[transform]='perspective(1000px) rotate'+prop+'('+m+'deg)';
                        tpage._clone.parentNode.style[transform]='perspective(1000px) rotate'+prop+'('+n+'deg)';
                    }

                    fixBlock(cpage,tpage,this.pages,this.container);

                    if(0==cp||tp==0){
                        cpage=this.pages[this.current];
                        cpage.style.height=cpage.style.width=cpage.parentNode.style.height=cpage.parentNode.style.width='100%';
                        cpage.style.top=cpage.style.left=cpage.parentNode.style.top=cpage.parentNode.style.left=0;
                        cpage.parentNode.style.zIndex=2;
                    }
                }else TRANSITION['scroll'+name].apply(this,arguments);
            }
        }();

        TRANSITION['flipPaper'+name]=function(){
            var backDiv;

            return function(cpage,cp,tpage,tp){
                var prop=name||['X','Y'][this.direction],
                    len=prop=='X'?'width':'height',
                    m=Math.abs(cp)*100;
                if(!backDiv){
                    backDiv=DOC.createElement('div');
                    backDiv.style.cssText='position:absolute;z-index:2;top:0;left:0;height:0;width:0;background:no-repeat #fff;';
                    try{
                        backDiv.style.backgroundImage=cssVendor+'linear-gradient('+(prop=='X'?'right':'bottom')+', #aaa 0,#fff 20px)';
                    }catch(e){}
                    this.container.appendChild(backDiv);
                }

                TRANSITION['slice'+name].apply(this,arguments);
                
                backDiv.style.display=cp==0||tp==0?'none':'block';
                backDiv.style.width=backDiv.style.height='100%';
                backDiv.style[len]=(cp<0?m:100-m)+'%';
                backDiv.style[XY[prop]]=(cp<0?100-2*m:2*m-100)+'%';
            }
        }();

        TRANSITION['zoom'+name]=function(cpage,cp,tpage,tp){
            var zIndex=Number(Math.abs(cp)<.5);
            if(transform){
                cpage.style[transform]='scale'+name+'('+Math.abs(1-Math.abs(cp)*2)+')'+fire3D;
                cpage.style.zIndex=zIndex;
                if(tpage){
                    tpage.style[transform]='scale'+name+'('+Math.abs(1-Math.abs(cp)*2)+')'+fire3D;
                    tpage.style.zIndex=1-zIndex;
                }
            }else TRANSITION['scroll'+name].apply(this,arguments);
        }

        TRANSITION['bomb'+name]=function(cpage,cp,tpage,tp){
            var zIndex=Number(Math.abs(cp)<.5),
                val=Math.abs(1-Math.abs(cp)*2);
            if(transform){
                cpage.style[transform]='scale'+name+'('+(2-val)+')'+fire3D;
                cpage.style.opacity=zIndex?val:0;
                cpage.style.zIndex=zIndex;
                if(tpage){
                    tpage.style[transform]='scale'+name+'('+(2-val)+')'+fire3D;
                    tpage.style.opacity=zIndex?0:val;
                    tpage.style.zIndex=1-zIndex;
                }
            }else TRANSITION['scroll'+name].apply(this,arguments);
        }

        TRANSITION['skew'+name]=function(cpage,cp,tpage,tp){
            var zIndex=Number(Math.abs(cp)<.5);
            if(transform){
                cpage.style[transform]='skew'+name+'('+cp*180+'deg)'+fire3D;
                cpage.style.zIndex=zIndex;
                if(tpage){
                    tpage.style[transform]='skew'+name+'('+tp*180+'deg)'+fire3D;
                    tpage.style.zIndex=1-zIndex;
                }
            }else TRANSITION['scroll'+name].apply(this,arguments);
        }

        each(" Reverse In Out".split(" "),function(type){
            TRANSITION['scrollCover'+type+name]=function(cpage,cp,tpage,tp){
                var prop=name||['X','Y'][this.direction],
                    zIndex=Number(type=='In'||!type&&cp<0||type=='Reverse'&&cp>0),
                    cr=100,tr=100;
                zIndex?cr=20:tr=20;
                transform?cpage.style[transform]='translate'+prop+'('+cp*cr+'%)'+fire3D:cpage.style[XY[prop]]=cp*cr+'%';
                cpage.style.zIndex=1-zIndex;
                if(tpage){
                    transform?tpage.style[transform]='translate'+prop+'('+tp*tr+'%)'+fire3D:tpage.style[XY[prop]]=tp*tr+'%';
                    tpage.style.zIndex=zIndex;
                }
            }
            
            TRANSITION['slideCover'+type+name]=function(cpage,cp,tpage,tp){
                var prop=name||['X','Y'][this.direction],
                    zIndex=Number(type=='In'||!type&&cp<0||type=='Reverse'&&cp>0);
                if(transform){
                    cpage.style[transform]='translate'+prop+'('+cp*(100-zIndex*100)+'%) scale('+((1-Math.abs(zIndex&&cp))*.2+.8)+')'+fire3D;
                    cpage.style.zIndex=1-zIndex;
                    if(tpage){
                        tpage.style[transform]='translate'+prop+'('+tp*zIndex*100+'%) scale('+((1-Math.abs(zIndex?0:tp))*.2+.8)+')'+fire3D;
                        tpage.style.zIndex=zIndex;
                    }
                }else TRANSITION['scrollCover'+type+name].apply(this,arguments);
            }

            TRANSITION['flowCover'+type+name]=function(cpage,cp,tpage,tp){
                var prop=name||['X','Y'][this.direction],
                    zIndex=Number(type=='In'||!type&&cp<0||type=='Reverse'&&cp>0);
                if(transform){
                    cpage.style[transform]='translate'+prop+'('+cp*(100-zIndex*50)+'%) scale('+((1-Math.abs(cp))*.5+.5)+')'+fire3D;
                    cpage.style.zIndex=1-zIndex;
                    if(tpage){
                        tpage.style[transform]='translate'+prop+'('+tp*(50+zIndex*50)+'%) scale('+((1-Math.abs(tp))*.5+.5)+')'+fire3D;
                        tpage.style.zIndex=zIndex;
                    }
                }else TRANSITION['scrollCover'+type+name].apply(this,arguments);
            }

            TRANSITION['flipCover'+type+name]=function(cpage,cp,tpage,tp){
                var prop=name||['X','Y'][1-this.direction],
                    zIndex=Number(type=='In'||!type&&cp<0||type=='Reverse'&&cp>0);
                if(perspective){
                    zIndex?cp=0:tp=0;
                    cpage.style[transform]='perspective(1000px) rotate'+prop+'('+cp*-90+'deg)'+fire3D;
                    cpage.style.zIndex=1-zIndex;
                    if(tpage){
                        tpage.style[transform]='perspective(1000px) rotate'+prop+'('+tp*-90+'deg)'+fire3D;
                        tpage.style.zIndex=zIndex;
                    }
                }else TRANSITION['scroll'+name].apply(this,arguments);
            }

            TRANSITION['skewCover'+type+name]=function(cpage,cp,tpage,tp){
                var zIndex=Number(type=='In'||!type&&cp<0||type=='Reverse'&&cp>0);
                if(transform){
                    zIndex?cp=0:tp=0;
                    cpage.style[transform]='skew'+name+'('+cp*90+'deg)'+fire3D;
                    cpage.style.zIndex=1-zIndex;
                    if(tpage){
                        tpage.style[transform]='skew'+name+'('+tp*90+'deg)'+fire3D;
                        tpage.style.zIndex=zIndex;
                    }
                }else TRANSITION['scroll'+name].apply(this,arguments);
            }

            TRANSITION['zoomCover'+type+name]=function(cpage,cp,tpage,tp){
                var zIndex=Number(type=='In'||!type&&cp<0||type=='Reverse'&&cp>0);
                if(transform){
                    zIndex?cp=0:tp=0;
                    cpage.style[transform]='scale'+name+'('+(1-Math.abs(cp))+')'+fire3D;
                    cpage.style.zIndex=1-zIndex;
                    if(tpage){
                        tpage.style[transform]='scale'+name+'('+(1-Math.abs(tp))+')'+fire3D;
                        tpage.style.zIndex=zIndex;
                    }
                }else TRANSITION['scroll'+name].apply(this,arguments);
            }

            TRANSITION['bombCover'+type+name]=function(cpage,cp,tpage,tp){
                var zIndex=Number(type=='In'||!type&&cp<0||type=='Reverse'&&cp>0);
                if(transform){
                    zIndex?cp=0:tp=0;
                    cpage.style[transform]='scale'+name+'('+(1+Math.abs(cp))+')'+fire3D;
                    cpage.style.zIndex=1-zIndex;
                    if(tpage){
                        tpage.style[transform]='scale'+name+'('+(1+Math.abs(tp))+')'+fire3D;
                        tpage.style.zIndex=zIndex;
                    }
                    TRANSITION.fade.apply(this,arguments);
                }else TRANSITION['scroll'+name].apply(this,arguments);
            }
        });
    });

    function type(obj){
        if(obj==null){
            return obj+"";
        }
        
        return typeof obj=='object'||typeof obj=='function' ? class2type[toString.call(obj)]||"object" :
            typeof obj;
    }
	
    function isArrayLike(elem){
        var tp=type(elem);
        return !!elem && tp!='function' && tp!='string' && (elem.length===0 || elem.length && (elem.nodeType==1 || (elem.length-1) in elem));
    }

    function camelCase(str){
        return (str+'').replace(/^-ms-/, 'ms-').replace(/-([a-z]|[0-9])/ig, function(all, letter){
            return (letter+'').toUpperCase();
        });
    }

    function cssTest(name){
        var prop=camelCase(name),
            _prop=camelCase(cssVendor+prop);
        return (prop in divstyle) && prop || (_prop in divstyle) && _prop || '';
    }

    function isFunction(func){
        return type(func)=='function';
    }

    function pointerLength(obj){
        var len=0,key;
        if(type(obj.length)=='number'){
            len=obj.length;
        }else if('keys' in Object){
            len=Object.keys(obj).length;
        }else{
            for(key in obj){
                if(obj.hasOwnProperty(key)){
                    len++;
                }
            }
        }
        return len;
    }

    function pointerItem(obj,n){
        return 'item' in obj?obj.item(n):function(){
            var i=0,key;
            for(key in this){
                if(i++==n){
                    return this[key];
                }
            }
        }.call(obj,n);
    }
    
    function each(arr, iterate){
        if(isArrayLike(arr)){
            if(type(arr.forEach)=='function'){
                return arr.forEach(iterate);
            }
            var i=0,len=arr.length,item;
            for(;i<len;i++){
                item=arr[i];
                if(type(item)!='undefined'){
                    iterate(item,i,arr);
                }
            }
        }else{
            var key;
            for(key in arr){
                iterate(key,arr[key],arr);
            }
        }
    }

    function children(elem){
        var ret=[];
        each(elem.children||elem.childNodes,function(elem){
            if(elem.nodeType==1){
                ret.push(elem);
            }
        });
        return ret;
    }

    function getStyle(elem,prop){
        var style=ROOT.getComputedStyle&&ROOT.getComputedStyle(elem,null)||elem.currentStyle||elem.style;
        return style[prop];
    }

    function addListener(elem,evstr,handler){
        if(type(evstr)=='object'){
            return each(evstr,function(evstr,handler){
                addListener(elem,evstr,handler);
            });
        }
        each(evstr.split(" "),function(ev){
            if(elem.addEventListener){
                elem.addEventListener(ev,handler,false);
            }else if(elem.attachEvent){
                elem.attachEvent('on'+ev,handler);
            }else elem['on'+ev]=handler;
        });
    }

    function offListener(elem,evstr,handler){
        if(type(evstr)=='object'){
            return each(evstr,function(evstr,handler){
                offListener(elem,evstr,handler);
            });
        }
        each(evstr.split(" "),function(ev){
            if(elem.removeEventListener){
                elem.removeEventListener(ev,handler,false);
            }else if(elem.detachEvent){
                elem.detachEvent('on'+ev,handler);
            }else elem['on'+ev]=null;
        });
    }

    function removeRange(){
        var range;
        if(ROOT.getSelection){
            range=getSelection();
            if('empty' in range)range.empty();
            else if('removeAllRanges' in range)range.removeAllRanges();
        }else{
            DOC.selection.empty();
        }
    }

    function filterEvent(oldEvent){
        var ev={},
            which=oldEvent.which,
            button=oldEvent.button,
            pointers,pointer;

        each("wheelDelta detail which keyCode".split(" "),function(prop){
            ev[prop]=oldEvent[prop];
        });

        ev.oldEvent=oldEvent;
        
        ev.type=oldEvent.type.toLowerCase();
        ev.eventType=event2type[ev.type]||ev.type;
        ev.eventCode=event2code[ev.type]||0;
        ev.pointerType=POINTERTYPES[oldEvent.pointerType]||oldEvent.pointerType||ev.eventType;

        ev.target=oldEvent.target||oldEvent.srcElement||DOC.documentElement;
        if(ev.target.nodeType===3){
            ev.target=ev.target.parentNode;
        }

        ev.preventDefault=function(){
            oldEvent.preventDefault && oldEvent.preventDefault();
            ev.returnValue=oldEvent.returnValue=false;
        }

        if(pointers=POINTERS[ev.eventType]){
            switch(ev.eventType){
                case 'mouse':
                case 'pointer':
                    var id=oldEvent.pointerId||0;
                    ev.eventCode==3?delete pointers[id]:pointers[id]=oldEvent;
                    break;
                case 'touch':
                    POINTERS[ev.eventType]=pointers=oldEvent.touches;
                    break;
            }

            if(pointer=pointerItem(pointers,0)){
                ev.clientX=pointer.clientX;
                ev.clientY=pointer.clientY;
            }
            
            ev.button=which<4?Math.max(0,which-1):button&4&&1||button&2; // left:0 middle:1 right:2
            ev.length=pointerLength(pointers);
        }

        return ev;
    }
    
    struct.prototype={
        version:VERSION,
        constructor:struct,
        latestTime:0,
        init:function(config){
            var self=this,
                handler=this.handler=function(ev){
                    !self.frozen && self.handleEvent(ev);
                }

            this.events={};
            this.duration=isNaN(parseInt(config.duration))?600:parseInt(config.duration);
            this.direction=parseInt(config.direction)==0?0:1;
            this.current=parseInt(config.start)||0;
            this.loop=!!config.loop;
            this.mouse=config.mouse==null?true:!!config.mouse;
            this.mousewheel=!!config.mousewheel;
            this.interval=parseInt(config.interval)||5000;
            this.playing=!!config.autoplay;
            this.arrowkey=!!config.arrowkey;
            this.frozen=!!config.freeze;
            this.pages=children(this.container);
            this.length=this.pages.length;

            this.pageData=[];

            addListener(this.container,STARTEVENT.join(" ")+" click"+(this.mousewheel?" mousewheel DOMMouseScroll":""),handler);
            addListener(DOC,MOVEEVENT.join(" ")+(this.arrowkey?" keydown":""),handler);

            each(this.pages,function(page){
                self.pageData.push({
                    percent:0,
                    cssText:page.style.cssText||''
                });
                self.initStyle(page);
            });
            this.pages[this.current].style.display='block';

            this.on({
                before:function(){clearTimeout(this.playTimer);},
                dragStart:function(){clearTimeout(this.playTimer);removeRange();},
                after:this.firePlay,
                update:null
            }).firePlay();

            this.comment=document.createComment(' Powered by pageSwitch v'+this.version+'  https://github.com/qiqiboy/pageSwitch ');
            this.container.appendChild(this.comment);

            this.setEase(config.ease);
            this.setTransition(config.transition);
        },
        initStyle:function(elem){
            var style=elem.style,
                ret;
            each("position:absolute;top:0;left:0;width:100%;height:100%;display:none".split(";"),function(css){
                ret=css.split(":");
                style[ret[0]]=ret[1];
            });
            return elem;
        },
        setEase:function(ease){
            this.ease=isFunction(ease)?ease:EASE[ease]||EASE.ease;
            return this;
        },
        addEase:function(name,func){
            isFunction(func) && (EASE[name]=func);
            return this;
        },
        setTransition:function(transition){
            this.events.update.splice(0,1,isFunction(transition)?transition:TRANSITION[transition]||TRANSITION.slide);
            return this;
        },
        addTransition:function(name,func){
            isFunction(func) && (TRANSITION[name]=func);
            return this;
        },
        isStatic:function(){
            return !this.timer && !this.drag;
        },
        on:function(ev,callback){
            var self=this;
            if(type(ev)=='object'){
                each(ev,function(ev,callback){
                    self.on(ev,callback);
                });
            }else{
                if(!this.events[ev]){
                    this.events[ev]=[];
                }
                this.events[ev].push(callback);
            }
            return this;
        },
        fire:function(ev){
            var self=this,
                args=slice.call(arguments,1);
            each(this.events[ev]||[],function(func){
                if(isFunction(func)){
                    func.apply(self,args);
                }
            });
            return this;
        },
        freeze:function(able){
            this.frozen=able==null?true:!!able;
            return this;
        },
        slide:function(index){
            var self=this,
                dir=this.direction,
                duration=this.duration,
                stime=+new Date,
                ease=this.ease,
                current=this.current,
                fixIndex=Math.min(this.length-1,Math.max(0,this.fixIndex(index))),
                cpage=this.pages[current],
                percent=this.getPercent(),
                tIndex=this.fixIndex(fixIndex==current?current+(percent>0?-1:1):fixIndex),
                tpage=this.pages[tIndex],
                target=index>current?-1:1,
                _tpage=cpage;
            
            cancelFrame(this.timer);

            if(fixIndex==current){
                target=0;
                _tpage=tpage;
            }else if(tpage.style.display=='none'){
                percent=0;
            }
            
            this.fixBlock(current,tIndex);
            this.fire('before',current,fixIndex);
            this.current=fixIndex;

            duration*=Math.abs(target-percent);

            this.latestTime=stime+duration;

            ani();

            function ani(){
                var offset=Math.min(duration,+new Date-stime),
                    s=duration?ease(offset,0,1,duration):1,
                    cp=(target-percent)*s+percent;
                self.fixUpdate(cp,current,tIndex);
                if(offset==duration){
                    if(_tpage){
                        _tpage.style.display='none';
                    }
                    delete self.timer;
                    self.fire('after',fixIndex,current);
                }else{
                    self.timer=nextFrame(ani);
                }
            }

            return this;
        },
        prev:function(){
            return this.slide(this.current-1);
        },
        next:function(){
            return this.slide(this.current+1);
        },
        play:function(){
            this.playing=true;
            return this.firePlay();
        },
        firePlay:function(){
            var self=this;
            if(this.playing){
                this.playTimer=setTimeout(function(){
                    self.slide((self.current+1)%(self.loop?Infinity:self.length));
                },this.interval);
            }
            return this;
        },
        pause:function(){
            this.playing=false;
            clearTimeout(this.playTimer);
            return this;
        },
        fixIndex:function(index){
            return this.length>1&&this.loop?(this.length+index)%this.length:index;
        },
        fixBlock:function(cIndex,tIndex){
            each(this.pages,function(page,index){
                if(cIndex!=index && tIndex!=index){
                    page.style.display='none';
                }else{
                    page.style.display='block';
                }
            });
            return this;
        },
        fixUpdate:function(cPer,cIndex,tIndex){
            var pageData=this.pageData,
                cpage=this.pages[cIndex],
                tpage=this.pages[tIndex],
                tPer;
            pageData[cIndex].percent=cPer;
            if(tpage){
                tPer=pageData[tIndex].percent=cPer>0?cPer-1:1+cPer;
            }
            return this.fire('update',cpage,cPer,tpage,tPer);
        },
        getPercent:function(index){
            var pdata=this.pageData[index==null?this.current:index];
            return pdata&&(pdata.percent||0);
        },
        getOffsetParent:function(){
            var position=getStyle(this.container,'position');
            if(position&&position!='static'){
                return this.container;
            }
            return this.container.offsetParent||DOC.body;
        },
        handleEvent:function(oldEvent){
            var ev=filterEvent(oldEvent),
                canDrag=ev.button<1&&(!this.pointerType||this.pointerType==ev.eventType)&&(this.mouse||ev.pointerType!='mouse');

            switch(ev.eventCode){
                case 2:
                    if(canDrag&&ev.length<2&&this.rect){
                        var cIndex=this.current,
                            dir=this.direction,
                            rect=[ev.clientX,ev.clientY],
                            _rect=this.rect,
                            offset=rect[dir]-_rect[dir],
                            cpage=this.pages[cIndex],
                            total=this.offsetParent[dir?'clientHeight':'clientWidth'],
                            tIndex,percent;
                        if(this.drag==null && _rect.toString()!=rect.toString()){
                            this.drag=Math.abs(offset)>=Math.abs(rect[1-dir]-_rect[1-dir]);
                            this.drag && this.fire('dragStart',ev);
                        }
                        if(this.drag){
                            percent=this.percent+(total&&offset/total);
                            if(!this.pages[tIndex=this.fixIndex(cIndex+(percent>0?-1:1))]){
                                percent/=Math.abs(offset)/total+2;
                            }
                            this.fixBlock(cIndex,tIndex);
                            this.fire('dragMove',ev);
                            this.fixUpdate(percent,cIndex,tIndex);
                            this._offset=offset;
                            ev.preventDefault();
                        }
                    }
                    break;

                case 1:
                    if(canDrag){
                        this.start=true;
                    }
                case 3:
                    if(canDrag&&ev.length<2&&this.start){
                        var self=this,
                            index=this.current,
                            percent=this.getPercent(),
                            isDrag,offset,tm,nn;
                        if(ev.length){
                            nn=ev.target.nodeName.toLowerCase();
                            clearTimeout(this.eventTimer);
                            if(!this.pointerType){
                                this.pointerType=ev.eventType;
                            }
                            if(this.timer){
                                cancelFrame(this.timer);
                                delete this.timer;
                            }
                            this.rect=[ev.clientX,ev.clientY];
                            this.percent=percent;
                            this.time=+new Date;
                            this.offsetParent=this.getOffsetParent();
                            if(ev.eventType!='touch' && (nn=='a' || nn=='img')){
                                ev.preventDefault();
                            }
                        }else if(tm=this.time){
                            offset=this._offset;
                            isDrag=this.drag;

                            each("rect drag time percent _offset offsetParent".split(" "),function(prop){
                                delete self[prop];
                            });

                            if(isDrag){
                                if(+new Date-tm<500&&Math.abs(offset)>20 || Math.abs(percent)>.5){
                                    index+=offset>0?-1:1;
                                }
                                this.fire('dragEnd',ev);
                                ev.preventDefault();
                            }

                            if(percent){
                                this.slide(index);
                            }

                            this.eventTimer=setTimeout(function(){
                                delete self.pointerType;
                            },30);
                        }
                    }
                    break;

                case 4:
                    if(this.timer){
                        ev.preventDefault();
                    }
                    break;

                case 5:
                    ev.preventDefault();
                    if(this.isStatic() && +new Date-this.latestTime>Math.max(1000-this.duration,0)){
                        var wd=ev.wheelDelta||-ev.detail;
                        Math.abs(wd)>=3 && this[wd>0?'prev':'next']();
                    }
                    break;

                case 6:
                    var nn=ev.target.nodeName.toLowerCase();
                    if(this.isStatic() && nn!='input' && nn!='textarea' && nn!='select'){
                        switch(ev.keyCode||ev.which){
                            case 33:
                            case 37:
                            case 38:
                                this.prev();
                                break;
                            case 32:
                            case 34:
                            case 39:
                            case 40:
                                this.next();
                                break;
                            case 35:
                                this.slide(this.length-1);
                                break;
                            case 36:
                                this.slide(0);
                                break;
                        }
                    }
                    break;
            }
        },
        destroy:function(){
            var pageData=this.pageData;

            offListener(this.container,STARTEVENT.join(" ")+" click"+(this.mousewheel?" mousewheel DOMMouseScroll":""),this.handler);
            offListener(DOC,MOVEEVENT.join(" ")+(this.arrowkey?" keydown":""),this.handler);

            each(this.pages,function(page,index){
                page.style.cssText=pageData[index].cssText;
            });

            this.container.removeChild(this.comment);

            this.length=0;
            
            return this.pause();
        },
        append:function(elem,index){
            if(null==index){
                index=this.pages.length;
            }
            this.pageData.splice(index,0,{
                percent:0,
                cssText:elem.style.cssText
            });
            this.pages.splice(index,0,elem);
            this.container.appendChild(this.initStyle(elem));
            
            this.length=this.pages.length;

            if(index<=this.current){
                this.current++;
            }

            return this;
        },
        prepend:function(elem){
            return this.append(elem,0);
        },
        insertBefore:function(elem,index){
            return this.append(elem,index-1);
        },
        insertAfter:function(elem,index){
            return this.append(elem,index+1);
        },
        remove:function(index){
            this.container.removeChild(this.pages[index]);
            this.pages.splice(index,1);
            this.pageData.splice(index,1);

            this.length=this.pages.length;

            if(index<=this.current){
                this.slide(this.current=Math.max(0,this.current-1));
            }

            return this;
        }
    }
    
    each("Ease Transition".split(" "),function(name){
        struct['add'+name]=struct.prototype['add'+name];
    });

    ROOT.pageSwitch=struct;
	
})(window, function(wrap,config){
    if(!(this instanceof arguments.callee)){
        return new arguments.callee(wrap,config);
    }
    
    this.container=typeof wrap=='string'?document.getElementById(wrap):wrap;
    this.init(config||{});
});


/**
 * jVectorMap version 2.0.2
 *
 * Copyright 2011-2014, Kirill Lebedev
 *
 */

(function($) {
  var apiParams = {
    set: {
      colors: 1,
      values: 1,
      backgroundColor: 1,
      scaleColors: 1,
      normalizeFunction: 1,
      focus: 1
    },
    get: {
      selectedRegions: 1,
      selectedMarkers: 1,
      mapObject: 1,
      regionName: 1
    }
  };

  $.fn.vectorMap = function(options) {
    var map,
      methodName,
      map = this.children('.jvectormap-container').data('mapObject');

    if (options === 'addMap') {
      jvm.Map.maps[arguments[1]] = arguments[2];
    } else if ((options === 'set' || options === 'get') && apiParams[options][arguments[1]]) {
      methodName = arguments[1].charAt(0).toUpperCase() + arguments[1].substr(1);
      return map[options + methodName].apply(map, Array.prototype.slice.call(arguments, 2));
    } else {
      options = options || {};
      options.container = this;
      map = new jvm.Map(options);
    }

    return this;
  };
})(jQuery);
/*! Copyright (c) 2013 Brandon Aaron (http://brandon.aaron.sh)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Version: 3.1.9
 *
 * Requires: jQuery 1.2.2+
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['jquery'], factory);
  } else if (typeof exports === 'object') {
    // Node/CommonJS style for Browserify
    module.exports = factory;
  } else {
    // Browser globals
    factory(jQuery);
  }
}(function($) {

  var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
    toBind = ('onwheel' in document || document.documentMode >= 9) ?
    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
    slice = Array.prototype.slice,
    nullLowestDeltaTimeout, lowestDelta;

  if ($.event.fixHooks) {
    for (var i = toFix.length; i;) {
      $.event.fixHooks[toFix[--i]] = $.event.mouseHooks;
    }
  }

  var special = $.event.special.mousewheel = {
    version: '3.1.9',

    setup: function() {
      if (this.addEventListener) {
        for (var i = toBind.length; i;) {
          this.addEventListener(toBind[--i], handler, false);
        }
      } else {
        this.onmousewheel = handler;
      }
      // Store the line height and page height for this particular element
      $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
      $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
    },

    teardown: function() {
      if (this.removeEventListener) {
        for (var i = toBind.length; i;) {
          this.removeEventListener(toBind[--i], handler, false);
        }
      } else {
        this.onmousewheel = null;
      }
    },

    getLineHeight: function(elem) {
      return parseInt($(elem)['offsetParent' in $.fn ? 'offsetParent' : 'parent']().css('fontSize'), 10);
    },

    getPageHeight: function(elem) {
      return $(elem).height();
    },

    settings: {
      adjustOldDeltas: true
    }
  };

  $.fn.extend({
    mousewheel: function(fn) {
      return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
    },

    unmousewheel: function(fn) {
      return this.unbind('mousewheel', fn);
    }
  });


  function handler(event) {
    var orgEvent = event || window.event,
      args = slice.call(arguments, 1),
      delta = 0,
      deltaX = 0,
      deltaY = 0,
      absDelta = 0;
    event = $.event.fix(orgEvent);
    event.type = 'mousewheel';

    // Old school scrollwheel delta
    if ('detail' in orgEvent) {
      deltaY = orgEvent.detail * -1;
    }
    if ('wheelDelta' in orgEvent) {
      deltaY = orgEvent.wheelDelta;
    }
    if ('wheelDeltaY' in orgEvent) {
      deltaY = orgEvent.wheelDeltaY;
    }
    if ('wheelDeltaX' in orgEvent) {
      deltaX = orgEvent.wheelDeltaX * -1;
    }

    // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
    if ('axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS) {
      deltaX = deltaY * -1;
      deltaY = 0;
    }

    // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
    delta = deltaY === 0 ? deltaX : deltaY;

    // New school wheel delta (wheel event)
    if ('deltaY' in orgEvent) {
      deltaY = orgEvent.deltaY * -1;
      delta = deltaY;
    }
    if ('deltaX' in orgEvent) {
      deltaX = orgEvent.deltaX;
      if (deltaY === 0) {
        delta = deltaX * -1;
      }
    }

    // No change actually happened, no reason to go any further
    if (deltaY === 0 && deltaX === 0) {
      return;
    }

    // Need to convert lines and pages to pixels if we aren't already in pixels
    // There are three delta modes:
    //   * deltaMode 0 is by pixels, nothing to do
    //   * deltaMode 1 is by lines
    //   * deltaMode 2 is by pages
    if (orgEvent.deltaMode === 1) {
      var lineHeight = $.data(this, 'mousewheel-line-height');
      delta *= lineHeight;
      deltaY *= lineHeight;
      deltaX *= lineHeight;
    } else if (orgEvent.deltaMode === 2) {
      var pageHeight = $.data(this, 'mousewheel-page-height');
      delta *= pageHeight;
      deltaY *= pageHeight;
      deltaX *= pageHeight;
    }

    // Store lowest absolute delta to normalize the delta values
    absDelta = Math.max(Math.abs(deltaY), Math.abs(deltaX));

    if (!lowestDelta || absDelta < lowestDelta) {
      lowestDelta = absDelta;

      // Adjust older deltas if necessary
      if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
        lowestDelta /= 40;
      }
    }

    // Adjust older deltas if necessary
    if (shouldAdjustOldDeltas(orgEvent, absDelta)) {
      // Divide all the things by 40!
      delta /= 40;
      deltaX /= 40;
      deltaY /= 40;
    }

    // Get a whole, normalized value for the deltas
    delta = Math[delta >= 1 ? 'floor' : 'ceil'](delta / lowestDelta);
    deltaX = Math[deltaX >= 1 ? 'floor' : 'ceil'](deltaX / lowestDelta);
    deltaY = Math[deltaY >= 1 ? 'floor' : 'ceil'](deltaY / lowestDelta);

    // Add information to the event object
    event.deltaX = deltaX;
    event.deltaY = deltaY;
    event.deltaFactor = lowestDelta;
    // Go ahead and set deltaMode to 0 since we converted to pixels
    // Although this is a little odd since we overwrite the deltaX/Y
    // properties with normalized deltas.
    event.deltaMode = 0;

    // Add event and delta to the front of the arguments
    args.unshift(event, delta, deltaX, deltaY);

    // Clearout lowestDelta after sometime to better
    // handle multiple device types that give different
    // a different lowestDelta
    // Ex: trackpad = 3 and mouse wheel = 120
    if (nullLowestDeltaTimeout) {
      clearTimeout(nullLowestDeltaTimeout);
    }
    nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

    return ($.event.dispatch || $.event.handle).apply(this, args);
  }

  function nullLowestDelta() {
    lowestDelta = null;
  }

  function shouldAdjustOldDeltas(orgEvent, absDelta) {
    // If this is an older event and the delta is divisable by 120,
    // then we are assuming that the browser is treating this as an
    // older mouse wheel event and that we should divide the deltas
    // by 40 to try and get a more usable deltaFactor.
    // Side note, this actually impacts the reported scroll distance
    // in older browsers and can cause scrolling to be slower than native.
    // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
    return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
  }

}));
/**
 * @namespace jvm Holds core methods and classes used by jVectorMap.
 */
var jvm = {

  /**
   * Inherits child's prototype from the parent's one.
   * @param {Function} child
   * @param {Function} parent
   */
  inherits: function(child, parent) {
    function temp() {}
    temp.prototype = parent.prototype;
    child.prototype = new temp();
    child.prototype.constructor = child;
    child.parentClass = parent;
  },

  /**
   * Mixes in methods from the source constructor to the target one.
   * @param {Function} target
   * @param {Function} source
   */
  mixin: function(target, source) {
    var prop;

    for (prop in source.prototype) {
      if (source.prototype.hasOwnProperty(prop)) {
        target.prototype[prop] = source.prototype[prop];
      }
    }
  },

  min: function(values) {
    var min = Number.MAX_VALUE,
      i;

    if (values instanceof Array) {
      for (i = 0; i < values.length; i++) {
        if (values[i] < min) {
          min = values[i];
        }
      }
    } else {
      for (i in values) {
        if (values[i] < min) {
          min = values[i];
        }
      }
    }
    return min;
  },

  max: function(values) {
    var max = Number.MIN_VALUE,
      i;

    if (values instanceof Array) {
      for (i = 0; i < values.length; i++) {
        if (values[i] > max) {
          max = values[i];
        }
      }
    } else {
      for (i in values) {
        if (values[i] > max) {
          max = values[i];
        }
      }
    }
    return max;
  },

  keys: function(object) {
    var keys = [],
      key;

    for (key in object) {
      keys.push(key);
    }
    return keys;
  },

  values: function(object) {
    var values = [],
      key,
      i;

    for (i = 0; i < arguments.length; i++) {
      object = arguments[i];
      for (key in object) {
        values.push(object[key]);
      }
    }
    return values;
  },

  whenImageLoaded: function(url) {
    var deferred = new jvm.$.Deferred(),
      img = jvm.$('<img/>');

    img.error(function() {
      deferred.reject();
    }).load(function() {
      deferred.resolve(img);
    });
    img.attr('src', url);

    return deferred;
  },

  isImageUrl: function(s) {
    return /\.\w{3,4}$/.test(s);
  }
};

jvm.$ = jQuery;

/**
 * indexOf polyfill for IE < 9
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf
 */
if (!Array.prototype.indexOf) {
  Array.prototype.indexOf = function(searchElement, fromIndex) {

    var k;

    // 1. Let O be the result of calling ToObject passing
    //    the this value as the argument.
    if (this == null) {
      throw new TypeError('"this" is null or not defined');
    }

    var O = Object(this);

    // 2. Let lenValue be the result of calling the Get
    //    internal method of O with the argument "length".
    // 3. Let len be ToUint32(lenValue).
    var len = O.length >>> 0;

    // 4. If len is 0, return -1.
    if (len === 0) {
      return -1;
    }

    // 5. If argument fromIndex was passed let n be
    //    ToInteger(fromIndex); else let n be 0.
    var n = +fromIndex || 0;

    if (Math.abs(n) === Infinity) {
      n = 0;
    }

    // 6. If n >= len, return -1.
    if (n >= len) {
      return -1;
    }

    // 7. If n >= 0, then Let k be n.
    // 8. Else, n<0, Let k be len - abs(n).
    //    If k is less than 0, then let k be 0.
    k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

    // 9. Repeat, while k < len
    while (k < len) {
      // a. Let Pk be ToString(k).
      //   This is implicit for LHS operands of the in operator
      // b. Let kPresent be the result of calling the
      //    HasProperty internal method of O with argument Pk.
      //   This step can be combined with c
      // c. If kPresent is true, then
      //    i.  Let elementK be the result of calling the Get
      //        internal method of O with the argument ToString(k).
      //   ii.  Let same be the result of applying the
      //        Strict Equality Comparison Algorithm to
      //        searchElement and elementK.
      //  iii.  If same is true, return k.
      if (k in O && O[k] === searchElement) {
        return k;
      }
      k++;
    }
    return -1;
  };
}
/**
 * Basic wrapper for DOM element.
 * @constructor
 * @param {String} name Tag name of the element
 * @param {Object} config Set of parameters to initialize element with
 */
jvm.AbstractElement = function(name, config) {
  /**
   * Underlying DOM element
   * @type {DOMElement}
   * @private
   */
  this.node = this.createElement(name);

  /**
   * Name of underlying element
   * @type {String}
   * @private
   */
  this.name = name;

  /**
   * Internal store of attributes
   * @type {Object}
   * @private
   */
  this.properties = {};

  if (config) {
    this.set(config);
  }
};

/**
 * Set attribute of the underlying DOM element.
 * @param {String} name Name of attribute
 * @param {Number|String} config Set of parameters to initialize element with
 */
jvm.AbstractElement.prototype.set = function(property, value) {
  var key;

  if (typeof property === 'object') {
    for (key in property) {
      this.properties[key] = property[key];
      this.applyAttr(key, property[key]);
    }
  } else {
    this.properties[property] = value;
    this.applyAttr(property, value);
  }
};

/**
 * Returns value of attribute.
 * @param {String} name Name of attribute
 */
jvm.AbstractElement.prototype.get = function(property) {
  return this.properties[property];
};

/**
 * Applies attribute value to the underlying DOM element.
 * @param {String} name Name of attribute
 * @param {Number|String} config Value of attribute to apply
 * @private
 */
jvm.AbstractElement.prototype.applyAttr = function(property, value) {
  this.node.setAttribute(property, value);
};

jvm.AbstractElement.prototype.remove = function() {
  jvm.$(this.node).remove();
};
/**
 * Implements abstract vector canvas.
 * @constructor
 * @param {HTMLElement} container Container to put element to.
 * @param {Number} width Width of canvas.
 * @param {Number} height Height of canvas.
 */
jvm.AbstractCanvasElement = function(container, width, height) {
  this.container = container;
  this.setSize(width, height);
  this.rootElement = new jvm[this.classPrefix + 'GroupElement']();
  this.node.appendChild(this.rootElement.node);
  this.container.appendChild(this.node);
}

/**
 * Add element to the certain group inside of the canvas.
 * @param {HTMLElement} element Element to add to canvas.
 * @param {HTMLElement} group Group to add element into or into root group if not provided.
 */
jvm.AbstractCanvasElement.prototype.add = function(element, group) {
  group = group || this.rootElement;
  group.add(element);
  element.canvas = this;
}

/**
 * Create path and add it to the canvas.
 * @param {Object} config Parameters of path to create.
 * @param {Object} style Styles of the path to create.
 * @param {HTMLElement} group Group to add path into.
 */
jvm.AbstractCanvasElement.prototype.addPath = function(config, style, group) {
  var el = new jvm[this.classPrefix + 'PathElement'](config, style);

  this.add(el, group);
  return el;
};

/**
 * Create circle and add it to the canvas.
 * @param {Object} config Parameters of path to create.
 * @param {Object} style Styles of the path to create.
 * @param {HTMLElement} group Group to add circle into.
 */
jvm.AbstractCanvasElement.prototype.addCircle = function(config, style, group) {
  var el = new jvm[this.classPrefix + 'CircleElement'](config, style);

  this.add(el, group);
  return el;
};

/**
 * Create circle and add it to the canvas.
 * @param {Object} config Parameters of path to create.
 * @param {Object} style Styles of the path to create.
 * @param {HTMLElement} group Group to add circle into.
 */
jvm.AbstractCanvasElement.prototype.addImage = function(config, style, group) {
  var el = new jvm[this.classPrefix + 'ImageElement'](config, style);

  this.add(el, group);
  return el;
};

/**
 * Create text and add it to the canvas.
 * @param {Object} config Parameters of path to create.
 * @param {Object} style Styles of the path to create.
 * @param {HTMLElement} group Group to add circle into.
 */
jvm.AbstractCanvasElement.prototype.addText = function(config, style, group) {
  var el = new jvm[this.classPrefix + 'TextElement'](config, style);

  this.add(el, group);
  return el;
};

/**
 * Add group to the another group inside of the canvas.
 * @param {HTMLElement} group Group to add circle into or root group if not provided.
 */
jvm.AbstractCanvasElement.prototype.addGroup = function(parentGroup) {
  var el = new jvm[this.classPrefix + 'GroupElement']();

  if (parentGroup) {
    parentGroup.node.appendChild(el.node);
  } else {
    this.node.appendChild(el.node);
  }
  el.canvas = this;
  return el;
};
/**
 * Abstract shape element. Shape element represents some visual vector or raster object.
 * @constructor
 * @param {String} name Tag name of the element.
 * @param {Object} config Set of parameters to initialize element with.
 * @param {Object} style Object with styles to set on element initialization.
 */
jvm.AbstractShapeElement = function(name, config, style) {
  this.style = style || {};
  this.style.current = this.style.current || {};
  this.isHovered = false;
  this.isSelected = false;
  this.updateStyle();
};

/**
 * Set element's style.
 * @param {Object|String} property Could be string to set only one property or object to set several style properties at once.
 * @param {String} value Value to set in case only one property should be set.
 */
jvm.AbstractShapeElement.prototype.setStyle = function(property, value) {
  var styles = {};

  if (typeof property === 'object') {
    styles = property;
  } else {
    styles[property] = value;
  }
  jvm.$.extend(this.style.current, styles);
  this.updateStyle();
};


jvm.AbstractShapeElement.prototype.updateStyle = function() {
  var attrs = {};

  jvm.AbstractShapeElement.mergeStyles(attrs, this.style.initial);
  jvm.AbstractShapeElement.mergeStyles(attrs, this.style.current);
  if (this.isHovered) {
    jvm.AbstractShapeElement.mergeStyles(attrs, this.style.hover);
  }
  if (this.isSelected) {
    jvm.AbstractShapeElement.mergeStyles(attrs, this.style.selected);
    if (this.isHovered) {
      jvm.AbstractShapeElement.mergeStyles(attrs, this.style.selectedHover);
    }
  }
  this.set(attrs);
};

jvm.AbstractShapeElement.mergeStyles = function(styles, newStyles) {
    var key;

    newStyles = newStyles || {};
    for (key in newStyles) {
      if (newStyles[key] === null) {
        delete styles[key];
      } else {
        styles[key] = newStyles[key];
      }
    }
  }
  /**
   * Wrapper for SVG element.
   * @constructor
   * @extends jvm.AbstractElement
   * @param {String} name Tag name of the element
   * @param {Object} config Set of parameters to initialize element with
   */

jvm.SVGElement = function(name, config) {
  jvm.SVGElement.parentClass.apply(this, arguments);
}

jvm.inherits(jvm.SVGElement, jvm.AbstractElement);

jvm.SVGElement.svgns = "http://www.w3.org/2000/svg";

/**
 * Creates DOM element.
 * @param {String} tagName Name of element
 * @private
 * @returns DOMElement
 */
jvm.SVGElement.prototype.createElement = function(tagName) {
  return document.createElementNS(jvm.SVGElement.svgns, tagName);
};

/**
 * Adds CSS class for underlying DOM element.
 * @param {String} className Name of CSS class name
 */
jvm.SVGElement.prototype.addClass = function(className) {
  this.node.setAttribute('class', className);
};

/**
 * Returns constructor for element by name prefixed with 'VML'.
 * @param {String} ctr Name of basic constructor to return
 * proper implementation for.
 * @returns Function
 * @private
 */
jvm.SVGElement.prototype.getElementCtr = function(ctr) {
  return jvm['SVG' + ctr];
};

jvm.SVGElement.prototype.getBBox = function() {
  return this.node.getBBox();
};
jvm.SVGGroupElement = function() {
  jvm.SVGGroupElement.parentClass.call(this, 'g');
}

jvm.inherits(jvm.SVGGroupElement, jvm.SVGElement);

jvm.SVGGroupElement.prototype.add = function(element) {
  this.node.appendChild(element.node);
};
jvm.SVGCanvasElement = function(container, width, height) {
  this.classPrefix = 'SVG';
  jvm.SVGCanvasElement.parentClass.call(this, 'svg');

  this.defsElement = new jvm.SVGElement('defs');
  this.node.appendChild(this.defsElement.node);

  jvm.AbstractCanvasElement.apply(this, arguments);
}

jvm.inherits(jvm.SVGCanvasElement, jvm.SVGElement);
jvm.mixin(jvm.SVGCanvasElement, jvm.AbstractCanvasElement);

jvm.SVGCanvasElement.prototype.setSize = function(width, height) {
  this.width = width;
  this.height = height;
  this.node.setAttribute('width', width);
  this.node.setAttribute('height', height);
};

jvm.SVGCanvasElement.prototype.applyTransformParams = function(scale, transX, transY) {
  this.scale = scale;
  this.transX = transX;
  this.transY = transY;
  this.rootElement.node.setAttribute('transform', 'scale(' + scale + ') translate(' + transX + ', ' + transY + ')');
};
jvm.SVGShapeElement = function(name, config, style) {
  jvm.SVGShapeElement.parentClass.call(this, name, config);
  jvm.AbstractShapeElement.apply(this, arguments);
};

jvm.inherits(jvm.SVGShapeElement, jvm.SVGElement);
jvm.mixin(jvm.SVGShapeElement, jvm.AbstractShapeElement);

jvm.SVGShapeElement.prototype.applyAttr = function(attr, value) {
  var patternEl,
    imageEl,
    that = this;

  if (attr === 'fill' && jvm.isImageUrl(value)) {
    if (!jvm.SVGShapeElement.images[value]) {
      jvm.whenImageLoaded(value).then(function(img) {
        imageEl = new jvm.SVGElement('image');
        imageEl.node.setAttributeNS('http://www.w3.org/1999/xlink', 'href', value);
        imageEl.applyAttr('x', '0');
        imageEl.applyAttr('y', '0');
        imageEl.applyAttr('width', img[0].width);
        imageEl.applyAttr('height', img[0].height);

        patternEl = new jvm.SVGElement('pattern');
        patternEl.applyAttr('id', 'image' + jvm.SVGShapeElement.imageCounter);
        patternEl.applyAttr('x', 0);
        patternEl.applyAttr('y', 0);
        patternEl.applyAttr('width', img[0].width / 2);
        patternEl.applyAttr('height', img[0].height / 2);
        patternEl.applyAttr('viewBox', '0 0 ' + img[0].width + ' ' + img[0].height);
        patternEl.applyAttr('patternUnits', 'userSpaceOnUse');
        patternEl.node.appendChild(imageEl.node);

        that.canvas.defsElement.node.appendChild(patternEl.node);

        jvm.SVGShapeElement.images[value] = jvm.SVGShapeElement.imageCounter++;

        that.applyAttr('fill', 'url(#image' + jvm.SVGShapeElement.images[value] + ')');
      });
    } else {
      this.applyAttr('fill', 'url(#image' + jvm.SVGShapeElement.images[value] + ')');
    }
  } else {
    jvm.SVGShapeElement.parentClass.prototype.applyAttr.apply(this, arguments);
  }
};

jvm.SVGShapeElement.imageCounter = 1;
jvm.SVGShapeElement.images = {};
jvm.SVGPathElement = function(config, style) {
  jvm.SVGPathElement.parentClass.call(this, 'path', config, style);
  this.node.setAttribute('fill-rule', 'evenodd');
}

jvm.inherits(jvm.SVGPathElement, jvm.SVGShapeElement);
jvm.SVGCircleElement = function(config, style) {
  jvm.SVGCircleElement.parentClass.call(this, 'circle', config, style);
};

jvm.inherits(jvm.SVGCircleElement, jvm.SVGShapeElement);
jvm.SVGImageElement = function(config, style) {
  jvm.SVGImageElement.parentClass.call(this, 'image', config, style);
};

jvm.inherits(jvm.SVGImageElement, jvm.SVGShapeElement);

jvm.SVGImageElement.prototype.applyAttr = function(attr, value) {
  var that = this;

  if (attr == 'image') {
    jvm.whenImageLoaded(value).then(function(img) {
      that.node.setAttributeNS('http://www.w3.org/1999/xlink', 'href', value);
      that.width = img[0].width;
      that.height = img[0].height;
      that.applyAttr('width', that.width);
      that.applyAttr('height', that.height);

      that.applyAttr('x', that.cx - that.width / 2);
      that.applyAttr('y', that.cy - that.height / 2);

      jvm.$(that.node).trigger('imageloaded', [img]);
    });
  } else if (attr == 'cx') {
    this.cx = value;
    if (this.width) {
      this.applyAttr('x', value - this.width / 2);
    }
  } else if (attr == 'cy') {
    this.cy = value;
    if (this.height) {
      this.applyAttr('y', value - this.height / 2);
    }
  } else {
    jvm.SVGImageElement.parentClass.prototype.applyAttr.apply(this, arguments);
  }
};
jvm.SVGTextElement = function(config, style) {
  jvm.SVGTextElement.parentClass.call(this, 'text', config, style);
}

jvm.inherits(jvm.SVGTextElement, jvm.SVGShapeElement);

jvm.SVGTextElement.prototype.applyAttr = function(attr, value) {
  if (attr === 'text') {
    this.node.textContent = value;
  } else {
    jvm.SVGTextElement.parentClass.prototype.applyAttr.apply(this, arguments);
  }
};
/**
 * Wrapper for VML element.
 * @constructor
 * @extends jvm.AbstractElement
 * @param {String} name Tag name of the element
 * @param {Object} config Set of parameters to initialize element with
 */

jvm.VMLElement = function(name, config) {
  if (!jvm.VMLElement.VMLInitialized) {
    jvm.VMLElement.initializeVML();
  }

  jvm.VMLElement.parentClass.apply(this, arguments);
};

jvm.inherits(jvm.VMLElement, jvm.AbstractElement);

/**
 * Shows if VML was already initialized for the current document or not.
 * @static
 * @private
 * @type {Boolean}
 */
jvm.VMLElement.VMLInitialized = false;

/**
 * Initializes VML handling before creating the first element
 * (adds CSS class and creates namespace). Adds one of two forms
 * of createElement method depending of support by browser.
 * @static
 * @private
 */

// The following method of VML handling is borrowed from the
// Raphael library by Dmitry Baranovsky.

jvm.VMLElement.initializeVML = function() {
  try {
    if (!document.namespaces.rvml) {
      document.namespaces.add("rvml", "urn:schemas-microsoft-com:vml");
    }
    /**
     * Creates DOM element.
     * @param {String} tagName Name of element
     * @private
     * @returns DOMElement
     */
    jvm.VMLElement.prototype.createElement = function(tagName) {
      return document.createElement('<rvml:' + tagName + ' class="rvml">');
    };
  } catch (e) {
    /**
     * @private
     */
    jvm.VMLElement.prototype.createElement = function(tagName) {
      return document.createElement('<' + tagName + ' xmlns="urn:schemas-microsoft.com:vml" class="rvml">');
    };
  }
  document.createStyleSheet().addRule(".rvml", "behavior:url(#default#VML)");
  jvm.VMLElement.VMLInitialized = true;
};

/**
 * Returns constructor for element by name prefixed with 'VML'.
 * @param {String} ctr Name of basic constructor to return
 * proper implementation for.
 * @returns Function
 * @private
 */
jvm.VMLElement.prototype.getElementCtr = function(ctr) {
  return jvm['VML' + ctr];
};

/**
 * Adds CSS class for underlying DOM element.
 * @param {String} className Name of CSS class name
 */
jvm.VMLElement.prototype.addClass = function(className) {
  jvm.$(this.node).addClass(className);
};

/**
 * Applies attribute value to the underlying DOM element.
 * @param {String} name Name of attribute
 * @param {Number|String} config Value of attribute to apply
 * @private
 */
jvm.VMLElement.prototype.applyAttr = function(attr, value) {
  this.node[attr] = value;
};

/**
 * Returns boundary box for the element.
 * @returns {Object} Boundary box with numeric fields: x, y, width, height
 * @override
 */
jvm.VMLElement.prototype.getBBox = function() {
  var node = jvm.$(this.node);

  return {
    x: node.position().left / this.canvas.scale,
    y: node.position().top / this.canvas.scale,
    width: node.width() / this.canvas.scale,
    height: node.height() / this.canvas.scale
  };
};
jvm.VMLGroupElement = function() {
  jvm.VMLGroupElement.parentClass.call(this, 'group');

  this.node.style.left = '0px';
  this.node.style.top = '0px';
  this.node.coordorigin = "0 0";
};

jvm.inherits(jvm.VMLGroupElement, jvm.VMLElement);

jvm.VMLGroupElement.prototype.add = function(element) {
  this.node.appendChild(element.node);
};
jvm.VMLCanvasElement = function(container, width, height) {
  this.classPrefix = 'VML';
  jvm.VMLCanvasElement.parentClass.call(this, 'group');
  jvm.AbstractCanvasElement.apply(this, arguments);
  this.node.style.position = 'absolute';
};

jvm.inherits(jvm.VMLCanvasElement, jvm.VMLElement);
jvm.mixin(jvm.VMLCanvasElement, jvm.AbstractCanvasElement);

jvm.VMLCanvasElement.prototype.setSize = function(width, height) {
  var paths,
    groups,
    i,
    l;

  this.width = width;
  this.height = height;
  this.node.style.width = width + "px";
  this.node.style.height = height + "px";
  this.node.coordsize = width + ' ' + height;
  this.node.coordorigin = "0 0";
  if (this.rootElement) {
    paths = this.rootElement.node.getElementsByTagName('shape');
    for (i = 0, l = paths.length; i < l; i++) {
      paths[i].coordsize = width + ' ' + height;
      paths[i].style.width = width + 'px';
      paths[i].style.height = height + 'px';
    }
    groups = this.node.getElementsByTagName('group');
    for (i = 0, l = groups.length; i < l; i++) {
      groups[i].coordsize = width + ' ' + height;
      groups[i].style.width = width + 'px';
      groups[i].style.height = height + 'px';
    }
  }
};

jvm.VMLCanvasElement.prototype.applyTransformParams = function(scale, transX, transY) {
  this.scale = scale;
  this.transX = transX;
  this.transY = transY;
  this.rootElement.node.coordorigin = (this.width - transX - this.width / 100) + ',' + (this.height - transY - this.height / 100);
  this.rootElement.node.coordsize = this.width / scale + ',' + this.height / scale;
};
jvm.VMLShapeElement = function(name, config) {
  jvm.VMLShapeElement.parentClass.call(this, name, config);

  this.fillElement = new jvm.VMLElement('fill');
  this.strokeElement = new jvm.VMLElement('stroke');
  this.node.appendChild(this.fillElement.node);
  this.node.appendChild(this.strokeElement.node);
  this.node.stroked = false;

  jvm.AbstractShapeElement.apply(this, arguments);
};

jvm.inherits(jvm.VMLShapeElement, jvm.VMLElement);
jvm.mixin(jvm.VMLShapeElement, jvm.AbstractShapeElement);

jvm.VMLShapeElement.prototype.applyAttr = function(attr, value) {
  switch (attr) {
    case 'fill':
      this.node.fillcolor = value;
      break;
    case 'fill-opacity':
      this.fillElement.node.opacity = Math.round(value * 100) + '%';
      break;
    case 'stroke':
      if (value === 'none') {
        this.node.stroked = false;
      } else {
        this.node.stroked = true;
      }
      this.node.strokecolor = value;
      break;
    case 'stroke-opacity':
      this.strokeElement.node.opacity = Math.round(value * 100) + '%';
      break;
    case 'stroke-width':
      if (parseInt(value, 10) === 0) {
        this.node.stroked = false;
      } else {
        this.node.stroked = true;
      }
      this.node.strokeweight = value;
      break;
    case 'd':
      this.node.path = jvm.VMLPathElement.pathSvgToVml(value);
      break;
    default:
      jvm.VMLShapeElement.parentClass.prototype.applyAttr.apply(this, arguments);
  }
};
jvm.VMLPathElement = function(config, style) {
  var scale = new jvm.VMLElement('skew');

  jvm.VMLPathElement.parentClass.call(this, 'shape', config, style);

  this.node.coordorigin = "0 0";

  scale.node.on = true;
  scale.node.matrix = '0.01,0,0,0.01,0,0';
  scale.node.offset = '0,0';

  this.node.appendChild(scale.node);
};

jvm.inherits(jvm.VMLPathElement, jvm.VMLShapeElement);

jvm.VMLPathElement.prototype.applyAttr = function(attr, value) {
  if (attr === 'd') {
    this.node.path = jvm.VMLPathElement.pathSvgToVml(value);
  } else {
    jvm.VMLShapeElement.prototype.applyAttr.call(this, attr, value);
  }
};

jvm.VMLPathElement.pathSvgToVml = function(path) {
  var cx = 0,
    cy = 0,
    ctrlx, ctrly;

  path = path.replace(/(-?\d+)e(-?\d+)/g, '0');
  return path.replace(/([MmLlHhVvCcSs])\s*((?:-?\d*(?:\.\d+)?\s*,?\s*)+)/g, function(segment, letter, coords, index) {
    coords = coords.replace(/(\d)-/g, '$1,-')
      .replace(/^\s+/g, '')
      .replace(/\s+$/g, '')
      .replace(/\s+/g, ',').split(',');
    if (!coords[0]) coords.shift();
    for (var i = 0, l = coords.length; i < l; i++) {
      coords[i] = Math.round(100 * coords[i]);
    }
    switch (letter) {
      case 'm':
        cx += coords[0];
        cy += coords[1];
        return 't' + coords.join(',');
      case 'M':
        cx = coords[0];
        cy = coords[1];
        return 'm' + coords.join(',');
      case 'l':
        cx += coords[0];
        cy += coords[1];
        return 'r' + coords.join(',');
      case 'L':
        cx = coords[0];
        cy = coords[1];
        return 'l' + coords.join(',');
      case 'h':
        cx += coords[0];
        return 'r' + coords[0] + ',0';
      case 'H':
        cx = coords[0];
        return 'l' + cx + ',' + cy;
      case 'v':
        cy += coords[0];
        return 'r0,' + coords[0];
      case 'V':
        cy = coords[0];
        return 'l' + cx + ',' + cy;
      case 'c':
        ctrlx = cx + coords[coords.length - 4];
        ctrly = cy + coords[coords.length - 3];
        cx += coords[coords.length - 2];
        cy += coords[coords.length - 1];
        return 'v' + coords.join(',');
      case 'C':
        ctrlx = coords[coords.length - 4];
        ctrly = coords[coords.length - 3];
        cx = coords[coords.length - 2];
        cy = coords[coords.length - 1];
        return 'c' + coords.join(',');
      case 's':
        coords.unshift(cy - ctrly);
        coords.unshift(cx - ctrlx);
        ctrlx = cx + coords[coords.length - 4];
        ctrly = cy + coords[coords.length - 3];
        cx += coords[coords.length - 2];
        cy += coords[coords.length - 1];
        return 'v' + coords.join(',');
      case 'S':
        coords.unshift(cy + cy - ctrly);
        coords.unshift(cx + cx - ctrlx);
        ctrlx = coords[coords.length - 4];
        ctrly = coords[coords.length - 3];
        cx = coords[coords.length - 2];
        cy = coords[coords.length - 1];
        return 'c' + coords.join(',');
    }
    return '';
  }).replace(/z/g, 'e');
};
jvm.VMLCircleElement = function(config, style) {
  jvm.VMLCircleElement.parentClass.call(this, 'oval', config, style);
};

jvm.inherits(jvm.VMLCircleElement, jvm.VMLShapeElement);

jvm.VMLCircleElement.prototype.applyAttr = function(attr, value) {
  switch (attr) {
    case 'r':
      this.node.style.width = value * 2 + 'px';
      this.node.style.height = value * 2 + 'px';
      this.applyAttr('cx', this.get('cx') || 0);
      this.applyAttr('cy', this.get('cy') || 0);
      break;
    case 'cx':
      if (!value) return;
      this.node.style.left = value - (this.get('r') || 0) + 'px';
      break;
    case 'cy':
      if (!value) return;
      this.node.style.top = value - (this.get('r') || 0) + 'px';
      break;
    default:
      jvm.VMLCircleElement.parentClass.prototype.applyAttr.call(this, attr, value);
  }
};
/**
 * Class for vector images manipulations.
 * @constructor
 * @param {DOMElement} container to place canvas to
 * @param {Number} width
 * @param {Number} height
 */
jvm.VectorCanvas = function(container, width, height) {
  this.mode = window.SVGAngle ? 'svg' : 'vml';

  if (this.mode == 'svg') {
    this.impl = new jvm.SVGCanvasElement(container, width, height);
  } else {
    this.impl = new jvm.VMLCanvasElement(container, width, height);
  }
  this.impl.mode = this.mode;
  return this.impl;
};
jvm.SimpleScale = function(scale) {
  this.scale = scale;
};

jvm.SimpleScale.prototype.getValue = function(value) {
  return value;
};
jvm.OrdinalScale = function(scale) {
  this.scale = scale;
};

jvm.OrdinalScale.prototype.getValue = function(value) {
  return this.scale[value];
};

jvm.OrdinalScale.prototype.getTicks = function() {
  var ticks = [],
    key;

  for (key in this.scale) {
    ticks.push({
      label: key,
      value: this.scale[key]
    });
  }

  return ticks;
};
jvm.NumericScale = function(scale, normalizeFunction, minValue, maxValue) {
  this.scale = [];

  normalizeFunction = normalizeFunction || 'linear';

  if (scale) this.setScale(scale);
  if (normalizeFunction) this.setNormalizeFunction(normalizeFunction);
  if (typeof minValue !== 'undefined') this.setMin(minValue);
  if (typeof maxValue !== 'undefined') this.setMax(maxValue);
};

jvm.NumericScale.prototype = {
  setMin: function(min) {
    this.clearMinValue = min;
    if (typeof this.normalize === 'function') {
      this.minValue = this.normalize(min);
    } else {
      this.minValue = min;
    }
  },

  setMax: function(max) {
    this.clearMaxValue = max;
    if (typeof this.normalize === 'function') {
      this.maxValue = this.normalize(max);
    } else {
      this.maxValue = max;
    }
  },

  setScale: function(scale) {
    var i;

    this.scale = [];
    for (i = 0; i < scale.length; i++) {
      this.scale[i] = [scale[i]];
    }
  },

  setNormalizeFunction: function(f) {
    if (f === 'polynomial') {
      this.normalize = function(value) {
        return Math.pow(value, 0.2);
      }
    } else if (f === 'linear') {
      delete this.normalize;
    } else {
      this.normalize = f;
    }
    this.setMin(this.clearMinValue);
    this.setMax(this.clearMaxValue);
  },

  getValue: function(value) {
    var lengthes = [],
      fullLength = 0,
      l,
      i = 0,
      c;

    if (typeof this.normalize === 'function') {
      value = this.normalize(value);
    }
    for (i = 0; i < this.scale.length - 1; i++) {
      l = this.vectorLength(this.vectorSubtract(this.scale[i + 1], this.scale[i]));
      lengthes.push(l);
      fullLength += l;
    }

    c = (this.maxValue - this.minValue) / fullLength;
    for (i = 0; i < lengthes.length; i++) {
      lengthes[i] *= c;
    }

    i = 0;
    value -= this.minValue;
    while (value - lengthes[i] >= 0) {
      value -= lengthes[i];
      i++;
    }

    if (i == this.scale.length - 1) {
      value = this.vectorToNum(this.scale[i])
    } else {
      value = (
        this.vectorToNum(
          this.vectorAdd(this.scale[i],
            this.vectorMult(
              this.vectorSubtract(this.scale[i + 1], this.scale[i]), (value) / (lengthes[i])
            )
          )
        )
      );
    }

    return value;
  },

  vectorToNum: function(vector) {
    var num = 0,
      i;

    for (i = 0; i < vector.length; i++) {
      num += Math.round(vector[i]) * Math.pow(256, vector.length - i - 1);
    }
    return num;
  },

  vectorSubtract: function(vector1, vector2) {
    var vector = [],
      i;

    for (i = 0; i < vector1.length; i++) {
      vector[i] = vector1[i] - vector2[i];
    }
    return vector;
  },

  vectorAdd: function(vector1, vector2) {
    var vector = [],
      i;

    for (i = 0; i < vector1.length; i++) {
      vector[i] = vector1[i] + vector2[i];
    }
    return vector;
  },

  vectorMult: function(vector, num) {
    var result = [],
      i;

    for (i = 0; i < vector.length; i++) {
      result[i] = vector[i] * num;
    }
    return result;
  },

  vectorLength: function(vector) {
    var result = 0,
      i;
    for (i = 0; i < vector.length; i++) {
      result += vector[i] * vector[i];
    }
    return Math.sqrt(result);
  },

  /* Derived from d3 implementation https://github.com/mbostock/d3/blob/master/src/scale/linear.js#L94 */
  getTicks: function() {
    var m = 5,
      extent = [this.clearMinValue, this.clearMaxValue],
      span = extent[1] - extent[0],
      step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)),
      err = m / span * step,
      ticks = [],
      tick,
      v;

    if (err <= .15) step *= 10;
    else if (err <= .35) step *= 5;
    else if (err <= .75) step *= 2;

    extent[0] = Math.floor(extent[0] / step) * step;
    extent[1] = Math.ceil(extent[1] / step) * step;

    tick = extent[0];
    while (tick <= extent[1]) {
      if (tick == extent[0]) {
        v = this.clearMinValue;
      } else if (tick == extent[1]) {
        v = this.clearMaxValue;
      } else {
        v = tick;
      }
      ticks.push({
        label: tick,
        value: this.getValue(v)
      });
      tick += step;
    }

    return ticks;
  }
};
jvm.ColorScale = function(colors, normalizeFunction, minValue, maxValue) {
  jvm.ColorScale.parentClass.apply(this, arguments);
}

jvm.inherits(jvm.ColorScale, jvm.NumericScale);

jvm.ColorScale.prototype.setScale = function(scale) {
  var i;

  for (i = 0; i < scale.length; i++) {
    this.scale[i] = jvm.ColorScale.rgbToArray(scale[i]);
  }
};

jvm.ColorScale.prototype.getValue = function(value) {
  return jvm.ColorScale.numToRgb(jvm.ColorScale.parentClass.prototype.getValue.call(this, value));
};

jvm.ColorScale.arrayToRgb = function(ar) {
  var rgb = '#',
    d,
    i;

  for (i = 0; i < ar.length; i++) {
    d = ar[i].toString(16);
    rgb += d.length == 1 ? '0' + d : d;
  }
  return rgb;
};

jvm.ColorScale.numToRgb = function(num) {
  num = num.toString(16);

  while (num.length < 6) {
    num = '0' + num;
  }

  return '#' + num;
};

jvm.ColorScale.rgbToArray = function(rgb) {
  rgb = rgb.substr(1);
  return [parseInt(rgb.substr(0, 2), 16), parseInt(rgb.substr(2, 2), 16), parseInt(rgb.substr(4, 2), 16)];
};
/**
 * Represents map legend.
 * @constructor
 * @param {Object} params Configuration parameters.
 * @param {String} params.cssClass Additional CSS class to apply to legend element.
 * @param {Boolean} params.vertical If <code>true</code> legend will be rendered as vertical.
 * @param {String} params.title Legend title.
 * @param {Function} params.labelRender Method to convert series values to legend labels.
 */
jvm.Legend = function(params) {
  this.params = params || {};
  this.map = this.params.map;
  this.series = this.params.series;
  this.body = jvm.$('<div/>');
  this.body.addClass('jvectormap-legend');
  if (this.params.cssClass) {
    this.body.addClass(this.params.cssClass);
  }

  if (params.vertical) {
    this.map.legendCntVertical.append(this.body);
  } else {
    this.map.legendCntHorizontal.append(this.body);
  }

  this.render();
}

jvm.Legend.prototype.render = function() {
    var ticks = this.series.scale.getTicks(),
      i,
      inner = jvm.$('<div/>').addClass('jvectormap-legend-inner'),
      tick,
      sample,
      label;

    this.body.html('');
    if (this.params.title) {
      this.body.append(
        jvm.$('<div/>').addClass('jvectormap-legend-title').html(this.params.title)
      );
    }
    this.body.append(inner);

    for (i = 0; i < ticks.length; i++) {
      tick = jvm.$('<div/>').addClass('jvectormap-legend-tick');
      sample = jvm.$('<div/>').addClass('jvectormap-legend-tick-sample');

      switch (this.series.params.attribute) {
        case 'fill':
          if (jvm.isImageUrl(ticks[i].value)) {
            sample.css('background', 'url(' + ticks[i].value + ')');
          } else {
            sample.css('background', ticks[i].value);
          }
          break;
        case 'stroke':
          sample.css('background', ticks[i].value);
          break;
        case 'image':
          sample.css('background', 'url(' + ticks[i].value + ') no-repeat center center');
          break;
        case 'r':
          jvm.$('<div/>').css({
            'border-radius': ticks[i].value,
            border: this.map.params.markerStyle.initial['stroke-width'] + 'px ' +
              this.map.params.markerStyle.initial['stroke'] + ' solid',
            width: ticks[i].value * 2 + 'px',
            height: ticks[i].value * 2 + 'px',
            background: this.map.params.markerStyle.initial['fill']
          }).appendTo(sample);
          break;
      }
      tick.append(sample);
      label = ticks[i].label;
      if (this.params.labelRender) {
        label = this.params.labelRender(label);
      }
      tick.append(jvm.$('<div>' + label + ' </div>').addClass('jvectormap-legend-tick-text'));
      inner.append(tick);
    }
    inner.append(jvm.$('<div/>').css('clear', 'both'));
  }
  /**
   * Creates data series.
   * @constructor
   * @param {Object} params Parameters to initialize series with.
   * @param {Array} params.values The data set to visualize.
   * @param {String} params.attribute Numberic or color attribute to use for data visualization. This could be: <code>fill</code>, <code>stroke</code>, <code>fill-opacity</code>, <code>stroke-opacity</code> for markers and regions and <code>r</code> (radius) for markers only.
   * @param {Array} params.scale Values used to map a dimension of data to a visual representation. The first value sets visualization for minimum value from the data set and the last value sets visualization for the maximum value. There also could be intermidiate values. Default value is <code>['#C8EEFF', '#0071A4']</code>
   * @param {Function|String} params.normalizeFunction The function used to map input values to the provided scale. This parameter could be provided as function or one of the strings: <code>'linear'</code> or <code>'polynomial'</code>, while <code>'linear'</code> is used by default. The function provided takes value from the data set as an input and returns corresponding value from the scale.
   * @param {Number} params.min Minimum value of the data set. Could be calculated automatically if not provided.
   * @param {Number} params.min Maximum value of the data set. Could be calculated automatically if not provided.
   */
jvm.DataSeries = function(params, elements, map) {
  var scaleConstructor;

  params = params || {};
  params.attribute = params.attribute || 'fill';

  this.elements = elements;
  this.params = params;
  this.map = map;

  if (params.attributes) {
    this.setAttributes(params.attributes);
  }

  if (jvm.$.isArray(params.scale)) {
    scaleConstructor = (params.attribute === 'fill' || params.attribute === 'stroke') ? jvm.ColorScale : jvm.NumericScale;
    this.scale = new scaleConstructor(params.scale, params.normalizeFunction, params.min, params.max);
  } else if (params.scale) {
    this.scale = new jvm.OrdinalScale(params.scale);
  } else {
    this.scale = new jvm.SimpleScale(params.scale);
  }

  this.values = params.values || {};
  this.setValues(this.values);

  if (this.params.legend) {
    this.legend = new jvm.Legend($.extend({
      map: this.map,
      series: this
    }, this.params.legend))
  }
};

jvm.DataSeries.prototype = {
  setAttributes: function(key, attr) {
    var attrs = key,
      code;

    if (typeof key == 'string') {
      if (this.elements[key]) {
        this.elements[key].setStyle(this.params.attribute, attr);
      }
    } else {
      for (code in attrs) {
        if (this.elements[code]) {
          this.elements[code].element.setStyle(this.params.attribute, attrs[code]);
        }
      }
    }
  },

  /**
   * Set values for the data set.
   * @param {Object} values Object which maps codes of regions or markers to values.
   */
  setValues: function(values) {
    var max = -Number.MAX_VALUE,
      min = Number.MAX_VALUE,
      val,
      cc,
      attrs = {};

    if (!(this.scale instanceof jvm.OrdinalScale) && !(this.scale instanceof jvm.SimpleScale)) {
      // we have a color scale as an array
      if (typeof this.params.min === 'undefined' || typeof this.params.max === 'undefined') {
        // min and/or max are not defined, so calculate them
        for (cc in values) {
          val = parseFloat(values[cc]);
          if (val > max) max = val;
          if (val < min) min = val;
        }
      }

      if (typeof this.params.min === 'undefined') {
        this.scale.setMin(min);
        this.params.min = min;
      } else {
        this.scale.setMin(this.params.min);
      }

      if (typeof this.params.max === 'undefined') {
        this.scale.setMax(max);
        this.params.max = max;
      } else {
        this.scale.setMax(this.params.max);
      }

      for (cc in values) {
        if (cc != 'indexOf') {
          val = parseFloat(values[cc]);
          if (!isNaN(val)) {
            attrs[cc] = this.scale.getValue(val);
          } else {
            attrs[cc] = this.elements[cc].element.style.initial[this.params.attribute];
          }
        }
      }
    } else {
      for (cc in values) {
        if (values[cc]) {
          attrs[cc] = this.scale.getValue(values[cc]);
        } else {
          attrs[cc] = this.elements[cc].element.style.initial[this.params.attribute];
        }
      }
    }

    this.setAttributes(attrs);
    jvm.$.extend(this.values, values);
  },

  clear: function() {
    var key,
      attrs = {};

    for (key in this.values) {
      if (this.elements[key]) {
        attrs[key] = this.elements[key].element.shape.style.initial[this.params.attribute];
      }
    }
    this.setAttributes(attrs);
    this.values = {};
  },

  /**
   * Set scale of the data series.
   * @param {Array} scale Values representing scale.
   */
  setScale: function(scale) {
    this.scale.setScale(scale);
    if (this.values) {
      this.setValues(this.values);
    }
  },

  /**
   * Set normalize function of the data series.
   * @param {Function|String} normilizeFunction.
   */
  setNormalizeFunction: function(f) {
    this.scale.setNormalizeFunction(f);
    if (this.values) {
      this.setValues(this.values);
    }
  }
};
/**
 * Contains methods for transforming point on sphere to
 * Cartesian coordinates using various projections.
 * @class
 */
jvm.Proj = {
  degRad: 180 / Math.PI,
  radDeg: Math.PI / 180,
  radius: 6381372,

  sgn: function(n) {
    if (n > 0) {
      return 1;
    } else if (n < 0) {
      return -1;
    } else {
      return n;
    }
  },

  /**
   * Converts point on sphere to the Cartesian coordinates using Miller projection
   * @param {Number} lat Latitude in degrees
   * @param {Number} lng Longitude in degrees
   * @param {Number} c Central meridian in degrees
   */
  mill: function(lat, lng, c) {
    return {
      x: this.radius * (lng - c) * this.radDeg,
      y: -this.radius * Math.log(Math.tan((45 + 0.4 * lat) * this.radDeg)) / 0.8
    };
  },

  /**
   * Inverse function of mill()
   * Converts Cartesian coordinates to point on sphere using Miller projection
   * @param {Number} x X of point in Cartesian system as integer
   * @param {Number} y Y of point in Cartesian system as integer
   * @param {Number} c Central meridian in degrees
   */
  mill_inv: function(x, y, c) {
    return {
      lat: (2.5 * Math.atan(Math.exp(0.8 * y / this.radius)) - 5 * Math.PI / 8) * this.degRad,
      lng: (c * this.radDeg + x / this.radius) * this.degRad
    };
  },

  /**
   * Converts point on sphere to the Cartesian coordinates using Mercator projection
   * @param {Number} lat Latitude in degrees
   * @param {Number} lng Longitude in degrees
   * @param {Number} c Central meridian in degrees
   */
  merc: function(lat, lng, c) {
    return {
      x: this.radius * (lng - c) * this.radDeg,
      y: -this.radius * Math.log(Math.tan(Math.PI / 4 + lat * Math.PI / 360))
    };
  },

  /**
   * Inverse function of merc()
   * Converts Cartesian coordinates to point on sphere using Mercator projection
   * @param {Number} x X of point in Cartesian system as integer
   * @param {Number} y Y of point in Cartesian system as integer
   * @param {Number} c Central meridian in degrees
   */
  merc_inv: function(x, y, c) {
    return {
      lat: (2 * Math.atan(Math.exp(y / this.radius)) - Math.PI / 2) * this.degRad,
      lng: (c * this.radDeg + x / this.radius) * this.degRad
    };
  },

  /**
   * Converts point on sphere to the Cartesian coordinates using Albers Equal-Area Conic
   * projection
   * @see <a href="http://mathworld.wolfram.com/AlbersEqual-AreaConicProjection.html">Albers Equal-Area Conic projection</a>
   * @param {Number} lat Latitude in degrees
   * @param {Number} lng Longitude in degrees
   * @param {Number} c Central meridian in degrees
   */
  aea: function(lat, lng, c) {
    var fi0 = 0,
      lambda0 = c * this.radDeg,
      fi1 = 29.5 * this.radDeg,
      fi2 = 45.5 * this.radDeg,
      fi = lat * this.radDeg,
      lambda = lng * this.radDeg,
      n = (Math.sin(fi1) + Math.sin(fi2)) / 2,
      C = Math.cos(fi1) * Math.cos(fi1) + 2 * n * Math.sin(fi1),
      theta = n * (lambda - lambda0),
      ro = Math.sqrt(C - 2 * n * Math.sin(fi)) / n,
      ro0 = Math.sqrt(C - 2 * n * Math.sin(fi0)) / n;

    return {
      x: ro * Math.sin(theta) * this.radius,
      y: -(ro0 - ro * Math.cos(theta)) * this.radius
    };
  },

  /**
   * Converts Cartesian coordinates to the point on sphere using Albers Equal-Area Conic
   * projection
   * @see <a href="http://mathworld.wolfram.com/AlbersEqual-AreaConicProjection.html">Albers Equal-Area Conic projection</a>
   * @param {Number} x X of point in Cartesian system as integer
   * @param {Number} y Y of point in Cartesian system as integer
   * @param {Number} c Central meridian in degrees
   */
  aea_inv: function(xCoord, yCoord, c) {
    var x = xCoord / this.radius,
      y = yCoord / this.radius,
      fi0 = 0,
      lambda0 = c * this.radDeg,
      fi1 = 29.5 * this.radDeg,
      fi2 = 45.5 * this.radDeg,
      n = (Math.sin(fi1) + Math.sin(fi2)) / 2,
      C = Math.cos(fi1) * Math.cos(fi1) + 2 * n * Math.sin(fi1),
      ro0 = Math.sqrt(C - 2 * n * Math.sin(fi0)) / n,
      ro = Math.sqrt(x * x + (ro0 - y) * (ro0 - y)),
      theta = Math.atan(x / (ro0 - y));

    return {
      lat: (Math.asin((C - ro * ro * n * n) / (2 * n))) * this.degRad,
      lng: (lambda0 + theta / n) * this.degRad
    };
  },

  /**
   * Converts point on sphere to the Cartesian coordinates using Lambert conformal
   * conic projection
   * @see <a href="http://mathworld.wolfram.com/LambertConformalConicProjection.html">Lambert Conformal Conic Projection</a>
   * @param {Number} lat Latitude in degrees
   * @param {Number} lng Longitude in degrees
   * @param {Number} c Central meridian in degrees
   */
  lcc: function(lat, lng, c) {
    var fi0 = 0,
      lambda0 = c * this.radDeg,
      lambda = lng * this.radDeg,
      fi1 = 33 * this.radDeg,
      fi2 = 45 * this.radDeg,
      fi = lat * this.radDeg,
      n = Math.log(Math.cos(fi1) * (1 / Math.cos(fi2))) / Math.log(Math.tan(Math.PI / 4 + fi2 / 2) * (1 / Math.tan(Math.PI / 4 + fi1 / 2))),
      F = (Math.cos(fi1) * Math.pow(Math.tan(Math.PI / 4 + fi1 / 2), n)) / n,
      ro = F * Math.pow(1 / Math.tan(Math.PI / 4 + fi / 2), n),
      ro0 = F * Math.pow(1 / Math.tan(Math.PI / 4 + fi0 / 2), n);

    return {
      x: ro * Math.sin(n * (lambda - lambda0)) * this.radius,
      y: -(ro0 - ro * Math.cos(n * (lambda - lambda0))) * this.radius
    };
  },

  /**
   * Converts Cartesian coordinates to the point on sphere using Lambert conformal conic
   * projection
   * @see <a href="http://mathworld.wolfram.com/LambertConformalConicProjection.html">Lambert Conformal Conic Projection</a>
   * @param {Number} x X of point in Cartesian system as integer
   * @param {Number} y Y of point in Cartesian system as integer
   * @param {Number} c Central meridian in degrees
   */
  lcc_inv: function(xCoord, yCoord, c) {
    var x = xCoord / this.radius,
      y = yCoord / this.radius,
      fi0 = 0,
      lambda0 = c * this.radDeg,
      fi1 = 33 * this.radDeg,
      fi2 = 45 * this.radDeg,
      n = Math.log(Math.cos(fi1) * (1 / Math.cos(fi2))) / Math.log(Math.tan(Math.PI / 4 + fi2 / 2) * (1 / Math.tan(Math.PI / 4 + fi1 / 2))),
      F = (Math.cos(fi1) * Math.pow(Math.tan(Math.PI / 4 + fi1 / 2), n)) / n,
      ro0 = F * Math.pow(1 / Math.tan(Math.PI / 4 + fi0 / 2), n),
      ro = this.sgn(n) * Math.sqrt(x * x + (ro0 - y) * (ro0 - y)),
      theta = Math.atan(x / (ro0 - y));

    return {
      lat: (2 * Math.atan(Math.pow(F / ro, 1 / n)) - Math.PI / 2) * this.degRad,
      lng: (lambda0 + theta / n) * this.degRad
    };
  }
};
jvm.MapObject = function(config) {};

jvm.MapObject.prototype.getLabelText = function(key) {
  var text;

  if (this.config.label) {
    if (typeof this.config.label.render === 'function') {
      text = this.config.label.render(key);
    } else {
      text = key;
    }
  } else {
    text = null;
  }
  return text;
}

jvm.MapObject.prototype.getLabelOffsets = function(key) {
  var offsets;

  if (this.config.label) {
    if (typeof this.config.label.offsets === 'function') {
      offsets = this.config.label.offsets(key);
    } else if (typeof this.config.label.offsets === 'object') {
      offsets = this.config.label.offsets[key];
    }
  }
  return offsets || [0, 0];
}

/**
 * Set hovered state to the element. Hovered state means mouse cursor is over element. Styles will be updates respectively.
 * @param {Boolean} isHovered <code>true</code> to make element hovered, <code>false</code> otherwise.
 */
jvm.MapObject.prototype.setHovered = function(isHovered) {
  if (this.isHovered !== isHovered) {
    this.isHovered = isHovered;
    this.shape.isHovered = isHovered;
    this.shape.updateStyle();
    if (this.label) {
      this.label.isHovered = isHovered;
      this.label.updateStyle();
    }
  }
};

/**
 * Set selected state to the element. Styles will be updates respectively.
 * @param {Boolean} isSelected <code>true</code> to make element selected, <code>false</code> otherwise.
 */
jvm.MapObject.prototype.setSelected = function(isSelected) {
  if (this.isSelected !== isSelected) {
    this.isSelected = isSelected;
    this.shape.isSelected = isSelected;
    this.shape.updateStyle();
    if (this.label) {
      this.label.isSelected = isSelected;
      this.label.updateStyle();
    }
    jvm.$(this.shape).trigger('selected', [isSelected]);
  }
};

jvm.MapObject.prototype.setStyle = function() {
  this.shape.setStyle.apply(this.shape, arguments);
};

jvm.MapObject.prototype.remove = function() {
  this.shape.remove();
  if (this.label) {
    this.label.remove();
  }
};
jvm.Region = function(config) {
  var bbox,
    text,
    offsets,
    labelDx,
    labelDy;

  this.config = config;
  this.map = this.config.map;

  this.shape = config.canvas.addPath({
    d: config.path,
    'data-code': config.code
  }, config.style, config.canvas.rootElement);
  this.shape.addClass('jvectormap-region jvectormap-element');

  bbox = this.shape.getBBox();

  text = this.getLabelText(config.code);
  if (this.config.label && text) {
    offsets = this.getLabelOffsets(config.code);
    this.labelX = bbox.x + bbox.width / 2 + offsets[0];
    this.labelY = bbox.y + bbox.height / 2 + offsets[1];
    this.label = config.canvas.addText({
      text: text,
      'text-anchor': 'middle',
      'alignment-baseline': 'central',
      x: this.labelX,
      y: this.labelY,
      'data-code': config.code
    }, config.labelStyle, config.labelsGroup);
    this.label.addClass('jvectormap-region jvectormap-element');
  }
};

jvm.inherits(jvm.Region, jvm.MapObject);

jvm.Region.prototype.updateLabelPosition = function() {
  if (this.label) {
    this.label.set({
      x: this.labelX * this.map.scale + this.map.transX * this.map.scale,
      y: this.labelY * this.map.scale + this.map.transY * this.map.scale
    });
  }
};
jvm.Marker = function(config) {
  var text,
    offsets;

  this.config = config;
  this.map = this.config.map;

  this.isImage = !!this.config.style.initial.image;
  this.createShape();

  text = this.getLabelText(config.index);
  if (this.config.label && text) {
    this.offsets = this.getLabelOffsets(config.index);
    this.labelX = config.cx / this.map.scale - this.map.transX;
    this.labelY = config.cy / this.map.scale - this.map.transY;
    this.label = config.canvas.addText({
      text: text,
      'data-index': config.index,
      dy: "0.6ex",
      x: this.labelX,
      y: this.labelY
    }, config.labelStyle, config.labelsGroup);

    this.label.addClass('jvectormap-marker jvectormap-element');
  }
};

jvm.inherits(jvm.Marker, jvm.MapObject);

jvm.Marker.prototype.createShape = function() {
  var that = this;

  if (this.shape) {
    this.shape.remove();
  }
  this.shape = this.config.canvas[this.isImage ? 'addImage' : 'addCircle']({
    "data-index": this.config.index,
    cx: this.config.cx,
    cy: this.config.cy
  }, this.config.style, this.config.group);

  this.shape.addClass('jvectormap-marker jvectormap-element');

  if (this.isImage) {
    jvm.$(this.shape.node).on('imageloaded', function() {
      that.updateLabelPosition();
    });
  }
};

jvm.Marker.prototype.updateLabelPosition = function() {
  if (this.label) {
    this.label.set({
      x: this.labelX * this.map.scale + this.offsets[0] +
        this.map.transX * this.map.scale + 5 + (this.isImage ? (this.shape.width || 0) / 2 : this.shape.properties.r),
      y: this.labelY * this.map.scale + this.map.transY * this.map.scale + this.offsets[1]
    });
  }
};

jvm.Marker.prototype.setStyle = function(property, value) {
  var isImage;

  jvm.Marker.parentClass.prototype.setStyle.apply(this, arguments);

  if (property === 'r') {
    this.updateLabelPosition();
  }

  isImage = !!this.shape.get('image');
  if (isImage != this.isImage) {
    this.isImage = isImage;
    this.config.style = jvm.$.extend(true, {}, this.shape.style);
    this.createShape();
  }
};
/**
 * Creates map, draws paths, binds events.
 * @constructor
 * @param {Object} params Parameters to initialize map with.
 * @param {String} params.map Name of the map in the format <code>territory_proj_lang</code> where <code>territory</code> is a unique code or name of the territory which the map represents (ISO 3166 standard is used where possible), <code>proj</code> is a name of projection used to generate representation of the map on the plane (projections are named according to the conventions of proj4 utility) and <code>lang</code> is a code of the language, used for the names of regions.
 * @param {String} params.backgroundColor Background color of the map in CSS format.
 * @param {Boolean} params.zoomOnScroll When set to true map could be zoomed using mouse scroll. Default value is <code>true</code>.
 * @param {Boolean} params.zoomOnScrollSpeed Mouse scroll speed. Number from 1 to 10. Default value is <code>3</code>.
 * @param {Boolean} params.panOnDrag When set to true, the map pans when being dragged. Default value is <code>true</code>.
 * @param {Number} params.zoomMax Indicates the maximum zoom ratio which could be reached zooming the map. Default value is <code>8</code>.
 * @param {Number} params.zoomMin Indicates the minimum zoom ratio which could be reached zooming the map. Default value is <code>1</code>.
 * @param {Number} params.zoomStep Indicates the multiplier used to zoom map with +/- buttons. Default value is <code>1.6</code>.
 * @param {Boolean} params.zoomAnimate Indicates whether or not to animate changing of map zoom with zoom buttons.
 * @param {Boolean} params.regionsSelectable When set to true regions of the map could be selected. Default value is <code>false</code>.
 * @param {Boolean} params.regionsSelectableOne Allow only one region to be selected at the moment. Default value is <code>false</code>.
 * @param {Boolean} params.markersSelectable When set to true markers on the map could be selected. Default value is <code>false</code>.
 * @param {Boolean} params.markersSelectableOne Allow only one marker to be selected at the moment. Default value is <code>false</code>.
 * @param {Object} params.regionStyle Set the styles for the map's regions. Each region or marker has four states: <code>initial</code> (default state), <code>hover</code> (when the mouse cursor is over the region or marker), <code>selected</code> (when region or marker is selected), <code>selectedHover</code> (when the mouse cursor is over the region or marker and it's selected simultaneously). Styles could be set for each of this states. Default value for that parameter is:
<pre>{
  initial: {
    fill: 'white',
    "fill-opacity": 1,
    stroke: 'none',
    "stroke-width": 0,
    "stroke-opacity": 1
  },
  hover: {
    "fill-opacity": 0.8,
    cursor: 'pointer'
  },
  selected: {
    fill: 'yellow'
  },
  selectedHover: {
  }
}</pre>
* @param {Object} params.regionLabelStyle Set the styles for the regions' labels. Each region or marker has four states: <code>initial</code> (default state), <code>hover</code> (when the mouse cursor is over the region or marker), <code>selected</code> (when region or marker is selected), <code>selectedHover</code> (when the mouse cursor is over the region or marker and it's selected simultaneously). Styles could be set for each of this states. Default value for that parameter is:
<pre>{
  initial: {
    'font-family': 'Verdana',
    'font-size': '12',
    'font-weight': 'bold',
    cursor: 'default',
    fill: 'black'
  },
  hover: {
    cursor: 'pointer'
  }
}</pre>
 * @param {Object} params.markerStyle Set the styles for the map's markers. Any parameter suitable for <code>regionStyle</code> could be used as well as numeric parameter <code>r</code> to set the marker's radius. Default value for that parameter is:
<pre>{
  initial: {
    fill: 'grey',
    stroke: '#505050',
    "fill-opacity": 1,
    "stroke-width": 1,
    "stroke-opacity": 1,
    r: 5
  },
  hover: {
    stroke: 'black',
    "stroke-width": 2,
    cursor: 'pointer'
  },
  selected: {
    fill: 'blue'
  },
  selectedHover: {
  }
}</pre>
 * @param {Object} params.markerLabelStyle Set the styles for the markers' labels. Default value for that parameter is:
<pre>{
  initial: {
    'font-family': 'Verdana',
    'font-size': '12',
    'font-weight': 'bold',
    cursor: 'default',
    fill: 'black'
  },
  hover: {
    cursor: 'pointer'
  }
}</pre>
 * @param {Object|Array} params.markers Set of markers to add to the map during initialization. In case of array is provided, codes of markers will be set as string representations of array indexes. Each marker is represented by <code>latLng</code> (array of two numeric values), <code>name</code> (string which will be show on marker's tip) and any marker styles.
 * @param {Object} params.series Object with two keys: <code>markers</code> and <code>regions</code>. Each of which is an array of series configs to be applied to the respective map elements. See <a href="jvm.DataSeries.html">DataSeries</a> description for a list of parameters available.
 * @param {Object|String} params.focusOn This parameter sets the initial position and scale of the map viewport. See <code>setFocus</code> docuemntation for possible parameters.
 * @param {Object} params.labels Defines parameters for rendering static labels. Object could contain two keys: <code>regions</code> and <code>markers</code>. Each key value defines configuration object with the following possible options:
<ul>
  <li><code>render {Function}</code> - defines method for converting region code or marker index to actual label value.</li>
  <li><code>offsets {Object|Function}</code> - provides method or object which could be used to define label offset by region code or marker index.</li>
</ul>
<b>Plase note: static labels feature is not supported in Internet Explorer 8 and below.</b>
 * @param {Array|Object|String} params.selectedRegions Set initially selected regions.
 * @param {Array|Object|String} params.selectedMarkers Set initially selected markers.
 * @param {Function} params.onRegionTipShow <code>(Event e, Object tip, String code)</code> Will be called right before the region tip is going to be shown.
 * @param {Function} params.onRegionOver <code>(Event e, String code)</code> Will be called on region mouse over event.
 * @param {Function} params.onRegionOut <code>(Event e, String code)</code> Will be called on region mouse out event.
 * @param {Function} params.onRegionClick <code>(Event e, String code)</code> Will be called on region click event.
 * @param {Function} params.onRegionSelected <code>(Event e, String code, Boolean isSelected, Array selectedRegions)</code> Will be called when region is (de)selected. <code>isSelected</code> parameter of the callback indicates whether region is selected or not. <code>selectedRegions</code> contains codes of all currently selected regions.
 * @param {Function} params.onMarkerTipShow <code>(Event e, Object tip, String code)</code> Will be called right before the marker tip is going to be shown.
 * @param {Function} params.onMarkerOver <code>(Event e, String code)</code> Will be called on marker mouse over event.
 * @param {Function} params.onMarkerOut <code>(Event e, String code)</code> Will be called on marker mouse out event.
 * @param {Function} params.onMarkerClick <code>(Event e, String code)</code> Will be called on marker click event.
 * @param {Function} params.onMarkerSelected <code>(Event e, String code, Boolean isSelected, Array selectedMarkers)</code> Will be called when marker is (de)selected. <code>isSelected</code> parameter of the callback indicates whether marker is selected or not. <code>selectedMarkers</code> contains codes of all currently selected markers.
 * @param {Function} params.onViewportChange <code>(Event e, Number scale)</code> Triggered when the map's viewport is changed (map was panned or zoomed).
 */
jvm.Map = function(params) {
  var map = this,
    e;

  this.params = jvm.$.extend(true, {}, jvm.Map.defaultParams, params);

  if (!jvm.Map.maps[this.params.map]) {
    throw new Error('Attempt to use map which was not loaded: ' + this.params.map);
  }

  this.mapData = jvm.Map.maps[this.params.map];
  this.markers = {};
  this.regions = {};
  this.regionsColors = {};
  this.regionsData = {};

  this.container = jvm.$('<div>').addClass('jvectormap-container');
  if (this.params.container) {
    this.params.container.append(this.container);
  }
  this.container.data('mapObject', this);

  this.defaultWidth = this.mapData.width;
  this.defaultHeight = this.mapData.height;

  this.setBackgroundColor(this.params.backgroundColor);

  this.onResize = function() {
    map.updateSize();
  }
  jvm.$(window).resize(this.onResize);

  for (e in jvm.Map.apiEvents) {
    if (this.params[e]) {
      this.container.bind(jvm.Map.apiEvents[e] + '.jvectormap', this.params[e]);
    }
  }

  this.canvas = new jvm.VectorCanvas(this.container[0], this.width, this.height);

  if (('ontouchstart' in window) || (window.DocumentTouch && document instanceof DocumentTouch)) {
    if (this.params.bindTouchEvents) {
      this.bindContainerTouchEvents();
    }
  }
  this.bindContainerEvents();
  this.bindElementEvents();
  this.createTip();
  if (this.params.zoomButtons) {
    this.bindZoomButtons();
  }

  this.createRegions();
  this.createMarkers(this.params.markers || {});

  this.updateSize();

  if (this.params.focusOn) {
    if (typeof this.params.focusOn === 'string') {
      this.params.focusOn = {
        region: this.params.focusOn
      };
    } else if (jvm.$.isArray(this.params.focusOn)) {
      this.params.focusOn = {
        regions: this.params.focusOn
      };
    }
    this.setFocus(this.params.focusOn);
  }

  if (this.params.selectedRegions) {
    this.setSelectedRegions(this.params.selectedRegions);
  }
  if (this.params.selectedMarkers) {
    this.setSelectedMarkers(this.params.selectedMarkers);
  }

  this.legendCntHorizontal = jvm.$('<div/>').addClass('jvectormap-legend-cnt jvectormap-legend-cnt-h');
  this.legendCntVertical = jvm.$('<div/>').addClass('jvectormap-legend-cnt jvectormap-legend-cnt-v');
  this.container.append(this.legendCntHorizontal);
  this.container.append(this.legendCntVertical);

  if (this.params.series) {
    this.createSeries();
  }
};

jvm.Map.prototype = {
  transX: 0,
  transY: 0,
  scale: 1,
  baseTransX: 0,
  baseTransY: 0,
  baseScale: 1,

  width: 0,
  height: 0,

  /**
   * Set background color of the map.
   * @param {String} backgroundColor Background color in CSS format.
   */
  setBackgroundColor: function(backgroundColor) {
    this.container.css('background-color', backgroundColor);
  },

  resize: function() {
    var curBaseScale = this.baseScale;
    if (this.width / this.height > this.defaultWidth / this.defaultHeight) {
      this.baseScale = this.height / this.defaultHeight;
      this.baseTransX = Math.abs(this.width - this.defaultWidth * this.baseScale) / (2 * this.baseScale);
    } else {
      this.baseScale = this.width / this.defaultWidth;
      this.baseTransY = Math.abs(this.height - this.defaultHeight * this.baseScale) / (2 * this.baseScale);
    }
    this.scale *= this.baseScale / curBaseScale;
    this.transX *= this.baseScale / curBaseScale;
    this.transY *= this.baseScale / curBaseScale;
  },

  /**
   * Synchronize the size of the map with the size of the container. Suitable in situations where the size of the container is changed programmatically or container is shown after it became visible.
   */
  updateSize: function() {
    this.width = this.container.width();
    this.height = this.container.height();
    this.resize();
    this.canvas.setSize(this.width, this.height);
    this.applyTransform();
  },

  /**
   * Reset all the series and show the map with the initial zoom.
   */
  reset: function() {
    var key,
      i;

    for (key in this.series) {
      for (i = 0; i < this.series[key].length; i++) {
        this.series[key][i].clear();
      }
    }
    this.scale = this.baseScale;
    this.transX = this.baseTransX;
    this.transY = this.baseTransY;
    this.applyTransform();
  },

  applyTransform: function() {
    var maxTransX,
      maxTransY,
      minTransX,
      minTransY;

    if (this.defaultWidth * this.scale <= this.width) {
      maxTransX = (this.width - this.defaultWidth * this.scale) / (2 * this.scale);
      minTransX = (this.width - this.defaultWidth * this.scale) / (2 * this.scale);
    } else {
      maxTransX = 0;
      minTransX = (this.width - this.defaultWidth * this.scale) / this.scale;
    }

    if (this.defaultHeight * this.scale <= this.height) {
      maxTransY = (this.height - this.defaultHeight * this.scale) / (2 * this.scale);
      minTransY = (this.height - this.defaultHeight * this.scale) / (2 * this.scale);
    } else {
      maxTransY = 0;
      minTransY = (this.height - this.defaultHeight * this.scale) / this.scale;
    }

    if (this.transY > maxTransY) {
      this.transY = maxTransY;
    } else if (this.transY < minTransY) {
      this.transY = minTransY;
    }
    if (this.transX > maxTransX) {
      this.transX = maxTransX;
    } else if (this.transX < minTransX) {
      this.transX = minTransX;
    }

    this.canvas.applyTransformParams(this.scale, this.transX, this.transY);

    if (this.markers) {
      this.repositionMarkers();
    }

    this.repositionLabels();

    this.container.trigger('viewportChange', [this.scale / this.baseScale, this.transX, this.transY]);
  },

  bindContainerEvents: function() {
    var mouseDown = false,
      oldPageX,
      oldPageY,
      map = this;

    if (this.params.panOnDrag) {
      this.container.mousemove(function(e) {
        if (mouseDown) {
          map.transX -= (oldPageX - e.pageX) / map.scale;
          map.transY -= (oldPageY - e.pageY) / map.scale;

          map.applyTransform();

          oldPageX = e.pageX;
          oldPageY = e.pageY;
        }
        return false;
      }).mousedown(function(e) {
        mouseDown = true;
        oldPageX = e.pageX;
        oldPageY = e.pageY;
        return false;
      });

      this.onContainerMouseUp = function() {
        mouseDown = false;
      };
      jvm.$('body').mouseup(this.onContainerMouseUp);
    }

    if (this.params.zoomOnScroll) {
      this.container.mousewheel(function(event, delta, deltaX, deltaY) {
        var offset = jvm.$(map.container).offset(),
          centerX = event.pageX - offset.left,
          centerY = event.pageY - offset.top,
          zoomStep = Math.pow(1 + map.params.zoomOnScrollSpeed / 1000, event.deltaFactor * event.deltaY);

        map.tip.hide();

        map.setScale(map.scale * zoomStep, centerX, centerY);
        event.preventDefault();
      });
    }
  },

  bindContainerTouchEvents: function() {
    var touchStartScale,
      touchStartDistance,
      map = this,
      touchX,
      touchY,
      centerTouchX,
      centerTouchY,
      lastTouchesLength,
      handleTouchEvent = function(e) {
        var touches = e.originalEvent.touches,
          offset,
          scale,
          transXOld,
          transYOld;

        if (e.type == 'touchstart') {
          lastTouchesLength = 0;
        }

        if (touches.length == 1) {
          if (lastTouchesLength == 1) {
            transXOld = map.transX;
            transYOld = map.transY;
            map.transX -= (touchX - touches[0].pageX) / map.scale;
            map.transY -= (touchY - touches[0].pageY) / map.scale;
            map.applyTransform();
            map.tip.hide();
            if (transXOld != map.transX || transYOld != map.transY) {
              e.preventDefault();
            }
          }
          touchX = touches[0].pageX;
          touchY = touches[0].pageY;
        } else if (touches.length == 2) {
          if (lastTouchesLength == 2) {
            scale = Math.sqrt(
              Math.pow(touches[0].pageX - touches[1].pageX, 2) +
              Math.pow(touches[0].pageY - touches[1].pageY, 2)
            ) / touchStartDistance;
            map.setScale(
              touchStartScale * scale,
              centerTouchX,
              centerTouchY
            )
            map.tip.hide();
            e.preventDefault();
          } else {
            offset = jvm.$(map.container).offset();
            if (touches[0].pageX > touches[1].pageX) {
              centerTouchX = touches[1].pageX + (touches[0].pageX - touches[1].pageX) / 2;
            } else {
              centerTouchX = touches[0].pageX + (touches[1].pageX - touches[0].pageX) / 2;
            }
            if (touches[0].pageY > touches[1].pageY) {
              centerTouchY = touches[1].pageY + (touches[0].pageY - touches[1].pageY) / 2;
            } else {
              centerTouchY = touches[0].pageY + (touches[1].pageY - touches[0].pageY) / 2;
            }
            centerTouchX -= offset.left;
            centerTouchY -= offset.top;
            touchStartScale = map.scale;
            touchStartDistance = Math.sqrt(
              Math.pow(touches[0].pageX - touches[1].pageX, 2) +
              Math.pow(touches[0].pageY - touches[1].pageY, 2)
            );
          }
        }

        lastTouchesLength = touches.length;
      };

    jvm.$(this.container).bind('touchstart', handleTouchEvent);
    jvm.$(this.container).bind('touchmove', handleTouchEvent);
  },

  bindElementEvents: function() {
    var map = this,
      mouseMoved;

    this.container.mousemove(function() {
      mouseMoved = true;
    });

    /* Can not use common class selectors here because of the bug in jQuery
       SVG handling, use with caution. */
    this.container.delegate("[class~='jvectormap-element']", 'mouseover mouseout', function(e) {
      var baseVal = jvm.$(this).attr('class').baseVal || jvm.$(this).attr('class'),
        type = baseVal.indexOf('jvectormap-region') === -1 ? 'marker' : 'region',
        code = type == 'region' ? jvm.$(this).attr('data-code') : jvm.$(this).attr('data-index'),
        element = type == 'region' ? map.regions[code].element : map.markers[code].element,
        tipText = type == 'region' ? map.mapData.paths[code].name : (map.markers[code].config.name || ''),
        tipShowEvent = jvm.$.Event(type + 'TipShow.jvectormap'),
        overEvent = jvm.$.Event(type + 'Over.jvectormap');

      if (e.type == 'mouseover') {
        map.container.trigger(overEvent, [code]);
        if (!overEvent.isDefaultPrevented()) {
          element.setHovered(true);
        }

        map.tip.text(tipText);
        map.container.trigger(tipShowEvent, [map.tip, code]);
        if (!tipShowEvent.isDefaultPrevented()) {
          map.tip.show();
          map.tipWidth = map.tip.width();
          map.tipHeight = map.tip.height();
        }
      } else {
        element.setHovered(false);
        map.tip.hide();
        map.container.trigger(type + 'Out.jvectormap', [code]);
      }
    });

    /* Can not use common class selectors here because of the bug in jQuery
       SVG handling, use with caution. */
    this.container.delegate("[class~='jvectormap-element']", 'mousedown', function() {
      mouseMoved = false;
    });

    /* Can not use common class selectors here because of the bug in jQuery
       SVG handling, use with caution. */
    this.container.delegate("[class~='jvectormap-element']", 'mouseup', function() {
      var baseVal = jvm.$(this).attr('class').baseVal ? jvm.$(this).attr('class').baseVal : jvm.$(this).attr('class'),
        type = baseVal.indexOf('jvectormap-region') === -1 ? 'marker' : 'region',
        code = type == 'region' ? jvm.$(this).attr('data-code') : jvm.$(this).attr('data-index'),
        clickEvent = jvm.$.Event(type + 'Click.jvectormap'),
        element = type == 'region' ? map.regions[code].element : map.markers[code].element;

      if (!mouseMoved) {
        map.container.trigger(clickEvent, [code]);
        if ((type === 'region' && map.params.regionsSelectable) || (type === 'marker' && map.params.markersSelectable)) {
          if (!clickEvent.isDefaultPrevented()) {
            if (map.params[type + 'sSelectableOne']) {
              map.clearSelected(type + 's');
            }
            element.setSelected(!element.isSelected);
          }
        }
      }
    });
  },

  bindZoomButtons: function() {
    var map = this;

    jvm.$('<div/>').addClass('jvectormap-zoomin').text('+').appendTo(this.container);
    jvm.$('<div/>').addClass('jvectormap-zoomout').html('&#x2212;').appendTo(this.container);

    this.container.find('.jvectormap-zoomin').click(function() {
      map.setScale(map.scale * map.params.zoomStep, map.width / 2, map.height / 2, false, map.params.zoomAnimate);
    });
    this.container.find('.jvectormap-zoomout').click(function() {
      map.setScale(map.scale / map.params.zoomStep, map.width / 2, map.height / 2, false, map.params.zoomAnimate);
    });
  },

  createTip: function() {
    var map = this;

    this.tip = jvm.$('<div/>').addClass('jvectormap-tip').appendTo(jvm.$('body'));

    this.container.mousemove(function(e) {
      var left = e.pageX - 15 - map.tipWidth,
        top = e.pageY - 15 - map.tipHeight;

      if (left < 5) {
        left = e.pageX + 15;
      }
      if (top < 5) {
        top = e.pageY + 15;
      }

      map.tip.css({
        left: left,
        top: top
      });
    });
  },

  setScale: function(scale, anchorX, anchorY, isCentered, animate) {
    var viewportChangeEvent = jvm.$.Event('zoom.jvectormap'),
      interval,
      that = this,
      i = 0,
      count = Math.abs(Math.round((scale - this.scale) * 60 / Math.max(scale, this.scale))),
      scaleStart,
      scaleDiff,
      transXStart,
      transXDiff,
      transYStart,
      transYDiff,
      transX,
      transY,
      deferred = new jvm.$.Deferred();

    if (scale > this.params.zoomMax * this.baseScale) {
      scale = this.params.zoomMax * this.baseScale;
    } else if (scale < this.params.zoomMin * this.baseScale) {
      scale = this.params.zoomMin * this.baseScale;
    }

    if (typeof anchorX != 'undefined' && typeof anchorY != 'undefined') {
      zoomStep = scale / this.scale;
      if (isCentered) {
        transX = anchorX + this.defaultWidth * (this.width / (this.defaultWidth * scale)) / 2;
        transY = anchorY + this.defaultHeight * (this.height / (this.defaultHeight * scale)) / 2;
      } else {
        transX = this.transX - (zoomStep - 1) / scale * anchorX;
        transY = this.transY - (zoomStep - 1) / scale * anchorY;
      }
    }

    if (animate && count > 0) {
      scaleStart = this.scale;
      scaleDiff = (scale - scaleStart) / count;
      transXStart = this.transX * this.scale;
      transYStart = this.transY * this.scale;
      transXDiff = (transX * scale - transXStart) / count;
      transYDiff = (transY * scale - transYStart) / count;
      interval = setInterval(function() {
        i += 1;
        that.scale = scaleStart + scaleDiff * i;
        that.transX = (transXStart + transXDiff * i) / that.scale;
        that.transY = (transYStart + transYDiff * i) / that.scale;
        that.applyTransform();
        if (i == count) {
          clearInterval(interval);
          that.container.trigger(viewportChangeEvent, [scale / that.baseScale]);
          deferred.resolve();
        }
      }, 10);
    } else {
      this.transX = transX;
      this.transY = transY;
      this.scale = scale;
      this.applyTransform();
      this.container.trigger(viewportChangeEvent, [scale / this.baseScale]);
      deferred.resolve();
    }

    return deferred;
  },

  /**
   * Set the map's viewport to the specific point and set zoom of the map to the specific level. Point and zoom level could be defined in two ways: using the code of some region to focus on or a central point and zoom level as numbers.
   * @param This method takes a configuration object as the single argument. The options passed to it are the following:
   * @param {Array} params.regions Array of region codes to zoom to.
   * @param {String} params.region Region code to zoom to.
   * @param {Number} params.scale Map scale to set.
   * @param {Number} params.lat Latitude to set viewport to.
   * @param {Number} params.lng Longitude to set viewport to.
   * @param {Number} params.x Number from 0 to 1 specifying the horizontal coordinate of the central point of the viewport.
   * @param {Number} params.y Number from 0 to 1 specifying the vertical coordinate of the central point of the viewport.
   * @param {Boolean} params.animate Indicates whether or not to animate the scale change and transition.
   */
  setFocus: function(config) {
    var bbox,
      itemBbox,
      newBbox,
      codes,
      i,
      point;

    config = config || {};

    if (config.region) {
      codes = [config.region];
    } else if (config.regions) {
      codes = config.regions;
    }

    if (codes) {
      for (i = 0; i < codes.length; i++) {
        if (this.regions[codes[i]]) {
          itemBbox = this.regions[codes[i]].element.shape.getBBox();
          if (itemBbox) {
            if (typeof bbox == 'undefined') {
              bbox = itemBbox;
            } else {
              newBbox = {
                x: Math.min(bbox.x, itemBbox.x),
                y: Math.min(bbox.y, itemBbox.y),
                width: Math.max(bbox.x + bbox.width, itemBbox.x + itemBbox.width) - Math.min(bbox.x, itemBbox.x),
                height: Math.max(bbox.y + bbox.height, itemBbox.y + itemBbox.height) - Math.min(bbox.y, itemBbox.y)
              }
              bbox = newBbox;
            }
          }
        }
      }
      return this.setScale(
        Math.min(this.width / bbox.width, this.height / bbox.height), -(bbox.x + bbox.width / 2), -(bbox.y + bbox.height / 2),
        true,
        config.animate
      );
    } else {
      if (config.lat && config.lng) {
        point = this.latLngToPoint(config.lat, config.lng);
        config.x = this.transX - point.x / this.scale;
        config.y = this.transY - point.y / this.scale;
      } else if (config.x && config.y) {
        config.x *= -this.defaultWidth;
        config.y *= -this.defaultHeight;
      }
      return this.setScale(config.scale * this.baseScale, config.x, config.y, true, config.animate);
    }
  },

  getSelected: function(type) {
    var key,
      selected = [];

    for (key in this[type]) {
      if (this[type][key].element.isSelected) {
        selected.push(key);
      }
    }
    return selected;
  },

  /**
   * Return the codes of currently selected regions.
   * @returns {Array}
   */
  getSelectedRegions: function() {
    return this.getSelected('regions');
  },

  /**
   * Return the codes of currently selected markers.
   * @returns {Array}
   */
  getSelectedMarkers: function() {
    return this.getSelected('markers');
  },

  setSelected: function(type, keys) {
    var i;

    if (typeof keys != 'object') {
      keys = [keys];
    }

    if (jvm.$.isArray(keys)) {
      for (i = 0; i < keys.length; i++) {
        this[type][keys[i]].element.setSelected(true);
      }
    } else {
      for (i in keys) {
        this[type][i].element.setSelected(!!keys[i]);
      }
    }
  },

  /**
   * Set or remove selected state for the regions.
   * @param {String|Array|Object} keys If <code>String</code> or <code>Array</code> the region(s) with the corresponding code(s) will be selected. If <code>Object</code> was provided its keys are  codes of regions, state of which should be changed. Selected state will be set if value is true, removed otherwise.
   */
  setSelectedRegions: function(keys) {
    this.setSelected('regions', keys);
  },

  /**
   * Set or remove selected state for the markers.
   * @param {String|Array|Object} keys If <code>String</code> or <code>Array</code> the marker(s) with the corresponding code(s) will be selected. If <code>Object</code> was provided its keys are  codes of markers, state of which should be changed. Selected state will be set if value is true, removed otherwise.
   */
  setSelectedMarkers: function(keys) {
    this.setSelected('markers', keys);
  },

  clearSelected: function(type) {
    var select = {},
      selected = this.getSelected(type),
      i;

    for (i = 0; i < selected.length; i++) {
      select[selected[i]] = false;
    };

    this.setSelected(type, select);
  },

  /**
   * Remove the selected state from all the currently selected regions.
   */
  clearSelectedRegions: function() {
    this.clearSelected('regions');
  },

  /**
   * Remove the selected state from all the currently selected markers.
   */
  clearSelectedMarkers: function() {
    this.clearSelected('markers');
  },

  /**
   * Return the instance of Map. Useful when instantiated as a jQuery plug-in.
   * @returns {Map}
   */
  getMapObject: function() {
    return this;
  },

  /**
   * Return the name of the region by region code.
   * @returns {String}
   */
  getRegionName: function(code) {
    return this.mapData.paths[code].name;
  },

  createRegions: function() {
    var key,
      region,
      map = this;

    this.regionLabelsGroup = this.regionLabelsGroup || this.canvas.addGroup();

    for (key in this.mapData.paths) {
      region = new jvm.Region({
        map: this,
        path: this.mapData.paths[key].path,
        code: key,
        style: jvm.$.extend(true, {}, this.params.regionStyle),
        labelStyle: jvm.$.extend(true, {}, this.params.regionLabelStyle),
        canvas: this.canvas,
        labelsGroup: this.regionLabelsGroup,
        label: this.canvas.mode != 'vml' ? (this.params.labels && this.params.labels.regions) : null
      });

      jvm.$(region.shape).bind('selected', function(e, isSelected) {
        map.container.trigger('regionSelected.jvectormap', [jvm.$(this.node).attr('data-code'), isSelected, map.getSelectedRegions()]);
      });
      this.regions[key] = {
        element: region,
        config: this.mapData.paths[key]
      };
    }
  },

  createMarkers: function(markers) {
    var i,
      marker,
      point,
      markerConfig,
      markersArray,
      map = this;

    this.markersGroup = this.markersGroup || this.canvas.addGroup();
    this.markerLabelsGroup = this.markerLabelsGroup || this.canvas.addGroup();

    if (jvm.$.isArray(markers)) {
      markersArray = markers.slice();
      markers = {};
      for (i = 0; i < markersArray.length; i++) {
        markers[i] = markersArray[i];
      }
    }

    for (i in markers) {
      markerConfig = markers[i] instanceof Array ? {
        latLng: markers[i]
      } : markers[i];
      point = this.getMarkerPosition(markerConfig);

      if (point !== false) {
        marker = new jvm.Marker({
          map: this,
          style: jvm.$.extend(true, {}, this.params.markerStyle, {
            initial: markerConfig.style || {}
          }),
          labelStyle: jvm.$.extend(true, {}, this.params.markerLabelStyle),
          index: i,
          cx: point.x,
          cy: point.y,
          group: this.markersGroup,
          canvas: this.canvas,
          labelsGroup: this.markerLabelsGroup,
          label: this.canvas.mode != 'vml' ? (this.params.labels && this.params.labels.markers) : null
        });

        jvm.$(marker.shape).bind('selected', function(e, isSelected) {
          map.container.trigger('markerSelected.jvectormap', [jvm.$(this.node).attr('data-index'), isSelected, map.getSelectedMarkers()]);
        });
        if (this.markers[i]) {
          this.removeMarkers([i]);
        }
        this.markers[i] = {
          element: marker,
          config: markerConfig
        };
      }
    }
  },

  repositionMarkers: function() {
    var i,
      point;

    for (i in this.markers) {
      point = this.getMarkerPosition(this.markers[i].config);
      if (point !== false) {
        this.markers[i].element.setStyle({
          cx: point.x,
          cy: point.y
        });
      }
    }
  },

  repositionLabels: function() {
    var key;

    for (key in this.regions) {
      this.regions[key].element.updateLabelPosition();
    }

    for (key in this.markers) {
      this.markers[key].element.updateLabelPosition();
    }
  },

  getMarkerPosition: function(markerConfig) {
    if (jvm.Map.maps[this.params.map].projection) {
      return this.latLngToPoint.apply(this, markerConfig.latLng || [0, 0]);
    } else {
      return {
        x: markerConfig.coords[0] * this.scale + this.transX * this.scale,
        y: markerConfig.coords[1] * this.scale + this.transY * this.scale
      };
    }
  },

  /**
   * Add one marker to the map.
   * @param {String} key Marker unique code.
   * @param {Object} marker Marker configuration parameters.
   * @param {Array} seriesData Values to add to the data series.
   */
  addMarker: function(key, marker, seriesData) {
    var markers = {},
      data = [],
      values,
      i,
      seriesData = seriesData || [];

    markers[key] = marker;

    for (i = 0; i < seriesData.length; i++) {
      values = {};
      if (typeof seriesData[i] !== 'undefined') {
        values[key] = seriesData[i];
      }
      data.push(values);
    }
    this.addMarkers(markers, data);
  },

  /**
   * Add set of marker to the map.
   * @param {Object|Array} markers Markers to add to the map. In case of array is provided, codes of markers will be set as string representations of array indexes.
   * @param {Array} seriesData Values to add to the data series.
   */
  addMarkers: function(markers, seriesData) {
    var i;

    seriesData = seriesData || [];

    this.createMarkers(markers);
    for (i = 0; i < seriesData.length; i++) {
      this.series.markers[i].setValues(seriesData[i] || {});
    };
  },

  /**
   * Remove some markers from the map.
   * @param {Array} markers Array of marker codes to be removed.
   */
  removeMarkers: function(markers) {
    var i;

    for (i = 0; i < markers.length; i++) {
      this.markers[markers[i]].element.remove();
      delete this.markers[markers[i]];
    };
  },

  /**
   * Remove all markers from the map.
   */
  removeAllMarkers: function() {
    var i,
      markers = [];

    for (i in this.markers) {
      markers.push(i);
    }
    this.removeMarkers(markers)
  },

  /**
   * Converts coordinates expressed as latitude and longitude to the coordinates in pixels on the map.
   * @param {Number} lat Latitide of point in degrees.
   * @param {Number} lng Longitude of point in degrees.
   */
  latLngToPoint: function(lat, lng) {
    var point,
      proj = jvm.Map.maps[this.params.map].projection,
      centralMeridian = proj.centralMeridian,
      inset,
      bbox;

    if (lng < (-180 + centralMeridian)) {
      lng += 360;
    }

    point = jvm.Proj[proj.type](lat, lng, centralMeridian);

    inset = this.getInsetForPoint(point.x, point.y);
    if (inset) {
      bbox = inset.bbox;

      point.x = (point.x - bbox[0].x) / (bbox[1].x - bbox[0].x) * inset.width * this.scale;
      point.y = (point.y - bbox[0].y) / (bbox[1].y - bbox[0].y) * inset.height * this.scale;

      return {
        x: point.x + this.transX * this.scale + inset.left * this.scale,
        y: point.y + this.transY * this.scale + inset.top * this.scale
      };
    } else {
      return false;
    }
  },

  /**
   * Converts cartesian coordinates into coordinates expressed as latitude and longitude.
   * @param {Number} x X-axis of point on map in pixels.
   * @param {Number} y Y-axis of point on map in pixels.
   */
  pointToLatLng: function(x, y) {
    var proj = jvm.Map.maps[this.params.map].projection,
      centralMeridian = proj.centralMeridian,
      insets = jvm.Map.maps[this.params.map].insets,
      i,
      inset,
      bbox,
      nx,
      ny;

    for (i = 0; i < insets.length; i++) {
      inset = insets[i];
      bbox = inset.bbox;

      nx = x - (this.transX * this.scale + inset.left * this.scale);
      ny = y - (this.transY * this.scale + inset.top * this.scale);

      nx = (nx / (inset.width * this.scale)) * (bbox[1].x - bbox[0].x) + bbox[0].x;
      ny = (ny / (inset.height * this.scale)) * (bbox[1].y - bbox[0].y) + bbox[0].y;

      if (nx > bbox[0].x && nx < bbox[1].x && ny > bbox[0].y && ny < bbox[1].y) {
        return jvm.Proj[proj.type + '_inv'](nx, -ny, centralMeridian);
      }
    }

    return false;
  },

  getInsetForPoint: function(x, y) {
    var insets = jvm.Map.maps[this.params.map].insets,
      i,
      bbox;

    for (i = 0; i < insets.length; i++) {
      bbox = insets[i].bbox;
      if (x > bbox[0].x && x < bbox[1].x && y > bbox[0].y && y < bbox[1].y) {
        return insets[i];
      }
    }
  },

  createSeries: function() {
    var i,
      key;

    this.series = {
      markers: [],
      regions: []
    };

    for (key in this.params.series) {
      for (i = 0; i < this.params.series[key].length; i++) {
        this.series[key][i] = new jvm.DataSeries(
          this.params.series[key][i],
          this[key],
          this
        );
      }
    }
  },

  /**
   * Gracefully remove the map and and all its accessories, unbind event handlers.
   */
  remove: function() {
    this.tip.remove();
    this.container.remove();
    jvm.$(window).unbind('resize', this.onResize);
    jvm.$('body').unbind('mouseup', this.onContainerMouseUp);
  }
};

jvm.Map.maps = {};
jvm.Map.defaultParams = {
  map: 'world_mill_en',
  backgroundColor: '#505050',
  zoomButtons: true,
  zoomOnScroll: true,
  zoomOnScrollSpeed: 3,
  panOnDrag: true,
  zoomMax: 8,
  zoomMin: 1,
  zoomStep: 1.6,
  zoomAnimate: true,
  regionsSelectable: false,
  markersSelectable: false,
  bindTouchEvents: true,
  regionStyle: {
    initial: {
      fill: 'white',
      "fill-opacity": 1,
      stroke: 'none',
      "stroke-width": 0,
      "stroke-opacity": 1
    },
    hover: {
      "fill-opacity": 0.8,
      cursor: 'pointer'
    },
    selected: {
      fill: 'yellow'
    },
    selectedHover: {}
  },
  regionLabelStyle: {
    initial: {
      'font-family': 'Verdana',
      'font-size': '12',
      'font-weight': 'bold',
      cursor: 'default',
      fill: 'black'
    },
    hover: {
      cursor: 'pointer'
    }
  },
  markerStyle: {
    initial: {
      fill: 'grey',
      stroke: '#505050',
      "fill-opacity": 1,
      "stroke-width": 1,
      "stroke-opacity": 1,
      r: 5
    },
    hover: {
      stroke: 'black',
      "stroke-width": 2,
      cursor: 'pointer'
    },
    selected: {
      fill: 'blue'
    },
    selectedHover: {}
  },
  markerLabelStyle: {
    initial: {
      'font-family': 'Verdana',
      'font-size': '12',
      'font-weight': 'bold',
      cursor: 'default',
      fill: 'black'
    },
    hover: {
      cursor: 'pointer'
    }
  }
};
jvm.Map.apiEvents = {
  onRegionTipShow: 'regionTipShow',
  onRegionOver: 'regionOver',
  onRegionOut: 'regionOut',
  onRegionClick: 'regionClick',
  onRegionSelected: 'regionSelected',
  onMarkerTipShow: 'markerTipShow',
  onMarkerOver: 'markerOver',
  onMarkerOut: 'markerOut',
  onMarkerClick: 'markerClick',
  onMarkerSelected: 'markerSelected',
  onViewportChange: 'viewportChange'
};
/**
 * Creates map with drill-down functionality.
 * @constructor
 * @param {Object} params Parameters to initialize map with.
 * @param {Number} params.maxLevel Maximum number of levels user can go through
 * @param {Object} params.main Config of the main map. See <a href="./jvm-map/">jvm.Map</a> for more information.
 * @param {Function} params.mapNameByCode Function go generate map name by region code. Default value is:
<pre>
function(code, multiMap) {
  return code.toLowerCase()+'_'+
         multiMap.defaultProjection+'_en';
}
</pre>
 * @param {Function} params.mapUrlByCode Function to generate map url by region code. Default value is:
<pre>
function(code, multiMap){
  return 'jquery-jvectormap-data-'+
         code.toLowerCase()+'-'+
         multiMap.defaultProjection+'-en.js';
}
</pre>
 */
jvm.MultiMap = function(params) {
  var that = this;

  this.maps = {};
  this.params = jvm.$.extend(true, {}, jvm.MultiMap.defaultParams, params);
  this.params.maxLevel = this.params.maxLevel || Number.MAX_VALUE;
  this.params.main = this.params.main || {};
  this.params.main.multiMapLevel = 0;
  this.history = [this.addMap(this.params.main.map, this.params.main)];
  this.defaultProjection = this.history[0].mapData.projection.type;
  this.mapsLoaded = {};

  this.params.container.css({
    position: 'relative'
  });
  this.backButton = jvm.$('<div/>').addClass('jvectormap-goback').text('Back').appendTo(this.params.container);
  this.backButton.hide();
  this.backButton.click(function() {
    that.goBack();
  });

  this.spinner = jvm.$('<div/>').addClass('jvectormap-spinner').appendTo(this.params.container);
  this.spinner.hide();
};

jvm.MultiMap.prototype = {
  addMap: function(name, config) {
    var cnt = jvm.$('<div/>').css({
      width: '100%',
      height: '100%'
    });

    this.params.container.append(cnt);

    this.maps[name] = new jvm.Map(jvm.$.extend(config, {
      container: cnt
    }));
    if (this.params.maxLevel > config.multiMapLevel) {
      this.maps[name].container.on('regionClick.jvectormap', {
        scope: this
      }, function(e, code) {
        var multimap = e.data.scope,
          mapName = multimap.params.mapNameByCode(code, multimap);

        if (!multimap.drillDownPromise || multimap.drillDownPromise.state() !== 'pending') {
          multimap.drillDown(mapName, code);
        }
      });
    }


    return this.maps[name];
  },

  downloadMap: function(code) {
    var that = this,
      deferred = jvm.$.Deferred();

    if (!this.mapsLoaded[code]) {
      jvm.$.get(this.params.mapUrlByCode(code, this)).then(function() {
        that.mapsLoaded[code] = true;
        deferred.resolve();
      }, function() {
        deferred.reject();
      });
    } else {
      deferred.resolve();
    }
    return deferred;
  },

  drillDown: function(name, code) {
    var currentMap = this.history[this.history.length - 1],
      that = this,
      focusPromise = currentMap.setFocus({
        region: code,
        animate: true
      }),
      downloadPromise = this.downloadMap(code);

    focusPromise.then(function() {
      if (downloadPromise.state() === 'pending') {
        that.spinner.show();
      }
    });
    downloadPromise.always(function() {
      that.spinner.hide();
    });
    this.drillDownPromise = jvm.$.when(downloadPromise, focusPromise);
    this.drillDownPromise.then(function() {
      currentMap.params.container.hide();
      if (!that.maps[name]) {
        that.addMap(name, {
          map: name,
          multiMapLevel: currentMap.params.multiMapLevel + 1
        });
      } else {
        that.maps[name].params.container.show();
      }
      that.history.push(that.maps[name]);
      that.backButton.show();
    });
  },

  goBack: function() {
    var currentMap = this.history.pop(),
      prevMap = this.history[this.history.length - 1],
      that = this;

    currentMap.setFocus({
      scale: 1,
      x: 0.5,
      y: 0.5,
      animate: true
    }).then(function() {
      currentMap.params.container.hide();
      prevMap.params.container.show();
      prevMap.updateSize();
      if (that.history.length === 1) {
        that.backButton.hide();
      }
      prevMap.setFocus({
        scale: 1,
        x: 0.5,
        y: 0.5,
        animate: true
      });
    });
  }
};

jvm.MultiMap.defaultParams = {
  mapNameByCode: function(code, multiMap) {
    return code.toLowerCase() + '_' + multiMap.defaultProjection + '_en';
  },
  mapUrlByCode: function(code, multiMap) {
    return 'jquery-jvectormap-data-' + code.toLowerCase() + '-' + multiMap.defaultProjection + '-en.js';
  }
}

jQuery.fn.vectorMap('addMap', 'world_mill_en',{"insets": [{"width": 900, "top": 0, "height": 440.70631074413296, "bbox": [{"y": -12671671.123330014, "x": -20004297.151525836}, {"y": 6930392.02513512, "x": 20026572.39474939}], "left": 0}], "paths": {"BD": {"path": "M651.84,230.21l-0.6,-2.0l-1.36,-1.71l-2.31,-0.11l-0.41,0.48l0.2,0.94l-0.53,0.99l-0.72,-0.36l-0.68,0.35l-1.2,-0.36l-0.37,-2.0l-0.81,-1.86l0.39,-1.46l-0.22,-0.47l-1.14,-0.53l0.29,-0.5l1.48,-0.94l0.03,-0.65l-1.55,-1.22l0.55,-1.14l1.61,0.94l1.04,0.15l0.18,1.54l0.34,0.35l5.64,0.63l-0.84,1.64l-1.22,0.34l-0.77,1.51l0.07,0.47l1.37,1.37l0.67,-0.19l0.42,-1.39l1.21,3.84l-0.03,1.21l-0.33,-0.15l-0.4,0.28Z", "name": "Bangladesh"}, "BE": {"path": "M429.29,144.05l1.91,0.24l2.1,-0.63l2.63,1.99l-0.21,1.66l-0.69,0.4l-0.18,1.2l-1.66,-1.13l-1.39,0.15l-2.73,-2.7l-1.17,-0.18l-0.16,-0.52l1.54,-0.5Z", "name": "Belgium"}, "BF": {"path": "M421.42,247.64l-0.11,0.95l0.34,1.16l1.4,1.71l0.07,1.1l0.32,0.37l2.55,0.51l-0.04,1.28l-0.38,0.53l-1.07,0.21l-0.72,1.18l-0.63,0.21l-3.22,-0.25l-0.94,0.39l-5.4,-0.05l-0.39,0.38l0.16,2.73l-1.23,-0.43l-1.17,0.1l-0.89,0.57l-2.27,-1.72l-0.13,-1.11l0.61,-0.96l0.02,-0.93l1.87,-1.98l0.44,-1.81l0.43,-0.39l1.28,0.26l1.05,-0.52l0.47,-0.73l1.84,-1.09l0.55,-0.83l2.2,-1.0l1.15,-0.3l0.72,0.45l1.13,-0.01Z", "name": "Burkina Faso"}, "BG": {"path": "M491.65,168.18l-0.86,0.88l-0.91,2.17l0.48,1.34l-1.6,-0.24l-2.55,0.95l-0.28,1.51l-1.8,0.22l-2.0,-1.0l-1.92,0.79l-1.42,-0.07l-0.15,-1.63l-1.05,-0.97l0.0,-0.8l1.2,-1.57l0.01,-0.56l-1.14,-1.23l-0.05,-0.94l0.88,0.97l0.88,-0.2l1.91,0.47l3.68,0.16l1.42,-0.81l2.72,-0.66l2.55,1.24Z", "name": "Bulgaria"}, "BA": {"path": "M463.49,163.65l2.1,0.5l1.72,-0.03l1.52,0.68l-0.36,0.78l0.08,0.45l1.04,1.02l-0.25,0.98l-1.81,1.15l-0.38,1.38l-1.67,-0.87l-0.89,-1.2l-2.11,-1.83l-1.63,-2.22l0.23,-0.57l0.48,0.38l0.55,-0.06l0.43,-0.51l0.94,-0.06Z", "name": "Bosnia and Herz."}, "BN": {"path": "M707.48,273.58l0.68,-0.65l1.41,-0.91l-0.15,1.63l-0.81,-0.05l-0.61,0.58l-0.53,-0.6Z", "name": "Brunei"}, "BO": {"path": "M263.83,340.69l-3.09,-0.23l-0.38,0.23l-0.7,1.52l-1.31,-1.53l-3.28,-0.64l-2.37,2.4l-1.31,0.26l-0.88,-3.26l-1.3,-2.86l0.74,-2.37l-0.13,-0.43l-1.2,-1.01l-0.37,-1.89l-1.08,-1.55l1.45,-2.56l-0.96,-2.33l0.47,-1.06l-0.34,-0.73l0.91,-1.32l0.16,-3.84l0.5,-1.18l-1.81,-3.41l2.46,0.07l0.8,-0.85l3.4,-1.91l2.66,-0.35l-0.19,1.38l0.3,1.07l-0.05,1.97l2.72,2.27l2.88,0.49l0.89,0.86l1.79,0.58l0.98,0.7l1.71,0.05l1.17,0.61l0.6,2.7l-0.7,0.54l0.96,2.99l0.37,0.28l4.3,0.1l-0.25,1.2l0.27,1.02l1.43,0.9l0.5,1.35l-0.41,1.86l-0.65,1.08l0.12,1.35l-2.69,-1.65l-2.4,-0.03l-4.36,0.76l-1.49,2.5l-0.11,1.52l-0.75,2.37Z", "name": "Bolivia"}, "JP": {"path": "M781.12,166.87l1.81,0.68l1.62,-0.97l0.39,2.42l-3.35,0.75l-2.23,2.88l-3.63,-1.9l-0.56,0.2l-1.26,3.05l-2.16,0.03l-0.29,-2.51l1.08,-2.03l2.45,-0.16l0.37,-0.33l1.25,-5.94l2.47,2.71l2.03,1.12ZM773.56,187.34l-0.91,2.22l0.37,1.52l-1.14,1.75l-3.02,1.26l-4.58,0.27l-3.34,3.01l-1.25,-0.8l-0.09,-1.9l-0.46,-0.38l-4.35,0.62l-3.0,1.32l-2.85,0.05l-0.37,0.27l0.13,0.44l2.32,1.89l-1.54,4.34l-1.26,0.9l-0.79,-0.7l0.56,-2.27l-0.21,-0.45l-1.47,-0.75l-0.74,-1.4l2.12,-0.84l1.26,-1.7l2.45,-1.42l1.83,-1.91l4.78,-0.81l2.6,0.57l0.44,-0.21l2.39,-4.66l1.29,1.06l0.5,0.01l5.1,-4.02l1.69,-3.73l-0.38,-3.4l0.9,-1.61l2.14,-0.44l1.23,3.72l-0.07,2.18l-2.23,2.84l-0.04,3.16ZM757.78,196.26l0.19,0.56l-1.01,1.21l-1.16,-0.68l-1.28,0.65l-0.69,1.45l-1.02,-0.5l0.01,-0.93l1.14,-1.38l1.57,0.14l0.85,-0.98l1.4,0.46Z", "name": "Japan"}, "BI": {"path": "M495.45,295.49l-1.08,-2.99l1.14,-0.11l0.64,-1.19l0.76,0.09l0.65,1.83l-2.1,2.36Z", "name": "Burundi"}, "BJ": {"path": "M429.57,255.75l-0.05,0.8l0.5,1.34l-0.42,0.86l0.17,0.79l-1.81,2.12l-0.57,1.76l-0.08,5.42l-1.41,0.2l-0.48,-1.36l0.11,-5.71l-0.52,-0.7l-0.2,-1.35l-1.48,-1.48l0.21,-0.9l0.89,-0.43l0.42,-0.92l1.27,-0.36l1.22,-1.34l0.61,-0.0l1.62,1.24Z", "name": "Benin"}, "BT": {"path": "M650.32,213.86l0.84,0.71l-0.12,1.1l-3.76,-0.11l-1.57,0.4l-1.93,-0.87l1.48,-1.96l1.13,-0.57l1.63,0.57l1.33,0.08l0.99,0.65Z", "name": "Bhutan"}, "JM": {"path": "M228.38,239.28l-0.8,0.4l-2.26,-1.06l0.84,-0.23l2.14,0.3l1.17,0.56l-1.08,0.03Z", "name": "Jamaica"}, "BW": {"path": "M483.92,330.07l2.27,4.01l2.83,2.86l0.96,0.31l0.78,2.43l2.13,0.61l1.02,0.76l-3.0,1.64l-2.32,2.02l-1.54,2.69l-1.52,0.45l-0.64,1.94l-1.34,0.52l-1.85,-0.12l-1.21,-0.74l-1.35,-0.3l-1.22,0.62l-0.75,1.37l-2.31,1.9l-1.4,0.21l-0.35,-0.59l0.16,-1.75l-1.48,-2.54l-0.62,-0.43l-0.0,-7.1l2.08,-0.08l0.39,-0.4l0.07,-8.9l5.19,-0.93l0.8,0.89l0.51,0.07l1.5,-0.95l2.21,-0.49Z", "name": "Botswana"}, "BR": {"path": "M259.98,275.05l3.24,0.7l0.65,-0.53l4.55,-1.32l1.08,-1.06l-0.02,-0.63l0.55,-0.05l0.28,0.28l-0.26,0.87l0.22,0.48l0.73,0.32l0.4,0.81l-0.62,0.86l-0.4,2.13l0.82,2.56l1.69,1.43l1.43,0.2l3.17,-1.68l3.18,0.3l0.65,-0.75l-0.27,-0.92l1.9,-0.09l2.39,0.99l1.06,-0.61l0.84,0.78l1.2,-0.18l1.18,-1.06l0.84,-1.94l1.36,-2.11l0.37,-0.05l1.89,5.45l1.33,0.59l0.05,1.28l-1.77,1.94l0.02,0.56l1.02,0.87l4.07,0.36l0.08,2.16l0.66,0.29l1.74,-1.5l6.97,2.32l1.02,1.22l-0.35,1.18l0.49,0.5l2.81,-0.74l4.77,1.3l3.75,-0.08l3.57,2.0l3.29,2.86l1.93,0.72l2.12,0.12l0.71,0.62l1.21,4.51l-0.95,3.98l-4.72,5.06l-1.64,2.92l-1.72,2.05l-0.8,0.3l-0.72,2.03l0.18,4.75l-0.94,5.53l-0.81,1.13l-0.43,3.36l-2.55,3.5l-0.4,2.51l-1.86,1.04l-0.67,1.53l-2.54,0.01l-3.94,1.01l-1.83,1.2l-2.87,0.82l-3.03,2.19l-2.2,2.83l-0.36,2.0l0.4,1.58l-0.44,2.6l-0.51,1.2l-1.77,1.54l-2.75,4.78l-3.83,3.42l-1.24,2.74l-1.18,1.15l-0.36,-0.83l0.95,-1.14l0.01,-0.5l-1.52,-1.97l-4.56,-3.32l-1.03,-0.0l-2.38,-2.02l-0.81,-0.0l5.34,-5.45l3.77,-2.58l0.22,-2.46l-1.35,-1.81l-0.91,0.07l0.58,-2.33l0.01,-1.54l-1.11,-0.83l-1.75,0.3l-0.44,-3.11l-0.52,-0.95l-1.88,-0.88l-1.24,0.47l-2.17,-0.41l0.15,-3.21l-0.62,-1.34l0.66,-0.73l-0.22,-1.34l0.66,-1.13l0.44,-2.04l-0.61,-1.83l-1.4,-0.86l-0.2,-0.75l0.34,-1.39l-0.38,-0.5l-4.52,-0.1l-0.72,-2.22l0.59,-0.42l-0.03,-1.1l-0.5,-0.87l-0.32,-1.7l-1.45,-0.76l-1.63,-0.02l-1.05,-0.72l-1.6,-0.48l-1.13,-0.99l-2.69,-0.4l-2.47,-2.06l0.13,-4.35l-0.45,-0.45l-3.46,0.5l-3.44,1.94l-0.6,0.74l-2.9,-0.17l-1.47,0.42l-0.72,-0.18l0.15,-3.52l-0.63,-0.34l-1.94,1.41l-1.87,-0.06l-0.83,-1.18l-1.37,-0.26l0.21,-1.01l-1.35,-1.49l-0.88,-1.91l0.56,-0.6l-0.0,-0.81l1.29,-0.62l0.22,-0.43l-0.22,-1.19l0.61,-0.91l0.15,-0.99l2.65,-1.58l1.99,-0.47l0.42,-0.36l2.06,0.11l0.42,-0.33l1.19,-8.0l-0.41,-1.56l-1.1,-1.0l0.01,-1.33l1.91,-0.42l0.08,-0.96l-0.33,-0.43l-1.14,-0.2l-0.02,-0.83l4.47,0.05l0.82,-0.67l0.82,1.81l0.8,0.07l1.15,1.1l2.26,-0.05l0.71,-0.83l2.78,-0.96l0.48,-1.13l1.6,-0.64l0.24,-0.47l-0.48,-0.82l-1.83,-0.19l-0.36,-3.22Z", "name": "Brazil"}, "BS": {"path": "M226.4,223.87l-0.48,-1.15l-0.84,-0.75l0.36,-1.11l0.95,1.95l0.01,1.06ZM225.56,216.43l-1.87,0.29l-0.04,-0.22l0.74,-0.14l1.17,0.06Z", "name": "Bahamas"}, "BY": {"path": "M493.84,128.32l0.29,0.7l0.49,0.23l1.19,-0.38l2.09,0.72l0.19,1.26l-0.45,1.24l1.57,2.26l0.89,0.59l0.17,0.81l1.58,0.56l0.4,0.5l-0.53,0.41l-1.87,-0.11l-0.73,0.38l-0.13,0.52l1.04,2.74l-1.91,0.26l-0.89,0.99l-0.11,1.18l-2.73,-0.04l-0.53,-0.62l-0.52,-0.08l-0.75,0.46l-0.91,-0.42l-1.92,-0.07l-2.75,-0.79l-2.6,-0.28l-2.0,0.07l-1.5,0.92l-0.67,0.07l-0.08,-1.22l-0.59,-1.19l1.36,-0.88l0.01,-1.35l-0.7,-1.41l-0.07,-1.0l2.16,-0.02l2.72,-1.3l0.75,-2.04l1.91,-1.04l0.2,-0.41l-0.19,-1.25l3.8,-1.78l2.3,0.77Z", "name": "Belarus"}, "BZ": {"path": "M198.03,244.38l0.1,-4.49l0.69,-0.06l0.74,-1.3l0.34,0.28l-0.4,1.3l0.17,0.58l-0.34,2.25l-1.3,1.42Z", "name": "Belize"}, "RU": {"path": "M491.55,115.25l2.55,-1.85l-0.01,-0.65l-2.2,-1.5l7.32,-6.76l1.03,-2.11l-0.13,-0.49l-3.46,-2.52l0.86,-2.7l-2.11,-2.81l1.56,-3.67l-2.77,-4.52l2.15,-2.99l-0.08,-0.55l-3.65,-2.73l0.3,-2.54l1.81,-0.37l4.26,-1.77l2.42,-1.45l4.06,2.61l6.79,1.04l9.34,4.85l1.78,1.88l0.14,2.46l-2.55,2.02l-3.9,1.06l-11.07,-3.14l-2.06,0.53l-0.13,0.7l3.94,2.94l0.31,5.86l0.26,0.36l5.14,2.24l0.58,-0.29l0.32,-1.94l-1.35,-1.78l1.13,-1.09l6.13,2.42l2.11,-0.98l0.18,-0.56l-1.51,-2.67l5.41,-3.76l2.07,0.22l2.26,1.41l0.57,-0.16l1.46,-2.87l-0.05,-0.44l-1.92,-2.32l1.12,-2.32l-1.32,-2.27l5.87,1.16l1.04,1.75l-2.59,0.43l-0.33,0.4l0.02,2.36l2.46,1.83l3.87,-0.91l0.86,-2.8l13.69,-5.65l0.99,0.11l-1.92,2.06l0.23,0.67l3.11,0.45l2.0,-1.48l4.56,-0.12l3.64,-1.73l2.65,2.44l0.56,-0.01l2.85,-2.88l-0.01,-0.57l-2.35,-2.29l0.9,-1.01l7.14,1.3l3.41,1.36l9.05,4.97l0.51,-0.11l1.67,-2.27l-0.05,-0.53l-2.43,-2.21l-0.06,-0.78l-0.34,-0.36l-2.52,-0.36l0.64,-1.93l-1.32,-3.46l-0.06,-1.21l4.48,-4.06l1.69,-4.29l1.6,-0.81l6.23,1.18l0.44,2.21l-2.29,3.64l0.06,0.5l1.47,1.39l0.76,3.0l-0.56,6.03l2.69,2.82l-0.96,2.57l-4.86,5.95l0.23,0.64l2.86,0.61l0.42,-0.17l0.93,-1.4l2.64,-1.03l0.87,-2.24l2.09,-1.96l0.07,-0.5l-1.36,-2.28l1.09,-2.69l-0.32,-0.55l-2.47,-0.33l-0.5,-2.06l1.94,-4.38l-0.06,-0.42l-2.96,-3.4l4.12,-2.88l0.16,-0.4l-0.51,-2.93l0.54,-0.05l1.13,2.25l-0.96,4.35l0.27,0.47l2.68,0.84l0.5,-0.51l-1.02,-2.99l3.79,-1.66l5.01,-0.24l4.53,2.61l0.48,-0.06l0.07,-0.48l-2.18,-3.82l-0.23,-4.67l3.98,-0.9l5.97,0.21l5.49,-0.64l0.27,-0.65l-1.83,-2.31l2.56,-2.9l2.87,-0.17l4.8,-2.47l6.54,-0.67l1.03,-1.42l6.25,-0.45l2.32,1.11l5.53,-2.7l4.5,0.08l0.39,-0.28l0.66,-2.15l2.26,-2.12l5.69,-2.11l3.21,1.29l-2.46,0.94l-0.25,0.42l0.34,0.35l5.41,0.77l0.61,2.33l0.58,0.25l2.2,-1.22l7.13,0.07l5.51,2.47l1.79,1.72l-0.53,2.24l-9.16,4.15l-1.97,1.52l0.16,0.71l6.77,1.91l2.16,-0.78l1.13,2.74l0.67,0.11l1.01,-1.15l3.81,-0.73l7.7,0.77l0.54,1.99l0.36,0.29l10.47,0.71l0.43,-0.38l0.13,-3.23l4.87,0.78l3.95,-0.02l3.83,2.4l1.03,2.71l-1.35,1.79l0.02,0.5l3.15,3.64l4.07,1.96l0.53,-0.18l2.23,-4.47l3.95,1.93l4.16,-1.21l4.73,1.39l2.05,-1.26l3.94,0.62l0.43,-0.55l-1.68,-4.02l2.89,-1.8l22.31,3.03l2.16,2.75l6.55,3.51l10.29,-0.81l4.82,0.73l1.85,1.66l-0.29,3.08l0.25,0.41l3.08,1.26l3.56,-0.88l4.35,-0.11l4.8,0.87l4.57,-0.47l4.23,3.79l0.43,0.07l3.1,-1.4l0.16,-0.6l-1.88,-2.62l0.85,-1.52l7.71,1.21l5.22,-0.26l7.09,2.09l9.59,5.22l6.35,4.11l-0.2,2.38l1.88,1.41l0.6,-0.42l-0.48,-2.53l6.15,0.57l4.4,3.51l-1.97,1.43l-4.0,0.41l-0.36,0.39l-0.06,3.79l-0.74,0.62l-2.07,-0.11l-1.91,-1.39l-3.14,-1.11l-0.78,-1.85l-2.72,-0.68l-2.63,0.49l-1.04,-1.1l0.46,-1.31l-0.5,-0.51l-3.0,0.98l-0.22,0.58l0.99,1.7l-1.21,1.48l-3.04,1.68l-3.12,-0.28l-0.4,0.23l0.09,0.46l2.2,2.09l1.46,3.2l1.15,1.1l0.24,1.33l-0.42,0.67l-4.63,-0.77l-6.96,2.9l-2.19,0.44l-7.6,5.06l-0.84,1.45l-3.61,-2.37l-6.24,2.82l-0.94,-1.15l-0.53,-0.08l-2.28,1.52l-3.2,-0.49l-0.44,0.27l-0.78,2.37l-3.05,3.78l0.09,1.47l0.29,0.36l2.54,0.72l-0.29,4.53l-1.97,0.11l-0.35,0.26l-1.07,2.94l0.8,1.45l-3.91,1.58l-1.05,3.95l-3.48,0.77l-0.3,0.3l-0.72,3.29l-3.09,2.65l-0.7,-1.74l-2.44,-12.44l1.16,-4.71l2.04,-2.06l0.22,-1.64l3.8,-0.86l4.46,-4.61l4.28,-3.81l4.48,-3.01l2.17,-5.63l-0.42,-0.54l-3.04,0.33l-1.77,3.31l-5.86,3.86l-1.86,-4.25l-0.45,-0.23l-6.46,1.3l-6.47,6.44l-0.01,0.55l1.58,1.74l-8.24,1.17l0.15,-2.2l-0.34,-0.42l-3.89,-0.56l-3.25,1.81l-7.62,-0.62l-8.45,1.19l-17.71,15.41l0.22,0.7l3.74,0.41l1.36,2.17l2.43,0.76l1.88,-1.68l2.4,0.2l3.4,3.54l0.08,2.6l-1.95,3.42l-0.21,3.9l-1.1,5.06l-3.71,4.54l-0.87,2.21l-8.29,8.89l-3.19,1.7l-1.32,0.03l-1.45,-1.36l-0.49,-0.04l-2.27,1.5l0.41,-3.65l-0.59,-2.47l1.75,-0.89l2.91,0.53l0.42,-0.2l1.68,-3.03l0.87,-3.46l0.97,-1.18l1.32,-2.88l-0.45,-0.56l-4.14,0.95l-2.19,1.25l-3.41,-0.0l-1.06,-2.93l-2.97,-2.3l-4.28,-1.06l-1.75,-5.07l-2.66,-5.01l-2.29,-1.29l-3.75,-1.01l-3.44,0.08l-3.18,0.62l-2.24,1.77l0.05,0.66l1.18,0.69l0.02,1.43l-1.33,1.05l-2.26,3.51l-0.04,1.43l-3.16,1.84l-2.82,-1.16l-3.01,0.23l-1.35,-1.07l-1.5,-0.35l-3.9,2.31l-3.22,0.52l-2.27,0.79l-3.05,-0.51l-2.21,0.03l-1.48,-1.6l-2.6,-1.63l-2.63,-0.43l-5.46,1.01l-3.23,-1.25l-0.72,-2.57l-5.2,-1.24l-2.75,-1.36l-0.5,0.12l-2.59,3.45l0.84,2.1l-2.06,1.93l-3.41,-0.77l-2.42,-0.12l-1.83,-1.54l-2.53,-0.05l-2.42,-0.98l-3.86,1.57l-4.72,2.78l-3.3,0.75l-1.55,-1.92l-3.0,0.41l-1.11,-1.33l-1.62,-0.59l-1.31,-1.94l-1.38,-0.6l-3.7,0.79l-3.31,-1.83l-0.51,0.11l-0.99,1.29l-5.29,-8.05l-2.96,-2.48l0.65,-0.77l0.01,-0.51l-0.5,-0.11l-6.2,3.21l-1.84,0.15l0.15,-1.39l-0.26,-0.42l-3.22,-1.17l-2.46,0.7l-0.69,-3.16l-0.32,-0.31l-4.5,-0.75l-2.47,1.47l-6.19,1.27l-1.29,0.86l-9.51,1.3l-1.15,1.17l-0.03,0.53l1.47,1.9l-1.89,0.69l-0.22,0.56l0.31,0.6l-2.11,1.44l0.03,0.68l3.75,2.12l-0.39,0.98l-3.23,-0.13l-0.86,0.86l-3.09,-1.59l-3.97,0.07l-2.66,1.35l-8.32,-3.56l-4.07,0.06l-5.39,3.68l-0.39,2.0l-2.03,-1.5l-0.59,0.13l-2.0,3.59l0.57,0.93l-1.28,2.16l0.06,0.48l2.13,2.17l1.95,0.04l1.37,1.82l-0.23,1.46l0.25,0.43l0.83,0.33l-0.8,1.31l-2.49,0.62l-2.49,3.2l0.0,0.49l2.17,2.78l-0.15,2.18l2.5,3.24l-1.58,1.59l-0.7,-0.13l-1.63,-1.72l-2.29,-0.84l-0.94,-1.31l-2.34,-0.63l-1.48,0.4l-0.43,-0.47l-3.51,-1.48l-5.76,-1.01l-0.45,0.19l-2.89,-2.34l-2.9,-1.2l-1.53,-1.29l1.29,-0.43l2.08,-2.61l-0.05,-0.55l-0.89,-0.79l3.05,-1.06l0.27,-0.42l-0.07,-0.69l-0.49,-0.35l-1.73,0.39l0.04,-0.68l1.04,-0.72l2.66,-0.48l0.4,-1.32l-0.5,-1.6l0.92,-1.54l0.03,-1.17l-0.29,-0.37l-3.69,-1.06l-1.41,0.02l-1.42,-1.41l-2.19,0.38l-2.77,-1.01l-0.03,-0.59l-0.89,-1.43l-2.0,-0.32l-0.11,-0.54l0.49,-0.53l0.01,-0.53l-1.6,-1.9l-3.58,0.02l-0.88,0.73l-0.46,-0.07l-1.0,-2.79l2.22,-0.02l0.97,-0.74l0.07,-0.57l-0.9,-1.04l-1.35,-0.48l-0.11,-0.7l-0.95,-0.58l-1.38,-1.99l0.46,-0.98l-0.51,-1.96l-2.45,-0.84l-1.21,0.3l-0.46,-0.76l-2.46,-0.83l-0.72,-1.87l-0.21,-1.69l-0.99,-0.85l0.85,-1.17l-0.7,-3.21l1.66,-1.97l-0.16,-0.79ZM749.2,170.72l-0.6,0.4l-0.13,0.16l-0.01,-0.51l0.74,-0.05ZM874.85,67.94l-5.63,0.48l-0.26,-0.84l3.15,-1.89l1.94,0.01l3.19,1.16l-2.39,1.09ZM797.39,48.49l-2.0,1.36l-3.8,-0.42l-4.25,-1.8l0.35,-0.97l9.69,1.83ZM783.67,46.12l-1.63,3.09l-8.98,-0.13l-4.09,1.14l-4.54,-2.97l1.16,-3.01l3.05,-0.89l6.5,0.22l8.54,2.56ZM778.2,134.98l-0.56,-0.9l0.27,-0.12l0.29,1.01ZM778.34,135.48l0.94,3.53l-0.05,3.38l1.05,3.39l2.18,5.0l-2.89,-0.83l-0.49,0.26l-1.54,4.65l2.42,3.5l-0.04,1.13l-1.24,-1.24l-0.61,0.06l-1.09,1.61l-0.28,-1.61l0.27,-3.1l-0.28,-3.4l0.58,-2.47l0.11,-4.39l-1.46,-3.36l0.21,-4.32l2.15,-1.46l0.07,-0.34ZM771.95,56.61l1.76,-1.42l2.89,-0.42l3.28,1.71l0.14,0.6l-3.27,0.03l-4.81,-0.5ZM683.76,31.09l-13.01,1.93l4.03,-6.35l1.82,-0.56l1.73,0.34l5.99,2.98l-0.56,1.66ZM670.85,27.93l-5.08,0.64l-6.86,-1.57l-3.99,-2.05l-2.1,-4.16l-2.6,-0.87l5.72,-3.5l5.2,-1.28l4.69,2.85l5.59,5.4l-0.56,4.53ZM564.15,68.94l-0.64,0.17l-7.85,-0.57l-0.86,-2.04l-4.28,-1.17l-0.28,-1.94l2.27,-0.89l0.25,-0.39l-0.08,-2.38l4.81,-3.97l-0.15,-0.7l-1.47,-0.38l5.3,-3.81l0.15,-0.44l-0.58,-1.94l5.28,-2.51l8.21,-3.27l8.28,-0.96l4.35,-1.94l4.6,-0.64l1.36,1.61l-1.34,1.28l-16.43,4.94l-7.97,4.88l-7.74,9.63l0.66,4.14l4.16,3.27ZM548.81,18.48l-5.5,1.18l-0.58,1.02l-2.59,0.84l-2.13,-1.07l1.12,-1.42l-0.3,-0.65l-2.33,-0.07l1.68,-0.36l3.47,-0.06l0.42,1.29l0.66,0.16l1.38,-1.34l2.15,-0.88l2.94,1.01l-0.39,0.36ZM477.37,133.15l-4.08,0.05l-2.56,-0.32l0.33,-0.87l3.17,-1.03l3.24,0.96l-0.09,1.23Z", "name": "Russia"}, "RW": {"path": "M497.0,288.25l0.71,1.01l-0.11,1.09l-1.63,0.03l-1.04,1.39l-0.83,-0.11l0.51,-1.2l0.08,-1.34l0.42,-0.41l0.7,0.14l1.19,-0.61Z", "name": "Rwanda"}, "RS": {"path": "M469.4,163.99l0.42,-0.5l-0.01,-0.52l-1.15,-1.63l1.43,-0.62l1.33,0.12l1.17,1.06l0.46,1.13l1.34,0.64l0.35,1.35l1.46,0.9l0.76,-0.29l0.2,0.69l-0.48,0.78l0.22,1.12l1.05,1.22l-0.77,0.8l-0.37,1.52l-1.21,0.08l0.24,-0.64l-0.39,-0.54l-2.08,-1.64l-0.9,0.05l-0.48,0.94l-2.12,-1.37l0.53,-1.6l-1.11,-1.37l0.51,-1.1l-0.41,-0.57Z", "name": "Serbia"}, "LT": {"path": "M486.93,129.3l0.17,1.12l-1.81,0.98l-0.72,2.02l-2.47,1.18l-2.1,-0.02l-0.73,-1.05l-1.06,-0.3l-0.09,-1.87l-3.56,-1.13l-0.43,-2.36l2.48,-0.94l4.12,0.22l2.25,-0.31l0.52,0.69l1.24,0.21l2.19,1.56Z", "name": "Lithuania"}, "LU": {"path": "M436.08,149.45l-0.48,-0.07l0.3,-1.28l0.27,0.4l-0.09,0.96Z", "name": "Luxembourg"}, "LR": {"path": "M399.36,265.97l0.18,1.54l-0.48,0.99l0.08,0.47l2.47,1.8l-0.33,2.8l-2.65,-1.13l-5.78,-4.61l0.58,-1.32l2.1,-2.33l0.86,-0.22l0.77,1.14l-0.14,0.85l0.59,0.87l1.0,0.14l0.76,-0.99Z", "name": "Liberia"}, "RO": {"path": "M487.53,154.23l0.6,0.24l2.87,3.98l-0.17,2.69l0.45,1.42l1.32,0.81l1.35,-0.42l0.76,0.36l0.02,0.31l-0.83,0.45l-0.59,-0.22l-0.54,0.3l-0.62,3.3l-1.0,-0.22l-2.07,-1.13l-2.95,0.71l-1.25,0.76l-3.51,-0.15l-1.89,-0.47l-0.87,0.16l-0.82,-1.3l0.29,-0.26l-0.06,-0.64l-1.09,-0.34l-0.56,0.5l-1.05,-0.64l-0.39,-1.39l-1.36,-0.65l-0.35,-1.0l-0.83,-0.75l1.54,-0.54l2.66,-4.21l2.4,-1.24l2.96,0.34l1.48,0.73l0.79,-0.45l1.78,-0.3l0.75,-0.74l0.79,0.0Z", "name": "Romania"}, "GW": {"path": "M386.23,253.6l-0.29,0.84l0.15,0.6l-2.21,0.59l-0.86,0.96l-1.04,-0.83l-1.09,-0.23l-0.54,-1.06l-0.66,-0.49l2.41,-0.48l4.13,0.1Z", "name": "Guinea-Bissau"}, "GT": {"path": "M195.08,249.77l-2.48,-0.37l-1.03,-0.45l-1.14,-0.89l0.3,-0.99l-0.24,-0.68l0.96,-1.66l2.98,-0.01l0.4,-0.37l-0.19,-1.28l-1.67,-1.4l0.51,-0.4l0.0,-1.05l3.85,0.02l-0.21,4.53l0.4,0.43l1.46,0.38l-1.48,0.98l-0.35,0.7l0.12,0.57l-2.2,1.96Z", "name": "Guatemala"}, "GR": {"path": "M487.07,174.59l-0.59,1.43l-0.37,0.21l-2.84,-0.35l-3.03,0.77l-0.18,0.68l1.28,1.23l-0.61,0.23l-1.14,0.0l-1.2,-1.39l-0.63,0.03l-0.53,1.01l0.56,1.76l1.03,1.19l-0.56,0.38l-0.05,0.62l2.52,2.12l0.02,0.87l-1.78,-0.59l-0.48,0.56l0.5,1.0l-1.07,0.2l-0.3,0.53l0.75,2.01l-0.98,0.02l-1.84,-1.12l-1.37,-4.2l-2.21,-2.95l-0.11,-0.56l1.04,-1.28l0.2,-0.95l0.85,-0.66l0.03,-0.46l1.32,-0.21l1.01,-0.64l1.22,0.05l0.65,-0.56l2.26,-0.0l1.82,-0.75l1.85,1.0l2.28,-0.28l0.35,-0.39l0.01,-0.77l0.34,0.22ZM480.49,192.16l0.58,0.4l-0.68,-0.12l0.11,-0.28ZM482.52,192.82l2.51,0.06l0.24,0.32l-1.99,0.13l-0.77,-0.51Z", "name": "Greece"}, "GQ": {"path": "M448.79,279.62l0.02,2.22l-4.09,0.0l0.69,-2.27l3.38,0.05Z", "name": "Eq. Guinea"}, "GY": {"path": "M277.42,270.07l-0.32,1.83l-1.32,0.57l-0.23,0.46l-0.28,2.0l1.11,1.82l0.83,0.19l0.32,1.25l1.13,1.62l-1.21,-0.19l-1.08,0.71l-1.77,0.5l-0.44,0.46l-0.86,-0.09l-1.32,-1.01l-0.77,-2.27l0.36,-1.9l0.68,-1.23l-0.57,-1.17l-0.74,-0.43l0.12,-1.16l-0.9,-0.69l-1.1,0.09l-1.31,-1.48l0.53,-0.72l-0.04,-0.84l1.99,-0.86l0.05,-0.59l-0.71,-0.78l0.14,-0.57l1.66,-1.24l1.36,0.77l1.41,1.49l0.06,1.15l0.37,0.38l0.8,0.05l2.06,1.86Z", "name": "Guyana"}, "GE": {"path": "M521.71,168.93l5.29,0.89l4.07,2.01l1.41,-0.44l2.07,0.56l0.68,1.1l1.07,0.55l-0.12,0.59l0.98,1.29l-1.01,-0.13l-1.81,-0.83l-0.94,0.47l-3.23,0.43l-2.29,-1.39l-2.33,0.05l0.21,-0.97l-0.76,-2.26l-1.45,-1.12l-1.43,-0.39l-0.41,-0.42Z", "name": "Georgia"}, "GB": {"path": "M412.61,118.72l-2.19,3.22l-0.0,0.45l5.13,-0.3l-0.53,2.37l-2.2,3.12l0.29,0.63l2.37,0.21l2.33,4.3l1.76,0.69l2.2,5.12l2.94,0.77l-0.23,1.62l-1.15,0.88l-0.1,0.52l0.82,1.42l-1.86,1.43l-3.3,-0.02l-4.12,0.87l-1.04,-0.58l-0.47,0.06l-1.51,1.41l-2.12,-0.34l-1.86,1.18l-0.6,-0.29l3.19,-3.0l2.16,-0.69l0.28,-0.41l-0.34,-0.36l-3.73,-0.53l-0.4,-0.76l2.2,-0.87l0.17,-0.61l-1.26,-1.67l0.36,-1.7l3.38,0.28l0.43,-0.33l0.37,-1.99l-1.79,-2.49l-3.11,-0.72l-0.38,-0.59l0.79,-1.35l-0.04,-0.46l-0.82,-0.97l-0.61,0.01l-0.68,0.84l-0.1,-2.34l-1.23,-1.88l0.85,-3.47l1.77,-2.68l1.85,0.26l2.17,-0.22ZM406.26,132.86l-1.01,1.77l-1.57,-0.59l-1.16,0.01l0.37,-1.54l-0.39,-1.39l1.45,-0.1l2.3,1.84Z", "name": "United Kingdom"}, "GA": {"path": "M453.24,279.52l-0.08,0.98l0.7,1.29l2.36,0.24l-0.98,2.63l1.18,1.79l0.25,1.78l-0.29,1.52l-0.6,0.93l-1.84,-0.09l-1.23,-1.11l-0.66,0.23l-0.15,0.84l-1.42,0.26l-1.02,0.7l-0.11,0.52l0.77,1.35l-1.34,0.97l-3.94,-4.3l-1.44,-2.45l0.06,-0.6l0.54,-0.81l1.05,-3.46l4.17,-0.07l0.4,-0.4l-0.02,-2.66l2.39,0.21l1.25,-0.27Z", "name": "Gabon"}, "GN": {"path": "M391.8,254.11l0.47,0.8l1.11,-0.32l0.98,0.7l1.07,0.2l2.26,-1.22l0.64,0.44l1.13,1.56l-0.48,1.4l0.8,0.3l-0.08,0.48l0.46,0.68l-0.35,1.36l1.05,2.61l-1.0,0.69l0.03,1.41l-0.72,-0.06l-1.08,1.0l-0.24,-0.27l0.07,-1.11l-1.05,-1.54l-1.79,0.21l-0.35,-2.01l-1.6,-2.18l-2.0,-0.0l-1.31,0.54l-1.95,2.18l-1.86,-2.19l-1.2,-0.78l-0.3,-1.11l-0.8,-0.85l0.65,-0.72l0.81,-0.03l1.64,-0.8l0.23,-1.87l2.67,0.64l0.89,-0.3l1.21,0.15Z", "name": "Guinea"}, "GM": {"path": "M379.31,251.39l0.1,-0.35l2.43,-0.07l0.74,-0.61l0.51,-0.03l0.77,0.49l-1.03,-0.3l-1.87,0.9l-1.65,-0.04ZM384.03,250.91l0.91,0.05l0.75,-0.24l-0.59,0.31l-1.08,-0.13Z", "name": "Gambia"}, "GL": {"path": "M353.02,1.2l14.69,4.67l-3.68,1.89l-22.97,0.86l-0.36,0.27l0.12,0.43l1.55,1.18l8.79,-0.66l7.48,2.07l4.86,-1.77l1.66,1.73l-2.53,3.19l-0.01,0.48l0.46,0.15l6.35,-2.2l12.06,-2.31l7.24,1.13l1.09,1.99l-9.79,4.01l-1.44,1.32l-7.87,0.98l-0.35,0.41l0.38,0.38l5.07,0.24l-2.53,3.58l-2.07,3.81l0.08,6.05l2.57,3.11l-3.22,0.2l-4.12,1.66l-0.05,0.72l4.45,2.65l0.51,3.75l-2.3,0.4l-0.25,0.64l2.79,3.69l-4.82,0.31l-0.36,0.29l0.16,0.44l2.62,1.8l-0.59,1.22l-3.3,0.7l-3.45,0.01l-0.29,0.68l3.03,3.12l0.02,1.34l-4.4,-1.73l-1.72,1.35l0.15,0.66l3.31,1.15l3.13,2.71l0.81,3.16l-3.85,0.75l-4.89,-4.26l-0.47,-0.03l-0.17,0.44l0.79,2.86l-2.71,2.21l-0.13,0.44l0.37,0.27l8.73,0.34l-12.32,6.64l-7.24,1.48l-2.94,0.08l-2.69,1.75l-3.43,4.41l-5.24,2.84l-1.73,0.18l-7.12,2.1l-2.15,2.52l-0.13,2.99l-1.19,2.45l-4.01,3.09l-0.14,0.44l0.97,2.9l-2.28,6.48l-3.1,0.2l-3.83,-3.07l-4.86,-0.02l-2.25,-1.93l-1.7,-3.79l-4.3,-4.84l-1.21,-2.49l-0.44,-3.8l-3.32,-3.63l0.84,-2.86l-1.56,-1.7l2.28,-4.6l3.83,-1.74l1.03,-1.96l0.52,-3.47l-0.59,-0.41l-4.17,2.21l-2.07,0.58l-2.72,-1.28l-0.15,-2.71l0.85,-2.09l2.01,-0.06l5.06,1.2l0.46,-0.23l-0.14,-0.49l-6.54,-4.47l-2.67,0.55l-1.58,-0.86l2.56,-4.01l-0.03,-0.48l-1.5,-1.74l-4.98,-8.5l-3.13,-1.96l0.03,-1.88l-0.24,-0.37l-6.85,-3.02l-5.36,-0.38l-12.7,0.58l-2.78,-1.57l-3.66,-2.77l5.73,-1.45l5.0,-0.28l0.38,-0.38l-0.35,-0.41l-10.67,-1.38l-5.3,-2.06l0.25,-1.54l18.41,-5.26l1.22,-2.27l-0.25,-0.55l-6.14,-1.86l1.68,-1.77l8.55,-4.03l3.59,-0.63l0.3,-0.54l-0.88,-2.27l5.47,-1.47l7.65,-0.95l7.55,-0.05l3.04,1.85l6.48,-3.27l5.81,2.22l3.56,0.5l5.16,1.94l0.5,-0.21l-0.17,-0.52l-5.71,-3.13l0.28,-2.13l8.12,-3.6l8.7,0.28l3.35,-2.34l8.71,-0.6l19.93,0.8Z", "name": "Greenland"}, "KW": {"path": "M540.81,207.91l0.37,0.86l-0.17,0.76l0.6,1.53l-0.95,0.04l-0.82,-1.28l-1.57,-0.18l1.31,-1.88l1.22,0.17Z", "name": "Kuwait"}, "GH": {"path": "M420.53,257.51l-0.01,0.72l0.96,1.2l0.24,3.73l0.59,0.95l-0.51,2.1l0.19,1.41l1.02,2.21l-6.97,2.84l-1.8,-0.57l0.04,-0.89l-1.02,-2.04l0.61,-2.65l1.07,-2.32l-0.96,-6.47l5.01,0.07l0.94,-0.39l0.61,0.11Z", "name": "Ghana"}, "OM": {"path": "M568.09,230.93l-0.91,1.67l-1.22,0.04l-0.6,0.76l-0.41,1.51l0.27,1.58l-1.16,0.05l-1.56,0.97l-0.76,1.74l-1.62,0.05l-0.98,0.65l-0.17,1.15l-0.89,0.52l-1.49,-0.18l-2.4,0.94l-2.47,-5.4l7.35,-2.71l1.67,-5.23l-1.12,-2.09l0.05,-0.83l0.67,-1.0l0.07,-1.05l0.9,-0.42l-0.05,-2.07l0.7,-0.01l1.0,1.62l1.51,1.08l3.3,0.84l1.73,2.29l0.81,0.37l-1.23,2.35l-0.99,0.79Z", "name": "Oman"}, "_1": {"path": "M531.15,258.94l1.51,0.12l5.13,-0.95l5.3,-1.48l-0.01,4.4l-2.67,3.39l-1.85,0.01l-8.04,-2.94l-2.55,-3.17l1.12,-1.71l2.04,2.34Z", "name": "Somaliland"}, "_0": {"path": "M472.77,172.64l-1.08,-1.29l0.96,-0.77l0.29,-0.83l1.98,1.64l-0.36,0.67l-1.79,0.58Z", "name": "Kosovo"}, "JO": {"path": "M518.64,201.38l-5.14,1.56l-0.19,0.65l2.16,2.39l-0.89,1.14l-1.71,0.34l-1.71,1.8l-2.34,-0.37l1.21,-4.32l0.56,-4.07l2.8,0.94l4.46,-2.71l0.79,2.66Z", "name": "Jordan"}, "HR": {"path": "M455.59,162.84l1.09,0.07l-0.82,0.94l-0.27,-1.01ZM456.96,162.92l0.62,-0.41l1.73,0.45l0.42,-0.4l-0.01,-0.59l0.86,-0.52l0.2,-1.05l1.63,-0.68l2.57,1.68l2.07,0.6l0.87,-0.31l1.05,1.57l-0.52,0.63l-1.05,-0.56l-1.68,0.04l-2.1,-0.5l-1.29,0.06l-0.57,0.49l-0.59,-0.47l-0.62,0.16l-0.46,1.7l1.79,2.42l2.79,2.75l-1.18,-0.87l-2.21,-0.87l-1.67,-1.78l0.13,-0.63l-1.05,-1.19l-0.32,-1.27l-1.42,-0.43Z", "name": "Croatia"}, "HT": {"path": "M237.05,238.38l-1.16,0.43l-0.91,-0.55l0.05,-0.2l2.02,0.31ZM237.53,238.43l1.06,0.12l-0.05,0.01l-1.01,-0.12ZM239.25,238.45l0.79,-0.51l0.06,-0.62l-1.02,-1.0l0.02,-0.82l-0.3,-0.4l-0.93,-0.32l3.16,0.45l0.02,1.84l-0.48,0.34l-0.08,0.58l0.54,0.72l-1.78,-0.26Z", "name": "Haiti"}, "HU": {"path": "M462.08,157.89l0.65,-1.59l-0.09,-0.44l0.64,-0.0l0.39,-0.34l0.1,-0.69l1.75,0.87l2.32,-0.37l0.43,-0.66l3.49,-0.78l0.69,-0.78l0.57,-0.14l2.57,0.93l0.67,-0.23l1.03,0.65l0.08,0.37l-1.42,0.71l-2.59,4.14l-1.8,0.53l-1.68,-0.1l-2.74,1.23l-1.85,-0.54l-2.54,-1.66l-0.66,-1.1Z", "name": "Hungary"}, "HN": {"path": "M199.6,249.52l-1.7,-1.21l0.06,-0.94l3.04,-2.14l2.37,0.28l1.27,-0.09l1.1,-0.52l1.3,0.28l1.14,-0.25l1.38,0.37l2.23,1.37l-2.36,0.93l-1.23,-0.39l-0.88,1.3l-1.28,0.99l-0.98,-0.22l-0.42,0.52l-0.96,0.05l-0.36,0.41l0.04,0.88l-0.52,0.6l-0.3,0.04l-0.3,-0.55l-0.66,-0.31l0.11,-0.67l-0.48,-0.65l-0.87,-0.26l-0.73,0.2Z", "name": "Honduras"}, "PR": {"path": "M256.17,238.73l-0.26,0.27l-2.83,0.05l-0.07,-0.55l1.95,-0.1l1.22,0.33Z", "name": "Puerto Rico"}, "PS": {"path": "M509.21,203.07l0.1,-0.06l-0.02,0.03l-0.09,0.03ZM509.36,202.91l-0.02,-0.63l-0.33,-0.16l0.31,-1.09l0.24,0.1l-0.2,1.78Z", "name": "Palestine"}, "PT": {"path": "M401.84,187.38l-0.64,0.47l-1.13,-0.35l-0.91,0.17l0.28,-1.78l-0.24,-1.78l-1.25,-0.56l-0.45,-0.84l0.17,-1.66l1.01,-1.18l0.69,-2.92l-0.04,-1.39l-0.59,-1.9l1.3,-0.85l0.84,1.35l3.1,-0.3l0.46,0.99l-1.05,0.94l-0.03,2.16l-0.41,0.57l-0.08,1.1l-0.79,0.18l-0.26,0.59l0.91,1.6l-0.63,1.75l0.76,1.09l-1.1,1.52l0.07,1.05Z", "name": "Portugal"}, "PY": {"path": "M274.9,336.12l0.74,1.52l-0.16,3.45l0.32,0.41l2.64,0.5l1.11,-0.47l1.4,0.59l0.36,0.6l0.53,3.42l1.27,0.4l0.98,-0.38l0.51,0.27l-0.0,1.18l-1.21,5.32l-2.09,1.9l-1.8,0.4l-4.71,-0.98l2.2,-3.63l-0.32,-1.5l-2.78,-1.28l-3.03,-1.94l-2.07,-0.44l-4.34,-4.06l0.91,-2.9l0.08,-1.42l1.07,-2.04l4.13,-0.72l2.18,0.03l2.05,1.17l0.03,0.59Z", "name": "Paraguay"}, "PA": {"path": "M213.8,263.68l0.26,-1.52l-0.36,-0.26l-0.01,-0.49l0.44,-0.1l0.93,1.4l1.26,0.03l0.77,0.49l1.38,-0.23l2.51,-1.11l0.86,-0.72l3.45,0.85l1.4,1.18l0.41,1.74l-0.21,0.34l-0.53,-0.12l-0.47,0.29l-0.16,0.6l-0.68,-1.28l0.45,-0.49l-0.19,-0.66l-0.47,-0.13l-0.54,-0.84l-1.5,-0.75l-1.1,0.16l-0.75,0.99l-1.62,0.84l-0.18,0.96l0.85,0.97l-0.58,0.45l-0.69,0.08l-0.34,-1.18l-1.27,0.03l-0.71,-1.05l-2.59,-0.46Z", "name": "Panama"}, "PG": {"path": "M808.58,298.86l2.54,2.56l-0.13,0.26l-0.33,0.12l-0.87,-0.78l-1.22,-2.16ZM801.41,293.04l0.5,0.29l0.26,0.27l-0.49,-0.35l-0.27,-0.21ZM803.17,294.58l0.59,0.5l0.08,1.06l-0.29,-0.91l-0.38,-0.65ZM796.68,298.41l0.52,0.75l1.43,-0.19l2.27,-1.81l-0.01,-1.43l1.12,0.16l-0.04,1.1l-0.7,1.28l-1.12,0.18l-0.62,0.79l-2.46,1.11l-1.17,-0.0l-3.08,-1.25l3.41,0.0l0.45,-0.68ZM789.15,303.55l2.31,1.8l1.59,2.61l1.34,0.13l-0.06,0.66l0.31,0.43l1.06,0.24l0.06,0.65l2.25,1.05l-1.22,0.13l-0.72,-0.63l-4.56,-0.65l-3.22,-2.87l-1.49,-2.34l-3.27,-1.1l-2.38,0.72l-1.59,0.86l-0.2,0.42l0.27,1.55l-1.55,0.68l-1.36,-0.4l-2.21,-0.09l-0.08,-15.41l8.39,2.93l2.95,2.4l0.6,1.64l4.02,1.49l0.31,0.68l-1.76,0.21l-0.33,0.52l0.55,1.68Z", "name": "Papua New Guinea"}, "PE": {"path": "M244.96,295.21l-1.26,-0.07l-0.57,0.42l-1.93,0.45l-2.98,1.75l-0.36,1.36l-0.58,0.8l0.12,1.37l-1.24,0.59l-0.22,1.22l-0.62,0.84l1.04,2.27l1.28,1.44l-0.41,0.84l0.32,0.57l1.48,0.13l1.16,1.37l2.21,0.07l1.63,-1.08l-0.13,3.02l0.3,0.4l1.14,0.29l1.31,-0.34l1.9,3.59l-0.48,0.85l-0.17,3.85l-0.94,1.59l0.35,0.75l-0.47,1.07l0.98,1.97l-2.1,3.82l-0.98,0.5l-2.17,-1.28l-0.39,-1.16l-4.95,-2.58l-4.46,-2.79l-1.84,-1.51l-0.91,-1.84l0.3,-0.96l-2.11,-3.33l-4.82,-9.68l-1.04,-1.2l-0.87,-1.94l-3.4,-2.48l0.58,-1.18l-1.13,-2.23l0.66,-1.49l1.45,-1.15l-0.6,0.98l0.07,0.92l0.47,0.36l1.74,0.03l0.97,1.17l0.54,0.07l1.42,-1.03l0.6,-1.84l1.42,-2.02l3.04,-1.04l2.73,-2.62l0.86,-1.74l-0.1,-1.87l1.44,1.02l0.9,1.25l1.06,0.59l1.7,2.73l1.86,0.31l1.45,-0.61l0.96,0.39l1.36,-0.19l1.45,0.89l-1.4,2.21l0.31,0.61l0.59,0.05l0.47,0.5Z", "name": "Peru"}, "PK": {"path": "M615.09,192.34l-1.83,1.81l-2.6,0.39l-3.73,-0.68l-1.58,1.33l-0.09,0.42l1.77,4.39l1.7,1.23l-1.69,1.27l-0.12,2.14l-2.33,2.64l-1.6,2.8l-2.46,2.67l-3.03,-0.07l-2.76,2.83l0.05,0.6l1.5,1.11l0.26,1.9l1.44,1.5l0.37,1.68l-5.01,-0.01l-1.78,1.7l-1.42,-0.52l-0.76,-1.87l-2.27,-2.15l-11.61,0.86l0.71,-2.34l3.43,-1.32l0.25,-0.44l-0.21,-1.24l-1.2,-0.65l-0.28,-2.46l-2.29,-1.14l-1.28,-1.94l2.82,0.94l2.62,-0.38l1.42,0.33l0.76,-0.56l1.71,0.19l3.25,-1.14l0.27,-0.36l0.08,-2.19l1.18,-1.32l1.68,0.0l0.58,-0.82l1.6,-0.3l1.19,0.16l0.98,-0.78l0.02,-1.88l0.93,-1.47l1.48,-0.66l0.19,-0.55l-0.66,-1.25l2.04,-0.11l0.69,-1.01l-0.02,-1.16l1.11,-1.06l-0.17,-1.78l-0.49,-1.03l1.15,-0.98l5.42,-0.91l2.6,-0.82l1.6,1.16l0.97,2.34l3.45,0.97Z", "name": "Pakistan"}, "PH": {"path": "M737.01,263.84l0.39,2.97l-0.44,1.18l-0.55,-1.53l-0.67,-0.14l-1.17,1.28l0.65,2.09l-0.42,0.69l-2.48,-1.23l-0.57,-1.49l0.65,-1.03l-0.1,-0.54l-1.59,-1.19l-0.56,0.08l-0.65,0.87l-1.23,0.0l-1.58,0.97l0.83,-1.8l2.56,-1.42l0.65,0.84l0.45,0.13l1.9,-0.69l0.56,-1.11l1.5,-0.06l0.38,-0.43l-0.09,-1.19l1.21,0.71l0.36,2.02ZM733.59,256.58l0.05,0.75l0.08,0.26l-0.8,-0.42l-0.18,-0.71l0.85,0.12ZM734.08,256.1l-0.12,-1.12l-1.0,-1.27l1.36,0.03l0.53,0.73l0.51,2.04l-1.27,-0.4ZM733.76,257.68l0.38,0.98l-0.32,0.15l-0.07,-1.13ZM724.65,238.43l1.46,0.7l0.72,-0.31l-0.32,1.17l0.79,1.71l-0.57,1.84l-1.53,1.04l-0.39,2.25l0.56,2.04l1.63,0.57l1.16,-0.27l2.71,1.23l-0.19,1.08l0.76,0.84l-0.08,0.36l-1.4,-0.9l-0.88,-1.27l-0.66,0.0l-0.38,0.55l-1.6,-1.31l-2.15,0.36l-0.87,-0.39l0.07,-0.61l0.66,-0.55l-0.01,-0.62l-0.75,-0.59l-0.72,0.44l-0.74,-0.87l-0.39,-2.49l0.32,0.27l0.66,-0.28l0.26,-3.97l0.7,-2.02l1.14,0.0ZM731.03,258.87l-0.88,0.85l-1.19,1.94l-1.05,-1.19l0.93,-1.1l0.32,-1.47l0.52,-0.06l-0.27,1.15l0.22,0.45l0.49,-0.12l1.0,-1.32l-0.08,0.85ZM726.83,255.78l0.83,0.38l1.17,-0.0l-0.02,0.48l-2.0,1.4l0.03,-2.26ZM724.81,252.09l-0.38,1.27l-1.42,-1.95l1.2,0.05l0.6,0.63ZM716.55,261.82l1.1,-0.95l0.03,-0.03l-0.28,0.36l-0.85,0.61ZM719.22,259.06l0.04,-0.06l0.8,-1.53l0.16,0.75l-1.0,0.84Z", "name": "Philippines"}, "PL": {"path": "M468.44,149.42l-1.11,-1.54l-1.86,-0.33l-0.48,-1.05l-1.72,-0.37l-0.65,0.69l-0.72,-0.36l0.11,-0.61l-0.33,-0.46l-1.75,-0.27l-1.04,-0.93l-0.94,-1.94l0.16,-1.22l-0.62,-1.8l-0.78,-1.07l0.57,-1.04l-0.48,-1.43l1.41,-0.83l6.91,-2.71l2.14,0.5l0.52,0.91l5.51,0.44l4.55,-0.05l1.07,0.31l0.48,0.84l0.15,1.58l0.65,1.2l-0.01,0.99l-1.27,0.58l-0.19,0.54l0.73,1.48l0.08,1.55l1.2,2.76l-0.17,0.58l-1.23,0.44l-2.27,2.72l0.18,0.95l-1.97,-1.03l-1.98,0.4l-1.36,-0.28l-1.24,0.58l-1.07,-0.97l-1.16,0.24Z", "name": "Poland"}, "-99": {"path": "M504.91,192.87l0.34,0.01l0.27,-0.07l-0.29,0.26l-0.31,-0.2Z", "name": "N. Cyprus"}, "ZM": {"path": "M481.47,313.3l0.39,0.31l2.52,0.14l0.99,1.17l2.01,0.35l1.4,-0.64l0.69,1.17l1.78,0.33l1.84,2.35l2.23,0.18l0.4,-0.43l-0.21,-2.74l-0.62,-0.3l-0.48,0.32l-1.98,-1.17l0.72,-5.29l-0.51,-1.18l0.57,-1.3l3.68,-0.62l0.26,0.63l1.21,0.63l0.9,-0.22l2.16,0.67l1.33,0.71l1.07,1.02l0.56,1.87l-0.88,2.7l0.43,2.09l-0.73,0.87l-0.76,2.37l0.59,0.68l-6.6,1.83l-0.29,0.44l0.19,1.45l-1.68,0.35l-1.43,1.02l-0.38,0.87l-0.87,0.26l-3.48,3.69l-4.16,-0.53l-1.52,-1.0l-1.77,-0.13l-1.83,0.52l-3.04,-3.4l0.11,-7.59l4.82,0.03l0.39,-0.49l-0.18,-0.76l0.33,-0.83l-0.4,-1.36l0.24,-1.05Z", "name": "Zambia"}, "EH": {"path": "M384.42,230.28l0.25,-0.79l1.06,-1.29l0.8,-3.51l3.38,-2.78l0.7,-1.81l0.06,4.84l-1.98,0.2l-0.94,1.59l0.39,3.56l-3.7,-0.01ZM392.01,218.1l0.7,-1.8l1.77,-0.24l2.09,0.34l0.95,-0.62l1.28,-0.07l-0.0,2.51l-6.79,-0.12Z", "name": "W. Sahara"}, "EE": {"path": "M485.71,115.04l2.64,0.6l2.56,0.11l-1.6,1.91l0.61,3.54l-0.81,0.87l-1.78,-0.01l-3.22,-1.76l-1.8,0.45l0.21,-1.53l-0.58,-0.41l-0.69,0.34l-1.26,-1.03l-0.17,-1.63l2.83,-0.92l3.05,-0.52Z", "name": "Estonia"}, "EG": {"path": "M492.06,205.03l1.46,0.42l2.95,-1.64l2.04,-0.21l1.53,0.3l0.59,1.19l0.69,0.04l0.41,-0.64l1.81,0.58l1.95,0.16l1.04,-0.51l1.42,4.08l-2.03,4.54l-1.66,-1.77l-1.76,-3.85l-0.64,-0.12l-0.36,0.67l1.04,2.88l3.44,6.95l1.78,3.04l2.03,2.65l-0.36,0.53l0.23,2.01l2.7,2.19l-28.41,0.0l0.0,-18.96l-0.73,-2.2l0.59,-1.56l-0.32,-1.26l0.68,-0.99l3.06,-0.04l4.82,1.52Z", "name": "Egypt"}, "ZA": {"path": "M467.14,373.21l-0.13,-1.96l-0.68,-1.56l0.7,-0.68l-0.13,-2.33l-4.56,-8.19l0.77,-0.86l0.6,0.45l0.69,1.31l2.83,0.72l1.5,-0.26l2.24,-1.39l0.19,-9.55l1.35,2.3l-0.21,1.5l0.61,1.2l0.4,0.19l1.79,-0.27l2.6,-2.07l0.69,-1.32l0.96,-0.48l2.19,1.04l2.04,0.13l1.77,-0.65l0.85,-2.12l1.38,-0.33l1.59,-2.76l2.15,-1.89l3.41,-1.87l2.0,0.45l1.02,-0.28l0.99,0.2l1.75,5.29l-0.38,3.25l-0.81,-0.23l-1.0,0.46l-0.87,1.68l-0.05,1.16l1.97,1.84l1.47,-0.29l0.69,-1.18l1.09,0.01l-0.76,3.69l-0.58,1.09l-2.2,1.79l-3.17,4.76l-2.8,2.83l-3.57,2.88l-2.53,1.05l-1.22,0.14l-0.51,0.7l-1.18,-0.32l-1.39,0.5l-2.59,-0.52l-1.61,0.33l-1.18,-0.11l-2.55,1.1l-2.1,0.44l-1.6,1.07l-0.85,0.05l-0.93,-0.89l-0.93,-0.15l-0.97,-1.13l-0.25,0.05ZM491.45,364.19l0.62,-0.93l1.48,-0.59l1.18,-2.19l-0.07,-0.49l-1.99,-1.69l-1.66,0.56l-1.43,1.14l-1.34,1.73l0.02,0.51l1.88,2.11l1.31,-0.16Z", "name": "South Africa"}, "EC": {"path": "M231.86,285.53l0.29,1.59l-0.69,1.45l-2.61,2.51l-3.13,1.11l-1.53,2.18l-0.49,1.68l-1.0,0.73l-1.02,-1.11l-1.78,-0.16l0.67,-1.15l-0.24,-0.86l1.25,-2.13l-0.54,-1.09l-0.67,-0.08l-0.72,0.87l-0.87,-0.64l0.35,-0.69l-0.36,-1.96l0.81,-0.51l0.45,-1.51l0.92,-1.57l-0.07,-0.97l2.65,-1.33l2.75,1.35l0.77,1.05l2.12,0.35l0.76,-0.32l1.96,1.21Z", "name": "Ecuador"}, "AL": {"path": "M470.32,171.8l0.74,0.03l0.92,0.89l-0.17,1.95l0.36,1.28l1.01,0.82l-1.82,2.83l-0.19,-0.61l-1.25,-0.89l-0.18,-1.2l0.53,-2.82l-0.54,-1.47l0.6,-0.83Z", "name": "Albania"}, "AO": {"path": "M461.55,300.03l1.26,3.15l1.94,2.36l2.47,-0.53l1.25,0.32l0.44,-0.18l0.93,-1.92l1.31,-0.08l0.41,-0.44l0.47,-0.0l-0.1,0.41l0.39,0.49l2.65,-0.02l0.03,1.19l0.48,1.01l-0.34,1.52l0.18,1.55l0.83,1.04l-0.13,2.85l0.54,0.39l3.96,-0.41l-0.1,1.79l0.39,1.05l-0.24,1.43l-4.7,-0.03l-0.4,0.39l-0.12,8.13l2.92,3.49l-3.83,0.88l-5.89,-0.36l-1.88,-1.24l-10.47,0.22l-1.3,-1.01l-1.85,-0.16l-2.4,0.77l-0.15,-1.06l0.33,-2.16l1.0,-3.45l1.35,-3.2l2.24,-2.8l0.33,-2.06l-0.13,-1.53l-0.8,-1.08l-1.21,-2.87l0.87,-1.62l-1.27,-4.12l-1.17,-1.53l2.47,-0.63l7.03,0.03ZM451.71,298.87l-0.47,-1.25l1.25,-1.11l0.32,0.3l-0.99,1.03l-0.12,1.03Z", "name": "Angola"}, "KZ": {"path": "M552.8,172.89l0.46,-1.27l-0.48,-1.05l-2.96,-1.19l-1.06,-2.58l-1.37,-0.87l-0.03,-0.3l1.95,0.23l0.45,-0.38l0.08,-1.96l1.75,-0.41l2.1,0.45l0.48,-0.33l0.45,-3.04l-0.45,-2.09l-0.41,-0.31l-2.42,0.15l-2.36,-0.73l-2.87,1.37l-2.17,0.61l-0.85,-0.34l0.13,-1.61l-1.6,-2.12l-2.02,-0.08l-1.78,-1.82l1.29,-2.18l-0.57,-0.95l1.62,-2.91l2.21,1.63l0.63,-0.27l0.29,-2.22l4.92,-3.43l3.71,-0.08l8.4,3.6l2.92,-1.36l3.77,-0.06l3.11,1.66l0.51,-0.11l0.6,-0.81l3.31,0.13l0.39,-0.25l0.63,-1.57l-0.17,-0.5l-3.5,-1.98l1.87,-1.27l-0.13,-1.03l1.98,-0.72l0.18,-0.62l-1.59,-2.06l0.81,-0.82l9.23,-1.18l1.33,-0.88l6.18,-1.26l2.26,-1.42l4.08,0.68l0.73,3.33l0.51,0.3l2.48,-0.8l2.79,1.02l-0.17,1.56l0.43,0.44l2.55,-0.24l4.89,-2.53l0.03,0.32l3.15,2.61l5.56,8.47l0.65,0.02l1.12,-1.46l3.15,1.74l3.76,-0.78l1.15,0.49l1.14,1.8l1.84,0.76l0.99,1.29l3.35,-0.25l1.02,1.52l-1.6,1.81l-1.93,0.28l-0.34,0.38l-0.11,3.05l-1.13,1.16l-4.75,-1.0l-0.46,0.27l-1.76,5.47l-1.1,0.59l-4.91,1.23l-0.27,0.54l2.1,4.97l-1.37,0.63l-0.23,0.41l0.13,1.13l-0.88,-0.25l-1.42,-1.13l-7.89,-0.4l-0.92,0.31l-3.73,-1.22l-1.42,0.63l-0.53,1.66l-3.72,-0.94l-1.85,0.43l-0.76,1.4l-4.65,2.62l-1.13,2.08l-0.44,0.01l-0.92,-1.4l-2.87,-0.09l-0.45,-2.14l-0.38,-0.32l-0.8,-0.01l0.0,-2.96l-3.0,-2.22l-7.31,0.58l-2.35,-2.68l-6.71,-3.69l-6.45,1.83l-0.29,0.39l0.1,10.85l-0.7,0.08l-1.62,-2.17l-1.83,-0.96l-3.11,0.59l-0.64,0.51Z", "name": "Kazakhstan"}, "ET": {"path": "M516.04,247.79l1.1,0.84l1.63,-0.45l0.68,0.47l1.63,0.03l2.01,0.94l1.73,1.66l1.64,2.07l-1.52,2.04l0.16,1.72l0.39,0.38l2.05,0.0l-0.36,1.03l2.86,3.58l8.32,3.08l1.31,0.02l-6.32,6.75l-3.1,0.11l-2.36,1.77l-1.47,0.04l-0.86,0.79l-1.38,-0.0l-1.32,-0.81l-2.29,1.05l-0.76,0.98l-3.29,-0.41l-3.07,-2.07l-1.8,-0.07l-0.62,-0.6l0.0,-1.24l-0.28,-0.38l-1.15,-0.37l-1.4,-2.59l-1.19,-0.68l-0.47,-1.0l-1.27,-1.23l-1.16,-0.22l0.43,-0.72l1.45,-0.28l0.41,-0.95l-0.03,-2.21l0.68,-2.44l1.05,-0.63l1.43,-3.06l1.57,-1.37l1.02,-2.51l0.35,-1.88l2.52,0.46l0.44,-0.24l0.58,-1.43Z", "name": "Ethiopia"}, "ZW": {"path": "M498.91,341.09l-1.11,-0.22l-0.92,0.28l-2.09,-0.44l-1.5,-1.11l-1.89,-0.43l-0.62,-1.4l-0.01,-0.84l-0.3,-0.38l-0.97,-0.25l-2.71,-2.74l-1.92,-3.32l3.83,0.45l3.73,-3.82l1.08,-0.44l0.26,-0.77l1.25,-0.9l1.41,-0.26l0.5,0.89l1.99,-0.05l1.72,1.17l1.11,0.17l1.05,0.66l0.01,2.99l-0.59,3.76l0.38,0.86l-0.23,1.23l-0.39,0.35l-0.63,1.81l-2.43,2.75Z", "name": "Zimbabwe"}, "ES": {"path": "M416.0,169.21l1.07,1.17l4.61,1.38l1.06,-0.57l2.6,1.26l2.71,-0.3l0.09,1.12l-2.14,1.8l-3.11,0.61l-0.31,0.31l-0.2,0.89l-1.54,1.69l-0.97,2.4l0.84,1.74l-1.32,1.27l-0.48,1.68l-1.88,0.65l-1.66,2.07l-5.36,-0.01l-1.79,1.08l-0.89,0.98l-0.88,-0.17l-0.79,-0.82l-0.68,-1.59l-2.37,-0.63l-0.11,-0.5l1.21,-1.82l-0.77,-1.13l0.61,-1.68l-0.76,-1.62l0.87,-0.49l0.09,-1.25l0.42,-0.6l0.03,-2.11l0.99,-0.69l0.13,-0.5l-1.03,-1.73l-1.46,-0.11l-0.61,0.38l-1.06,0.0l-0.52,-1.23l-0.53,-0.21l-1.32,0.67l-0.01,-1.49l-0.75,-0.96l3.03,-1.88l2.99,0.53l3.32,-0.02l2.63,0.51l6.01,-0.06Z", "name": "Spain"}, "ER": {"path": "M520.38,246.23l3.42,2.43l3.5,3.77l0.84,0.54l-0.95,-0.01l-3.51,-3.89l-2.33,-1.15l-1.73,-0.07l-0.91,-0.51l-1.26,0.51l-1.34,-1.02l-0.61,0.17l-0.66,1.61l-2.35,-0.43l-0.17,-0.67l1.29,-5.29l0.61,-0.61l1.95,-0.53l0.87,-1.01l1.17,2.41l0.68,2.33l1.49,1.43Z", "name": "Eritrea"}, "ME": {"path": "M468.91,172.53l-1.22,-1.02l0.47,-1.81l0.89,-0.72l2.26,1.51l-0.5,0.57l-0.75,-0.27l-1.14,1.73Z", "name": "Montenegro"}, "MD": {"path": "M488.41,153.73l1.4,-0.27l1.72,0.93l1.07,0.15l0.85,0.65l-0.14,0.84l0.96,0.85l1.12,2.47l-1.15,-0.07l-0.66,-0.41l-0.52,0.25l-0.09,0.86l-1.08,1.89l-0.27,-0.86l0.25,-1.34l-0.16,-1.6l-3.29,-4.34Z", "name": "Moldova"}, "MG": {"path": "M545.91,319.14l0.4,3.03l0.62,1.21l-0.21,1.02l-0.57,-0.8l-0.69,-0.01l-0.47,0.76l0.41,2.12l-0.18,0.87l-0.73,0.78l-0.15,2.14l-4.71,15.2l-1.06,2.88l-3.92,1.64l-3.12,-1.49l-0.6,-1.21l-0.19,-2.4l-0.86,-2.05l-0.21,-1.77l0.38,-1.62l1.21,-0.75l0.01,-0.76l1.19,-2.04l0.23,-1.66l-1.06,-2.99l-0.19,-2.21l0.81,-1.33l0.32,-1.46l4.63,-1.22l3.44,-3.0l0.85,-1.4l-0.08,-0.7l0.78,-0.04l1.38,-1.77l0.13,-1.64l0.45,-0.61l1.16,1.69l0.59,1.6Z", "name": "Madagascar"}, "MA": {"path": "M378.78,230.02l0.06,-0.59l0.92,-0.73l0.82,-1.37l-0.09,-1.04l0.79,-1.7l1.31,-1.58l0.96,-0.59l0.66,-1.55l0.09,-1.47l0.81,-1.48l1.72,-1.07l1.55,-2.69l1.16,-0.96l2.44,-0.39l1.94,-1.82l1.31,-0.78l2.09,-2.28l-0.51,-3.65l1.24,-3.7l1.5,-1.75l4.46,-2.57l2.37,-4.47l1.44,0.01l1.68,1.21l2.32,-0.19l3.47,0.65l0.8,1.54l0.16,1.71l0.86,2.96l0.56,0.59l-0.26,0.61l-3.05,0.44l-1.26,1.05l-1.33,0.22l-0.33,0.37l-0.09,1.78l-2.68,1.0l-1.07,1.42l-4.47,1.13l-4.04,2.01l-0.54,4.64l-1.15,0.06l-0.92,0.61l-1.96,-0.35l-2.42,0.54l-0.74,1.9l-0.86,0.4l-1.14,3.26l-3.53,3.01l-0.8,3.55l-0.96,1.1l-0.29,0.82l-4.95,0.18Z", "name": "Morocco"}, "UZ": {"path": "M598.64,172.75l-1.63,1.52l0.06,0.64l1.85,1.12l1.97,-0.64l2.21,1.17l-2.52,1.68l-2.59,-0.22l-0.18,-0.41l0.46,-1.23l-0.45,-0.53l-3.35,0.69l-2.1,3.51l-1.87,-0.12l-1.03,1.51l0.22,0.55l1.64,0.62l0.46,1.83l-1.19,2.49l-2.66,-0.53l0.05,-1.36l-0.26,-0.39l-3.3,-1.23l-2.56,-1.4l-4.4,-3.34l-1.34,-3.14l-1.08,-0.6l-2.58,0.13l-0.69,-0.44l-0.47,-2.52l-3.37,-1.6l-0.43,0.05l-2.07,1.72l-2.1,1.01l-0.21,0.47l0.28,1.01l-1.91,0.03l-0.09,-10.5l5.99,-1.7l6.19,3.54l2.71,2.84l7.05,-0.67l2.71,2.01l-0.17,2.81l0.39,0.42l0.9,0.02l0.44,2.14l0.38,0.32l2.94,0.09l0.95,1.42l1.28,-0.24l1.05,-2.04l4.43,-2.5Z", "name": "Uzbekistan"}, "MM": {"path": "M673.9,230.21l-1.97,1.57l-0.57,0.96l-1.4,0.6l-1.36,1.05l-1.99,0.36l-1.08,2.66l-0.91,0.4l-0.19,0.55l1.21,2.27l2.52,3.43l-0.79,1.91l-0.74,0.41l-0.17,0.52l0.65,1.37l1.61,1.95l0.25,2.58l0.9,2.13l-1.92,3.57l0.68,-2.25l-0.81,-1.74l0.19,-2.65l-1.05,-1.53l-1.24,-6.17l-1.12,-2.26l-0.6,-0.13l-4.34,3.02l-2.39,-0.65l0.77,-2.84l-0.52,-2.61l-1.91,-2.96l0.25,-0.75l-0.29,-0.51l-1.33,-0.3l-1.61,-1.93l-0.1,-1.3l0.82,-0.24l0.04,-1.64l1.02,-0.52l0.21,-0.45l-0.23,-0.95l0.54,-0.96l0.08,-2.22l1.46,0.45l0.47,-0.2l1.12,-2.19l0.16,-1.35l1.33,-2.16l-0.0,-1.52l2.89,-1.66l1.63,0.44l0.5,-0.44l-0.17,-1.4l0.64,-0.36l0.08,-1.04l0.77,-0.11l0.71,1.35l1.06,0.69l-0.03,3.86l-2.38,2.37l-0.3,3.15l0.46,0.43l2.28,-0.38l0.51,2.08l1.47,0.67l-0.6,1.8l0.19,0.48l2.97,1.48l1.64,-0.55l0.02,0.32Z", "name": "Myanmar"}, "ML": {"path": "M392.61,254.08l-0.19,-2.37l-0.99,-0.87l-0.44,-1.3l-0.09,-1.28l0.81,-0.58l0.35,-1.24l2.37,0.65l1.31,-0.47l0.86,0.15l0.66,-0.56l9.83,-0.04l0.38,-0.28l0.56,-1.8l-0.44,-0.65l-2.35,-21.95l3.27,-0.04l16.7,11.38l0.74,1.31l2.5,1.09l0.02,1.38l0.44,0.39l2.34,-0.21l0.01,5.38l-1.28,1.61l-0.26,1.49l-5.31,0.57l-1.07,0.92l-2.9,0.1l-0.86,-0.48l-1.38,0.36l-2.4,1.08l-0.6,0.87l-1.85,1.09l-0.43,0.7l-0.79,0.39l-1.44,-0.21l-0.81,0.84l-0.34,1.64l-1.91,2.02l-0.06,1.03l-0.67,1.22l0.13,1.16l-0.97,0.39l-0.23,-0.64l-0.52,-0.24l-1.35,0.4l-0.34,0.55l-2.69,-0.28l-0.37,-0.35l-0.02,-0.9l-0.65,-0.35l0.45,-0.64l-0.03,-0.53l-2.12,-2.44l-0.76,-0.01l-2.0,1.16l-0.78,-0.15l-0.8,-0.67l-1.21,0.23Z", "name": "Mali"}, "MN": {"path": "M676.61,146.48l3.81,1.68l5.67,-1.0l2.37,0.41l2.34,1.5l1.79,1.75l2.29,-0.03l3.12,0.52l2.47,-0.81l3.41,-0.59l3.53,-2.21l1.25,0.29l1.53,1.13l2.27,-0.21l-2.66,5.01l0.64,1.68l0.47,0.21l1.32,-0.38l2.38,0.48l2.02,-1.11l1.76,0.89l2.06,2.02l-0.13,0.53l-1.72,-0.29l-3.77,0.46l-1.88,0.99l-1.76,1.99l-3.71,1.17l-2.45,1.6l-3.83,-0.87l-0.41,0.17l-1.31,1.99l1.04,2.24l-1.52,0.9l-1.74,1.57l-2.79,1.02l-3.78,0.13l-4.05,1.05l-2.77,1.52l-1.16,-0.85l-2.94,0.0l-3.62,-1.79l-2.58,-0.49l-3.4,0.41l-5.12,-0.67l-2.63,0.06l-1.31,-1.6l-1.4,-3.0l-1.48,-0.33l-3.13,-1.94l-6.16,-0.93l-0.71,-1.06l0.86,-3.82l-1.93,-2.71l-3.5,-1.18l-1.95,-1.58l-0.5,-1.72l2.34,-0.52l4.75,-2.8l3.62,-1.47l2.18,0.97l2.46,0.05l1.81,1.53l2.46,0.12l3.95,0.71l2.43,-2.28l0.08,-0.48l-0.9,-1.72l2.24,-2.98l2.62,1.27l4.94,1.17l0.43,2.24Z", "name": "Mongolia"}, "MK": {"path": "M472.8,173.98l0.49,-0.71l3.57,-0.71l1.0,0.77l0.13,1.45l-0.65,0.53l-1.15,-0.05l-1.12,0.67l-1.39,0.22l-0.79,-0.55l-0.29,-1.03l0.19,-0.6Z", "name": "Macedonia"}, "MW": {"path": "M505.5,309.31l0.85,1.95l0.15,2.86l-0.69,1.65l0.71,1.8l0.06,1.28l0.49,0.64l0.07,1.06l0.4,0.55l0.8,-0.23l0.55,0.61l0.69,-0.21l0.34,0.6l0.19,2.94l-1.04,0.62l-0.54,1.25l-1.11,-1.08l-0.16,-1.56l0.51,-1.31l-0.32,-1.3l-0.99,-0.65l-0.82,0.12l-2.36,-1.64l0.63,-1.96l0.82,-1.18l-0.46,-2.01l0.9,-2.86l-0.94,-2.51l0.96,0.18l0.29,0.4Z", "name": "Malawi"}, "MR": {"path": "M407.36,220.66l-2.58,0.03l-0.39,0.44l2.42,22.56l0.36,0.43l-0.39,1.24l-9.75,0.04l-0.56,0.53l-0.91,-0.11l-1.27,0.45l-1.61,-0.66l-0.97,0.03l-0.36,0.29l-0.38,1.35l-0.42,0.23l-2.93,-3.4l-2.96,-1.52l-1.62,-0.03l-1.27,0.54l-1.12,-0.2l-0.65,0.4l-0.08,-0.49l0.68,-1.29l0.31,-2.43l-0.57,-3.91l0.23,-1.21l-0.69,-1.5l-1.15,-1.02l0.25,-0.39l9.58,0.02l0.4,-0.45l-0.46,-3.68l0.47,-1.04l2.12,-0.21l0.36,-0.4l-0.08,-6.4l7.81,0.13l0.41,-0.4l0.01,-3.31l7.76,5.35Z", "name": "Mauritania"}, "UG": {"path": "M498.55,276.32l0.7,-0.46l1.65,0.5l1.96,-0.57l1.7,0.01l1.45,-0.98l0.91,1.33l1.33,3.95l-2.57,4.03l-1.46,-0.4l-2.54,0.91l-1.37,1.61l-0.01,0.81l-2.42,-0.01l-2.26,1.01l-0.17,-1.59l0.58,-1.04l0.14,-1.94l1.37,-2.28l1.78,-1.58l-0.17,-0.65l-0.72,-0.24l0.13,-2.43Z", "name": "Uganda"}, "MY": {"path": "M717.47,273.46l-1.39,0.65l-2.12,-0.41l-2.88,-0.0l-0.38,0.28l-0.84,2.75l-0.99,0.96l-1.21,3.29l-1.73,0.45l-2.45,-0.68l-1.39,0.31l-1.33,1.15l-1.59,-0.14l-1.41,0.44l-1.44,-1.19l-0.18,-0.73l1.34,0.53l1.93,-0.47l0.75,-2.22l4.02,-1.03l2.75,-3.21l0.82,0.94l0.64,-0.05l0.4,-0.65l0.96,0.06l0.42,-0.36l0.24,-2.68l1.81,-1.64l1.21,-1.86l0.63,-0.01l1.07,1.05l0.34,1.28l3.44,1.35l-0.06,0.35l-1.37,0.1l-0.35,0.54l0.32,0.88ZM673.68,269.59l0.17,1.09l0.47,0.33l1.65,-0.3l0.87,-0.94l1.61,1.52l0.98,1.56l-0.12,2.81l0.41,2.29l0.95,0.9l0.88,2.44l-1.27,0.12l-5.1,-3.67l-0.34,-1.29l-1.37,-1.59l-0.33,-1.97l-0.88,-1.4l0.25,-1.68l-0.46,-1.05l1.63,0.84Z", "name": "Malaysia"}, "MX": {"path": "M133.12,200.41l0.2,0.47l9.63,3.33l6.96,-0.02l0.4,-0.4l0.0,-0.74l3.77,0.0l3.55,2.93l1.39,2.83l1.52,1.04l2.08,0.82l0.47,-0.14l1.46,-2.0l1.73,-0.04l1.59,0.98l2.05,3.35l1.47,1.56l1.26,3.14l2.18,1.02l2.26,0.58l-1.18,3.72l-0.42,5.04l1.79,4.89l1.62,1.89l0.61,1.52l1.2,1.42l2.55,0.66l1.37,1.1l7.54,-1.89l1.86,-1.3l1.14,-4.3l4.1,-1.21l3.57,-0.11l0.32,0.3l-0.06,0.94l-1.26,1.45l-0.67,1.71l0.38,0.7l-0.72,2.27l-0.49,-0.3l-1.0,0.08l-1.0,1.39l-0.47,-0.11l-0.53,0.47l-4.26,-0.02l-0.4,0.4l-0.0,1.06l-1.1,0.26l0.1,0.44l1.82,1.44l0.56,0.91l-3.19,0.21l-1.21,2.09l0.24,0.72l-0.2,0.44l-2.24,-2.18l-1.45,-0.93l-2.22,-0.69l-1.52,0.22l-3.07,1.16l-10.55,-3.85l-2.86,-1.96l-3.78,-0.92l-1.08,-1.19l-2.62,-1.43l-1.18,-1.54l-0.38,-0.81l0.66,-0.63l-0.18,-0.53l0.52,-0.76l0.01,-0.91l-2.0,-3.82l-2.21,-2.63l-2.53,-2.09l-1.19,-1.62l-2.2,-1.17l-0.3,-0.43l0.34,-1.48l-0.21,-0.45l-1.23,-0.6l-1.36,-1.2l-0.59,-1.78l-1.54,-0.47l-2.44,-2.55l-0.16,-0.9l-1.33,-2.03l-0.84,-1.99l-0.16,-1.33l-1.81,-1.1l-0.97,0.05l-1.31,-0.7l-0.57,0.22l-0.4,1.12l0.72,3.77l3.51,3.89l0.28,0.78l0.53,0.26l0.41,1.43l1.33,1.73l1.58,1.41l0.8,2.39l1.43,2.41l0.13,1.32l0.37,0.36l1.04,0.08l1.67,2.28l-0.85,0.76l-0.66,-1.51l-1.68,-1.54l-2.91,-1.87l0.06,-1.82l-0.54,-1.68l-2.91,-2.03l-0.55,0.09l-1.95,-1.1l-0.88,-0.94l0.68,-0.08l0.93,-1.01l0.08,-1.78l-1.93,-1.94l-1.46,-0.77l-3.75,-7.56l4.88,-0.42Z", "name": "Mexico"}, "VU": {"path": "M839.04,322.8l0.22,1.14l-0.44,0.03l-0.2,-1.45l0.42,0.27Z", "name": "Vanuatu"}, "FR": {"path": "M444.48,172.62l-0.64,1.78l-0.58,-0.31l-0.49,-1.72l0.4,-0.89l1.0,-0.72l0.3,1.85ZM429.64,147.1l1.78,1.58l1.46,-0.13l2.1,1.42l1.35,0.27l1.23,0.83l3.04,0.5l-1.03,1.85l-0.3,2.12l-0.41,0.32l-0.95,-0.24l-0.5,0.43l0.06,0.61l-1.81,1.92l-0.04,1.42l0.55,0.38l0.88,-0.36l0.61,0.97l-0.03,1.0l0.57,0.91l-0.75,1.09l0.65,2.39l1.27,0.57l-0.18,0.82l-2.01,1.53l-4.77,-0.8l-3.82,1.0l-0.53,1.85l-2.49,0.34l-2.71,-1.31l-1.16,0.57l-4.31,-1.29l-0.72,-0.86l1.19,-1.78l0.39,-6.45l-2.58,-3.3l-1.9,-1.66l-3.72,-1.23l-0.19,-1.72l2.81,-0.61l4.12,0.81l0.47,-0.48l-0.6,-2.77l1.94,0.95l5.83,-2.54l0.92,-2.74l1.6,-0.49l0.24,0.78l1.36,0.33l1.05,1.19ZM289.01,278.39l-0.81,0.8l-0.78,0.12l-0.5,-0.66l-0.56,-0.1l-0.91,0.6l-0.46,-0.22l1.09,-2.96l-0.96,-1.77l-0.17,-1.49l1.07,-1.77l2.32,0.75l2.51,2.01l0.3,0.74l-2.14,3.96Z", "name": "France"}, "FI": {"path": "M492.17,76.39l-0.23,3.5l3.52,2.63l-2.08,2.88l-0.02,0.44l2.8,4.56l-1.59,3.31l2.16,3.24l-0.94,2.39l0.14,0.47l3.44,2.51l-0.77,1.62l-7.52,6.95l-4.5,0.31l-4.38,1.37l-3.8,0.74l-1.44,-1.96l-2.17,-1.11l0.5,-3.66l-1.16,-3.33l1.09,-2.08l2.21,-2.42l5.67,-4.32l1.64,-0.83l0.21,-0.42l-0.46,-2.02l-3.38,-1.89l-0.75,-1.43l-0.22,-6.74l-6.79,-4.8l0.8,-0.62l2.54,2.12l3.46,-0.12l3.0,0.96l2.51,-2.11l1.17,-3.08l3.55,-1.38l2.76,1.53l-0.95,2.79Z", "name": "Finland"}, "FJ": {"path": "M871.53,326.34l-2.8,1.05l-0.08,-0.23l2.97,-1.21l-0.1,0.39ZM867.58,329.25l0.43,0.37l-0.27,0.88l-1.24,0.28l-1.04,-0.24l-0.14,-0.66l0.63,-0.58l0.92,0.26l0.7,-0.31Z", "name": "Fiji"}, "FK": {"path": "M274.36,425.85l1.44,1.08l-0.47,0.73l-3.0,0.89l-0.96,-1.0l-0.52,-0.05l-1.83,1.29l-0.73,-0.88l2.46,-1.64l1.93,0.76l1.67,-1.19Z", "name": "Falkland Is."}, "NI": {"path": "M202.33,252.67l0.81,-0.18l1.03,-1.02l-0.04,-0.88l0.68,-0.0l0.63,-0.54l0.97,0.22l1.53,-1.26l0.58,-0.99l1.17,0.34l2.41,-0.94l0.13,1.32l-0.81,1.94l0.1,2.74l-0.36,0.37l-0.11,1.75l-0.47,0.81l0.18,1.14l-1.73,-0.85l-0.71,0.27l-1.47,-0.6l-0.52,0.16l-4.01,-3.81Z", "name": "Nicaragua"}, "NL": {"path": "M430.31,143.39l0.6,-0.5l2.13,-4.8l3.2,-1.33l1.74,0.08l0.33,0.8l-0.59,2.92l-0.5,0.99l-1.26,0.0l-0.4,0.45l0.33,2.7l-2.2,-1.78l-2.62,0.58l-0.75,-0.11Z", "name": "Netherlands"}, "NO": {"path": "M491.44,67.41l6.8,2.89l-2.29,0.86l-0.15,0.65l2.33,2.38l-4.98,1.79l0.84,-2.45l-0.18,-0.48l-3.55,-1.8l-3.89,1.52l-1.42,3.38l-2.12,1.72l-2.64,-1.0l-3.11,0.21l-2.66,-2.22l-0.5,-0.01l-1.41,1.1l-1.44,0.17l-0.35,0.35l-0.32,2.47l-4.32,-0.64l-0.44,0.29l-0.58,2.11l-2.45,0.2l-4.15,7.68l-3.88,5.76l0.78,1.62l-0.64,1.16l-2.24,-0.06l-0.38,0.24l-1.66,3.89l0.15,5.17l1.57,2.04l-0.78,4.16l-2.02,2.48l-0.85,1.63l-1.3,-1.75l-0.58,-0.07l-4.87,4.19l-3.1,0.79l-3.16,-1.7l-0.85,-3.77l-0.77,-8.55l2.14,-2.31l6.55,-3.27l5.02,-4.17l10.63,-13.84l10.98,-8.7l5.35,-1.91l4.34,0.12l3.69,-3.64l4.49,0.19l4.37,-0.89ZM484.55,20.04l4.26,1.75l-3.1,2.55l-7.1,0.65l-7.08,-0.9l-0.37,-1.31l-0.37,-0.29l-3.44,-0.1l-2.08,-2.0l6.87,-1.44l3.9,1.31l2.39,-1.64l6.13,1.4ZM481.69,33.93l-4.45,1.74l-3.54,-0.99l1.12,-0.9l0.05,-0.58l-1.06,-1.22l4.22,-0.89l1.09,1.97l2.57,0.87ZM466.44,24.04l7.43,3.77l-5.41,1.86l-1.58,4.08l-2.26,1.2l-1.12,4.11l-2.61,0.18l-4.79,-2.86l1.84,-1.54l-0.1,-0.68l-3.69,-1.53l-4.77,-4.51l-1.73,-3.89l6.11,-1.82l1.54,1.92l3.57,-0.08l1.2,-1.96l3.32,-0.18l3.05,1.92Z", "name": "Norway"}, "NA": {"path": "M474.26,330.66l-0.97,0.04l-0.38,0.4l-0.07,8.9l-2.09,0.08l-0.39,0.4l-0.0,17.42l-1.98,1.23l-1.17,0.17l-2.44,-0.66l-0.48,-1.13l-0.99,-0.74l-0.54,0.05l-0.9,1.01l-1.53,-1.68l-0.93,-1.88l-1.99,-8.56l-0.06,-3.12l-0.33,-1.52l-2.3,-3.34l-1.91,-4.83l-1.96,-2.43l-0.12,-1.57l2.33,-0.79l1.43,0.07l1.81,1.13l10.23,-0.25l1.84,1.23l5.87,0.35ZM474.66,330.64l6.51,-1.6l1.9,0.39l-1.69,0.4l-1.31,0.83l-1.12,-0.94l-4.29,0.92Z", "name": "Namibia"}, "NC": {"path": "M838.78,341.24l-0.33,0.22l-2.9,-1.75l-3.26,-3.37l1.65,0.83l4.85,4.07Z", "name": "New Caledonia"}, "NE": {"path": "M454.75,226.53l1.33,1.37l0.48,0.07l1.27,-0.7l0.53,3.52l0.94,0.83l0.17,0.92l0.81,0.69l-0.44,0.95l-0.96,5.26l-0.13,3.22l-3.04,2.31l-1.22,3.57l1.02,1.24l-0.0,1.46l0.39,0.4l1.13,0.04l-0.9,1.25l-1.47,-2.42l-0.86,-0.29l-2.09,1.37l-1.74,-0.67l-1.45,-0.17l-0.85,0.35l-1.36,-0.07l-1.64,1.09l-1.06,0.05l-2.94,-1.28l-1.44,0.59l-1.01,-0.03l-0.97,-0.94l-2.7,-0.98l-2.69,0.3l-0.87,0.64l-0.47,1.6l-0.75,1.16l-0.12,1.53l-1.57,-1.1l-1.31,0.24l0.03,-0.81l-0.32,-0.41l-2.59,-0.52l-0.15,-1.16l-1.35,-1.6l-0.29,-1.0l0.13,-0.84l1.29,-0.08l1.08,-0.92l3.31,-0.22l2.22,-0.41l0.32,-0.34l0.2,-1.47l1.39,-1.88l-0.01,-5.66l3.36,-1.12l7.24,-5.12l8.42,-4.92l3.69,1.06Z", "name": "Niger"}, "NG": {"path": "M456.32,253.89l0.64,0.65l-0.28,1.04l-2.11,2.01l-2.03,5.18l-1.37,1.16l-1.15,3.18l-1.33,0.66l-1.46,-0.97l-1.21,0.16l-1.38,1.36l-0.91,0.24l-1.79,4.06l-2.33,0.81l-1.11,-0.07l-0.86,0.5l-1.71,-0.05l-1.19,-1.39l-0.89,-1.89l-1.77,-1.66l-3.95,-0.08l0.07,-5.21l0.42,-1.43l1.95,-2.3l-0.14,-0.91l0.43,-1.18l-0.53,-1.41l0.25,-2.92l0.72,-1.07l0.32,-1.34l0.46,-0.39l2.47,-0.28l2.34,0.89l1.15,1.02l1.28,0.04l1.22,-0.58l3.03,1.27l1.49,-0.14l1.36,-1.0l1.33,0.07l0.82,-0.35l3.45,0.8l1.82,-1.32l1.84,2.67l0.66,0.16Z", "name": "Nigeria"}, "NZ": {"path": "M857.8,379.65l1.86,3.12l0.44,0.18l0.3,-0.38l0.03,-1.23l0.38,0.27l0.57,2.31l2.02,0.94l1.81,0.27l1.57,-1.06l0.7,0.18l-1.15,3.59l-1.98,0.11l-0.74,1.2l0.2,1.11l-2.42,3.98l-1.49,0.92l-1.04,-0.85l1.21,-2.05l-0.81,-2.01l-2.63,-1.25l0.04,-0.57l1.82,-1.19l0.43,-2.34l-0.16,-2.03l-0.95,-1.82l-0.06,-0.72l-3.11,-3.64l-0.79,-1.52l1.56,1.45l1.76,0.66l0.65,2.34ZM853.83,393.59l0.57,1.24l0.59,0.16l1.42,-0.97l0.46,0.79l0.0,1.03l-2.47,3.48l-1.26,1.2l-0.06,0.5l0.55,0.87l-1.41,0.07l-2.33,1.38l-2.03,5.02l-3.02,2.16l-2.06,-0.06l-1.71,-1.04l-2.47,-0.2l-0.27,-0.73l1.22,-2.1l3.05,-2.94l1.62,-0.59l4.02,-2.82l1.57,-1.67l1.07,-2.16l0.88,-0.7l0.48,-1.75l1.24,-0.97l0.35,0.79Z", "name": "New Zealand"}, "NP": {"path": "M641.14,213.62l0.01,3.19l-1.74,0.04l-4.8,-0.86l-1.58,-1.39l-3.37,-0.34l-7.65,-3.7l0.8,-2.09l2.33,-1.7l1.77,0.75l2.49,1.76l1.38,0.41l0.99,1.35l1.9,0.52l1.99,1.17l5.49,0.9Z", "name": "Nepal"}, "CI": {"path": "M407.4,259.27l0.86,0.42l0.56,0.9l1.13,0.53l1.19,-0.61l0.97,-0.08l1.42,0.54l0.6,3.24l-1.03,2.08l-0.65,2.84l1.06,2.33l-0.06,0.53l-2.54,-0.47l-1.66,0.03l-3.06,0.46l-4.11,1.6l0.32,-3.06l-1.18,-1.31l-1.32,-0.66l0.42,-0.85l-0.2,-1.4l0.5,-0.67l0.01,-1.59l0.84,-0.32l0.26,-0.5l-1.15,-3.01l0.12,-0.5l0.51,-0.25l0.66,0.31l1.93,0.02l0.67,-0.71l0.71,-0.14l0.25,0.69l0.57,0.22l1.4,-0.61Z", "name": "C\u00f4te d'Ivoire"}, "CH": {"path": "M444.62,156.35l-0.29,0.87l0.18,0.53l1.13,0.58l1.0,0.1l-0.1,0.65l-0.79,0.38l-1.72,-0.37l-0.45,0.23l-0.45,1.04l-0.75,0.06l-0.84,-0.4l-1.32,1.0l-0.96,0.12l-0.88,-0.55l-0.81,-1.3l-0.49,-0.16l-0.63,0.26l0.02,-0.65l1.71,-1.66l0.1,-0.56l0.93,0.08l0.58,-0.46l1.99,0.02l0.66,-0.61l2.19,0.79Z", "name": "Switzerland"}, "CO": {"path": "M242.07,254.93l-1.7,0.59l-0.59,1.18l-1.7,1.69l-0.38,1.93l-0.67,1.43l0.31,0.57l1.03,0.13l0.25,0.9l0.57,0.64l-0.04,2.34l1.64,1.42l3.16,-0.24l1.26,0.28l1.67,2.06l0.41,0.13l4.09,-0.39l0.45,0.22l-0.92,1.95l-0.2,1.8l0.52,1.83l0.75,1.05l-1.12,1.1l0.07,0.63l0.84,0.51l0.74,1.29l-0.39,-0.45l-0.59,-0.01l-0.71,0.74l-4.71,-0.05l-0.4,0.41l0.03,1.57l0.33,0.39l1.11,0.2l-1.68,0.4l-0.29,0.38l-0.01,1.82l1.16,1.14l0.34,1.25l-1.05,7.05l-1.04,-0.87l1.26,-1.99l-0.13,-0.56l-2.18,-1.23l-1.38,0.2l-1.14,-0.38l-1.27,0.61l-1.55,-0.26l-1.38,-2.46l-1.23,-0.75l-0.85,-1.2l-1.67,-1.19l-0.86,0.13l-2.11,-1.32l-1.01,0.31l-1.8,-0.29l-0.52,-0.91l-3.09,-1.68l0.77,-0.52l-0.1,-1.12l0.41,-0.64l1.34,-0.32l2.0,-2.88l-0.11,-0.57l-0.66,-0.43l0.39,-1.38l-0.52,-2.1l0.49,-0.83l-0.4,-2.13l-0.97,-1.35l0.17,-0.66l0.86,-0.08l0.47,-0.75l-0.46,-1.63l1.41,-0.07l1.8,-1.69l0.93,-0.24l0.3,-0.38l0.45,-2.76l1.22,-1.0l1.44,-0.04l0.45,-0.5l1.91,0.12l2.93,-1.84l1.15,-1.14l0.91,0.46l-0.25,0.45Z", "name": "Colombia"}, "CN": {"path": "M740.23,148.97l4.57,1.3l2.8,2.17l0.98,2.9l0.38,0.27l3.8,0.0l2.32,-1.28l3.29,-0.75l-0.96,2.09l-1.02,1.28l-0.85,3.4l-1.52,2.73l-2.76,-0.5l-2.4,1.13l-0.21,0.45l0.64,2.57l-0.32,3.2l-0.94,0.06l-0.37,0.89l-0.91,-1.01l-0.64,0.07l-0.92,1.57l-3.73,1.25l-0.26,0.48l0.26,1.06l-1.5,-0.08l-1.09,-0.86l-0.56,0.06l-1.67,2.06l-2.7,1.56l-2.03,1.88l-3.4,0.83l-1.93,1.4l-1.15,0.34l0.33,-0.7l-0.41,-0.89l1.79,-1.79l0.02,-0.54l-1.32,-1.56l-0.48,-0.1l-2.24,1.09l-2.83,2.06l-1.51,1.83l-2.28,0.13l-1.55,1.49l-0.04,0.5l1.32,1.97l2.0,0.58l0.31,1.35l1.98,0.84l3.0,-1.96l2.0,1.02l1.49,0.11l0.22,0.83l-3.37,0.86l-1.12,1.48l-2.5,1.52l-1.29,1.99l0.14,0.56l2.57,1.48l0.97,2.7l3.17,4.63l-0.03,1.66l-1.35,0.65l-0.2,0.51l0.6,1.47l1.4,0.91l-0.89,3.82l-1.43,0.38l-3.85,6.44l-2.27,3.11l-6.78,4.57l-2.73,0.29l-1.45,1.04l-0.62,-0.61l-0.55,-0.01l-1.36,1.25l-3.39,1.27l-2.61,0.4l-1.1,2.79l-0.81,0.09l-0.49,-1.42l0.5,-0.85l-0.25,-0.59l-3.36,-0.84l-1.3,0.4l-2.31,-0.62l-0.94,-0.84l0.33,-1.28l-0.3,-0.49l-2.19,-0.46l-1.13,-0.93l-0.47,-0.02l-2.06,1.36l-4.29,0.28l-2.76,1.05l-0.28,0.43l0.32,2.53l-0.59,-0.03l-0.19,-1.34l-0.55,-0.34l-1.68,0.7l-2.46,-1.23l0.62,-1.87l-0.26,-0.51l-1.37,-0.44l-0.54,-2.22l-0.45,-0.3l-2.13,0.35l0.24,-2.48l2.39,-2.4l0.03,-4.31l-1.19,-0.92l-0.78,-1.49l-0.41,-0.21l-1.41,0.19l-1.98,-0.3l0.46,-1.07l-1.17,-1.7l-0.55,-0.11l-1.63,1.05l-2.25,-0.57l-2.89,1.73l-2.25,1.98l-1.75,0.29l-1.17,-0.71l-3.31,-0.65l-1.48,0.79l-1.04,1.27l-0.12,-1.17l-0.54,-0.34l-1.44,0.54l-5.55,-0.86l-1.98,-1.16l-1.89,-0.54l-0.99,-1.35l-1.34,-0.37l-2.55,-1.79l-2.01,-0.84l-1.21,0.56l-5.57,-3.45l-0.53,-2.31l1.19,0.25l0.48,-0.37l0.08,-1.42l-0.98,-1.56l0.15,-2.44l-2.69,-3.32l-4.12,-1.23l-0.67,-2.0l-1.92,-1.48l-0.38,-0.7l-0.51,-3.01l-1.52,-0.66l-0.7,0.13l-0.48,-2.05l0.55,-0.51l-0.09,-0.82l2.03,-1.19l1.6,-0.54l2.56,0.38l0.42,-0.22l0.85,-1.7l3.0,-0.33l1.1,-1.26l4.05,-1.77l0.39,-0.91l-0.17,-1.44l1.45,-0.67l0.2,-0.52l-2.07,-4.9l4.51,-1.12l1.37,-0.73l1.89,-5.51l4.98,0.86l1.51,-1.7l0.11,-2.87l1.99,-0.38l1.83,-2.06l0.49,-0.13l0.68,2.08l2.23,1.77l3.44,1.16l1.55,2.29l-0.92,3.49l0.96,1.67l6.54,1.13l2.95,1.87l1.47,0.35l1.06,2.62l1.53,1.91l3.05,0.08l5.14,0.67l3.37,-0.41l2.36,0.43l3.65,1.8l3.06,0.04l1.45,0.88l2.87,-1.59l3.95,-1.02l3.83,-0.14l3.06,-1.14l1.77,-1.6l1.72,-1.01l0.17,-0.49l-1.1,-2.05l1.02,-1.54l4.02,0.8l2.45,-1.61l3.76,-1.19l1.96,-2.13l1.63,-0.83l3.51,-0.4l1.92,0.34l0.46,-0.3l0.17,-1.5l-2.27,-2.22l-2.11,-1.09l-2.18,1.11l-2.32,-0.47l-1.29,0.32l-0.4,-0.82l2.73,-5.16l3.02,1.06l3.53,-2.06l0.18,-1.68l2.16,-3.35l1.49,-1.35l-0.03,-1.85l-1.07,-0.85l1.54,-1.26l2.98,-0.59l3.23,-0.09l3.64,0.99l2.04,1.16l3.29,6.71l0.92,3.19ZM696.92,237.31l-1.87,1.08l-1.63,-0.64l-0.06,-1.79l1.03,-0.98l2.58,-0.69l1.16,0.05l0.3,0.54l-0.98,1.06l-0.53,1.37Z", "name": "China"}, "CM": {"path": "M457.92,257.49l1.05,1.91l-1.4,0.16l-1.05,-0.23l-0.45,0.22l-0.54,1.19l0.08,0.45l1.48,1.47l1.05,0.45l1.01,2.46l-1.52,2.99l-0.68,0.68l-0.13,3.69l2.38,3.84l1.09,0.8l0.24,2.48l-3.67,-1.14l-11.27,-0.13l0.23,-1.79l-0.98,-1.66l-1.19,-0.54l-0.44,-0.97l-0.6,-0.42l1.71,-4.27l0.75,-0.13l1.38,-1.36l0.65,-0.03l1.71,0.99l1.93,-1.12l1.14,-3.18l1.38,-1.17l2.0,-5.14l2.17,-2.13l0.3,-1.64l-0.86,-0.88l0.03,-0.33l0.94,1.28l0.07,3.22Z", "name": "Cameroon"}, "CL": {"path": "M246.5,429.18l-3.14,1.83l-0.57,3.16l-0.64,0.05l-2.68,-1.06l-2.82,-2.33l-3.04,-1.89l-0.69,-1.85l0.63,-2.14l-1.21,-2.11l-0.31,-5.37l1.01,-2.91l2.57,-2.38l-0.18,-0.68l-3.16,-0.77l2.05,-2.47l0.77,-4.65l2.32,0.9l0.54,-0.29l1.31,-6.31l-0.22,-0.44l-1.68,-0.8l-0.56,0.28l-0.7,3.36l-0.81,-0.22l1.56,-9.41l1.15,-2.24l-0.71,-2.82l-0.18,-2.84l1.01,-0.33l3.26,-9.14l1.07,-4.22l-0.56,-4.21l0.74,-2.34l-0.29,-3.27l1.46,-3.34l2.04,-16.59l-0.66,-7.76l1.03,-0.53l0.54,-0.9l0.79,1.14l0.32,1.78l1.25,1.16l-0.69,2.55l1.33,2.9l0.97,3.59l0.46,0.29l1.5,-0.3l0.11,0.23l-0.76,2.44l-2.57,1.23l-0.23,0.37l0.08,4.33l-0.46,0.77l0.56,1.21l-1.58,1.51l-1.68,2.62l-0.89,2.47l0.2,2.7l-1.48,2.73l1.12,5.09l0.64,0.61l-0.01,2.29l-1.38,2.68l0.01,2.4l-1.89,2.04l0.02,2.75l0.69,2.57l-1.43,1.13l-1.26,5.68l0.39,3.51l-0.97,0.89l0.58,3.5l1.02,1.14l-0.65,1.02l0.15,0.57l1.0,0.53l0.16,0.69l-1.03,0.85l0.26,1.75l-0.89,4.03l-1.31,2.66l0.24,1.75l-0.71,1.83l-1.99,1.7l0.3,3.67l0.88,1.19l1.58,0.01l0.01,2.21l1.04,1.95l5.98,0.63ZM248.69,430.79l0.0,7.33l0.4,0.4l3.52,0.05l-0.44,0.75l-1.94,0.98l-2.49,-0.37l-1.88,-1.06l-2.55,-0.49l-5.59,-3.71l-2.38,-2.63l4.1,2.48l3.32,1.23l0.45,-0.12l1.29,-1.57l0.83,-2.32l2.05,-1.24l1.31,0.29Z", "name": "Chile"}, "CA": {"path": "M280.06,145.6l-1.67,2.88l0.07,0.49l0.5,0.04l1.46,-0.98l1.0,0.42l-0.56,0.72l0.17,0.62l2.22,0.89l1.35,-0.71l1.95,0.78l-0.66,2.01l0.5,0.51l1.32,-0.42l0.98,3.17l-0.91,2.41l-0.8,0.08l-1.23,-0.45l0.47,-2.25l-0.89,-0.83l-0.48,0.06l-2.78,2.63l-0.34,-0.02l1.02,-0.85l-0.14,-0.69l-2.4,-0.77l-7.4,0.08l-0.17,-0.41l1.3,-0.94l0.02,-0.64l-0.73,-0.58l1.85,-1.74l2.57,-5.16l1.47,-1.79l1.99,-1.05l0.46,0.06l-1.53,2.45ZM68.32,74.16l4.13,0.95l4.02,2.14l2.61,0.4l2.47,-1.89l2.88,-1.31l3.85,0.48l3.71,-1.94l3.82,-1.04l1.56,1.68l0.49,0.08l1.87,-1.04l0.65,-1.98l1.24,0.35l4.16,3.94l0.54,0.01l2.75,-2.49l0.26,2.59l0.49,0.35l3.08,-0.73l1.04,-1.27l2.73,0.23l3.83,1.86l5.86,1.61l3.47,0.75l2.44,-0.26l2.73,1.78l-2.98,1.81l-0.19,0.41l0.31,0.32l4.53,0.92l6.87,-0.5l2.0,-0.69l2.49,2.39l0.53,0.02l2.72,-2.16l-0.02,-0.64l-2.16,-1.54l1.15,-1.06l4.83,-0.61l1.84,0.95l2.48,2.31l3.01,-0.23l4.55,1.92l3.85,-0.67l3.61,0.1l0.41,-0.44l-0.25,-2.36l1.79,-0.61l3.49,1.32l-0.01,3.77l0.31,0.39l0.45,-0.22l1.48,-3.16l1.74,0.1l0.41,-0.3l1.13,-4.37l-2.78,-3.11l-2.8,-1.74l0.19,-4.64l2.71,-3.07l2.98,0.67l2.41,1.95l3.19,4.8l-1.99,1.97l0.21,0.68l4.33,0.84l-0.01,4.15l0.25,0.37l0.44,-0.09l3.07,-3.15l2.54,2.39l-0.61,3.33l2.42,2.88l0.61,0.0l2.61,-3.08l1.88,-3.82l0.17,-4.58l6.72,0.94l3.13,2.04l0.13,1.82l-1.76,2.19l-0.01,0.49l1.66,2.16l-0.26,1.71l-4.68,2.8l-3.28,0.61l-2.47,-1.2l-0.55,0.23l-0.73,2.04l-2.38,3.43l-0.74,1.77l-2.74,2.57l-3.44,0.25l-2.21,1.78l-0.28,2.53l-2.82,0.55l-3.12,3.22l-2.72,4.31l-1.03,3.17l-0.14,4.31l0.33,0.41l3.44,0.57l2.24,5.95l0.45,0.23l3.4,-0.69l4.52,1.51l2.43,1.31l1.91,1.73l3.1,0.96l2.62,1.46l6.6,0.54l-0.35,2.74l0.81,3.53l1.81,3.78l3.83,3.3l0.45,0.04l2.1,-1.28l1.37,-3.69l-1.31,-5.38l-1.45,-1.58l3.57,-1.47l2.84,-2.46l1.52,-2.8l-0.25,-2.55l-1.7,-3.07l-2.85,-2.61l2.8,-3.95l-1.08,-3.37l-0.79,-5.67l1.36,-0.7l6.76,1.41l2.12,-0.96l5.12,3.36l1.05,1.61l4.08,0.26l-0.06,2.87l0.83,4.7l0.3,0.32l2.16,0.54l1.73,2.06l0.5,0.09l3.63,-2.03l2.52,-4.19l1.26,-1.32l7.6,11.72l-0.92,2.04l0.16,0.51l3.3,1.97l2.22,1.98l4.1,0.98l1.43,0.99l0.95,2.79l2.1,0.68l0.84,1.08l0.17,3.45l-3.37,2.26l-4.22,1.24l-3.06,2.63l-4.06,0.51l-5.35,-0.69l-6.39,0.2l-2.3,2.41l-3.26,1.51l-6.47,7.15l-0.06,0.48l0.44,0.19l2.13,-0.52l4.17,-4.24l5.12,-2.62l3.52,-0.3l1.69,1.21l-2.12,2.21l0.81,3.47l1.02,2.61l3.47,1.6l4.14,-0.45l2.15,-2.8l0.26,1.48l1.14,0.8l-2.56,1.69l-5.5,1.82l-2.54,1.27l-2.74,2.15l-1.4,-0.16l-0.07,-2.01l4.14,-2.44l0.18,-0.45l-0.39,-0.29l-6.63,0.45l-1.39,-1.49l-0.14,-4.43l-1.11,-0.91l-1.82,0.39l-0.66,-0.66l-0.6,0.03l-1.91,2.39l-0.82,2.52l-0.8,1.27l-1.67,0.56l-0.46,0.76l-8.31,0.07l-1.21,0.62l-2.35,1.97l-0.71,-0.14l-1.37,0.96l-1.12,-0.48l-4.74,1.26l-0.9,1.17l0.21,0.62l1.73,0.3l-1.81,0.31l-1.85,0.81l-2.11,-0.13l-2.95,1.78l-0.69,-0.09l1.39,-2.1l1.73,-1.21l0.1,-2.29l1.16,-1.99l0.49,0.53l2.03,0.42l1.2,-1.16l0.02,-0.47l-2.66,-3.51l-2.28,-0.61l-5.64,-0.71l-0.4,-0.57l-0.79,0.13l0.2,-0.41l-0.22,-0.55l-0.68,-0.26l0.19,-1.26l-0.78,-0.73l0.31,-0.64l-0.29,-0.57l-2.6,-0.44l-0.75,-1.63l-0.94,-0.66l-4.31,-0.65l-1.13,1.19l-1.48,0.59l-0.85,1.06l-2.83,-0.76l-2.09,0.39l-2.39,-0.97l-4.24,-0.7l-0.57,-0.4l-0.41,-1.63l-0.4,-0.3l-0.85,0.02l-0.39,0.4l-0.01,0.85l-69.13,-0.01l-6.51,-4.52l-4.5,-1.38l-1.26,-2.66l0.33,-1.93l-0.23,-0.43l-3.01,-1.35l-0.55,-2.77l-2.89,-2.38l-0.04,-1.45l1.39,-1.83l-0.28,-2.55l-4.16,-2.2l-4.07,-6.6l-4.02,-3.22l-1.3,-1.88l-0.5,-0.13l-2.51,1.21l-2.23,1.87l-3.85,-3.88l-2.44,-1.04l-2.22,-0.13l0.03,-37.49ZM260.37,148.65l3.04,0.76l2.26,1.2l-3.78,-0.95l-1.53,-1.01ZM249.4,3.81l6.68,0.49l5.32,0.79l4.26,1.57l-0.07,1.1l-5.85,2.53l-6.02,1.21l-2.39,1.39l-0.18,0.45l0.39,0.29l4.01,-0.02l-4.65,2.82l-4.2,1.74l-4.19,4.59l-5.03,0.92l-1.67,1.15l-7.47,0.59l-0.37,0.37l0.32,0.42l2.41,0.49l-0.81,0.47l-0.12,0.59l1.83,2.41l-2.02,1.59l-3.81,1.51l-1.32,2.16l-3.38,1.53l-0.22,0.48l0.35,1.19l0.4,0.29l3.88,-0.18l0.03,0.61l-6.33,2.95l-6.41,-1.4l-7.43,0.79l-3.72,-0.62l-4.4,-0.25l-0.23,-1.83l4.29,-1.11l0.28,-0.51l-1.1,-3.45l1.0,-0.25l6.58,2.28l0.47,-0.16l-0.05,-0.49l-3.41,-3.45l-3.58,-0.98l1.48,-1.55l4.34,-1.29l0.97,-2.19l-0.16,-0.48l-3.42,-2.13l-0.81,-2.26l6.2,0.22l2.24,0.58l3.91,-2.1l0.2,-0.43l-0.35,-0.32l-5.64,-0.67l-8.73,0.36l-4.26,-1.9l-2.12,-2.4l-2.78,-1.66l-0.41,-1.52l3.31,-1.03l2.93,-0.2l4.91,-0.99l3.7,-2.27l2.87,0.3l2.62,1.67l0.56,-0.14l1.82,-3.2l3.13,-0.94l4.44,-0.69l7.53,-0.26l1.48,0.67l7.19,-1.06l10.8,0.79ZM203.85,57.54l0.01,0.42l1.97,2.97l0.68,-0.02l2.24,-3.72l5.95,-1.86l4.01,4.64l-0.35,2.91l0.5,0.43l4.95,-1.36l2.32,-1.8l5.31,2.28l3.27,2.11l0.3,1.84l0.48,0.33l4.42,-0.99l2.64,2.87l5.97,1.77l2.06,1.72l2.11,3.71l-4.19,1.86l-0.01,0.73l5.9,2.83l3.94,0.94l3.78,3.95l3.46,0.25l-0.63,2.37l-4.11,4.47l-2.76,-1.56l-3.9,-3.94l-3.59,0.41l-0.33,0.34l-0.19,2.72l2.63,2.38l3.42,1.89l0.94,0.97l1.55,3.75l-0.7,2.29l-2.74,-0.92l-6.25,-3.15l-0.51,0.13l0.05,0.52l6.07,5.69l0.18,0.59l-6.09,-1.39l-5.31,-2.24l-2.63,-1.66l0.6,-0.77l-0.12,-0.6l-7.39,-4.01l-0.59,0.37l0.03,0.79l-6.73,0.6l-1.69,-1.1l1.36,-2.46l4.51,-0.07l5.15,-0.52l0.31,-0.6l-0.74,-1.3l0.78,-1.84l3.21,-4.05l-0.67,-2.35l-1.11,-1.6l-3.84,-2.1l-4.35,-1.28l0.91,-0.63l0.06,-0.61l-2.65,-2.75l-2.34,-0.36l-1.89,-1.46l-0.53,0.03l-1.24,1.23l-4.36,0.55l-9.04,-0.99l-9.26,-1.98l-1.6,-1.22l2.22,-1.77l0.13,-0.44l-0.38,-0.27l-3.22,-0.02l-0.72,-4.25l1.83,-4.04l2.42,-1.85l5.5,-1.1l-1.39,2.35ZM261.19,159.33l2.07,0.61l1.44,-0.04l-1.15,0.63l-2.94,-1.23l-0.4,-0.68l0.36,-0.37l0.61,1.07ZM230.83,84.39l-2.37,0.18l-0.49,-1.63l0.93,-2.09l1.94,-0.51l1.62,0.99l0.02,1.52l-1.66,1.54ZM229.43,58.25l0.11,0.65l-4.87,-0.21l-2.72,0.62l-3.1,-2.57l0.08,-1.26l0.86,-0.23l5.57,0.51l4.08,2.5ZM222.0,105.02l-0.72,1.49l-0.63,-0.19l-0.48,-0.84l0.81,-0.99l0.65,0.05l0.37,0.46ZM183.74,38.32l2.9,1.7l4.79,-0.01l1.84,1.46l-0.49,1.68l0.23,0.48l2.82,1.14l1.76,1.26l7.01,0.65l4.1,-1.1l5.03,-0.43l3.93,0.35l2.48,1.77l0.46,1.7l-1.3,1.1l-3.56,1.01l-3.23,-0.59l-7.17,0.76l-5.09,0.09l-3.99,-0.6l-6.42,-1.54l-0.79,-2.51l-0.3,-2.49l-2.64,-2.5l-5.32,-0.72l-2.52,-1.4l0.68,-1.57l4.78,0.31ZM207.38,91.35l0.4,1.56l0.56,0.26l1.06,-0.52l1.32,0.96l5.42,2.57l0.2,1.68l0.46,0.35l1.68,-0.28l1.15,0.85l-1.55,0.87l-3.61,-0.88l-1.32,-1.69l-0.57,-0.06l-2.45,2.1l-3.12,1.79l-0.7,-1.87l-0.42,-0.26l-2.16,0.24l1.39,-1.39l0.32,-3.14l0.76,-3.35l1.18,0.22ZM215.49,102.6l-2.67,1.95l-1.4,-0.07l-0.3,-0.58l1.53,-1.48l2.84,0.18ZM202.7,24.12l2.53,1.59l-2.87,1.4l-4.53,4.05l-4.25,0.38l-5.03,-0.68l-2.45,-2.04l0.03,-1.62l1.82,-1.37l0.14,-0.45l-0.38,-0.27l-4.45,0.04l-2.59,-1.76l-1.41,-2.29l1.57,-2.32l1.62,-1.66l2.44,-0.39l0.25,-0.65l-0.6,-0.74l4.86,-0.25l3.24,3.11l8.16,2.3l1.9,3.61ZM187.47,59.2l-2.76,3.49l-2.38,-0.15l-1.44,-3.84l0.04,-2.2l1.19,-1.88l2.3,-1.23l5.07,0.17l4.11,1.02l-3.24,3.72l-2.88,0.89ZM186.07,48.79l-1.08,1.53l-3.34,-0.34l-2.56,-1.1l1.03,-1.75l3.25,-1.23l1.95,1.58l0.75,1.3ZM185.71,35.32l-5.3,-0.2l-0.32,-0.71l4.31,0.07l1.3,0.84ZM180.68,32.48l-3.34,1.0l-1.79,-1.1l-0.98,-1.87l-0.15,-1.73l4.1,0.53l2.67,1.7l-0.51,1.47ZM180.9,76.31l-1.1,1.08l-3.13,-1.23l-2.12,0.43l-2.71,-1.57l1.72,-1.09l1.55,-1.72l3.81,1.9l1.98,2.2ZM169.74,54.87l2.96,0.97l4.17,-0.57l0.41,0.88l-2.14,2.11l0.09,0.64l3.55,1.92l-0.4,3.72l-3.79,1.65l-2.17,-0.35l-1.72,-1.74l-6.02,-3.5l0.03,-0.85l4.68,0.54l0.4,-0.21l-0.05,-0.45l-2.48,-2.81l2.46,-1.95ZM174.45,40.74l1.37,1.73l0.07,2.44l-1.05,3.45l-3.79,0.47l-2.32,-0.69l0.05,-2.64l-0.44,-0.41l-3.68,0.35l-0.12,-3.1l2.45,0.1l3.67,-1.73l3.41,0.29l0.37,-0.26ZM170.05,31.55l0.67,1.56l-3.33,-0.49l-4.22,-1.77l-4.35,-0.16l1.4,-0.94l-0.06,-0.7l-2.81,-1.23l-0.12,-1.39l4.39,0.68l6.62,1.98l1.81,2.47ZM134.5,58.13l-1.02,1.82l0.45,0.58l5.4,-1.39l3.33,2.29l0.49,-0.03l2.6,-2.23l1.94,1.32l2.0,4.5l0.7,0.06l1.3,-2.29l-1.63,-4.46l1.69,-0.54l2.31,0.71l2.65,1.81l2.49,7.92l8.48,4.27l-0.19,1.35l-3.79,0.33l-0.26,0.67l1.4,1.49l-0.58,1.1l-4.23,-0.64l-4.43,-1.19l-3.0,0.28l-4.66,1.47l-10.52,1.04l-1.43,-2.02l-3.42,-1.2l-2.21,0.43l-2.51,-2.86l4.84,-1.05l3.6,0.19l3.27,-0.78l0.31,-0.39l-0.31,-0.39l-4.84,-1.06l-8.79,0.27l-0.85,-1.07l5.26,-1.66l0.27,-0.45l-0.4,-0.34l-3.8,0.06l-3.81,-1.06l1.81,-3.01l1.66,-1.79l6.48,-2.81l1.97,0.71ZM158.7,56.61l-1.7,2.44l-3.2,-2.75l0.37,-0.3l3.11,-0.18l1.42,0.79ZM149.61,42.73l1.01,1.89l0.5,0.18l2.14,-0.82l2.23,0.19l0.36,2.04l-1.33,2.09l-8.28,0.76l-6.35,2.15l-3.41,0.1l-0.19,-0.96l4.9,-2.08l0.23,-0.46l-0.41,-0.31l-11.25,0.59l-2.89,-0.74l3.04,-4.44l2.14,-1.32l6.81,1.69l4.58,3.06l4.37,0.39l0.36,-0.63l-3.36,-4.6l1.85,-1.53l2.18,0.51l0.77,2.26ZM144.76,34.41l-4.36,1.44l-3.0,-1.4l1.46,-1.24l3.47,-0.52l2.96,0.71l-0.52,1.01ZM145.13,29.83l-1.9,0.66l-3.67,-0.0l2.27,-1.61l3.3,0.95ZM118.92,65.79l-6.03,2.02l-1.33,-1.9l-5.38,-2.28l2.59,-5.05l2.16,-3.14l-0.02,-0.48l-1.97,-2.41l7.64,-0.7l3.6,1.02l6.3,0.27l4.42,2.95l-2.53,0.98l-6.24,3.43l-3.1,3.28l-0.11,2.01ZM129.54,35.53l-0.28,3.37l-1.72,1.62l-2.33,0.28l-4.61,2.19l-3.86,0.76l-2.64,-0.87l3.72,-3.4l5.01,-3.34l3.72,0.07l3.0,-0.67ZM111.09,152.69l-0.67,0.24l-3.85,-1.37l-0.83,-1.17l-2.12,-1.07l-0.66,-1.02l-2.4,-0.55l-0.74,-1.71l6.02,1.45l2.0,2.55l2.52,1.39l0.73,1.27ZM87.8,134.64l0.89,0.29l1.86,-0.21l-0.65,3.34l1.69,2.33l-1.31,-1.33l-0.99,-1.62l-1.17,-0.98l-0.33,-1.82Z", "name": "Canada"}, "CG": {"path": "M466.72,276.48l-0.1,1.03l-1.25,2.97l-0.19,3.62l-0.46,1.78l-0.23,0.63l-1.61,1.19l-1.21,1.39l-1.09,2.43l0.04,2.09l-3.25,3.24l-0.5,-0.24l-0.5,-0.83l-1.36,-0.02l-0.98,0.89l-1.68,-0.99l-1.54,1.24l-1.52,-1.96l1.57,-1.14l0.11,-0.52l-0.77,-1.35l2.1,-0.66l0.39,-0.73l1.05,0.82l2.21,0.11l1.12,-1.37l0.37,-1.81l-0.27,-2.09l-1.13,-1.5l1.0,-2.69l-0.13,-0.45l-0.92,-0.58l-1.6,0.17l-0.51,-0.94l0.1,-0.61l2.75,0.09l3.97,1.24l0.51,-0.33l0.17,-1.28l1.24,-2.21l1.28,-1.14l2.76,0.49Z", "name": "Congo"}, "CF": {"path": "M461.16,278.2l-0.26,-1.19l-1.09,-0.77l-0.84,-1.17l-0.29,-1.0l-1.04,-1.15l0.08,-3.43l0.58,-0.49l1.16,-2.35l1.85,-0.17l0.61,-0.62l0.97,0.58l3.15,-0.96l2.48,-1.92l0.02,-0.96l2.81,0.02l2.36,-1.17l1.93,-2.85l1.16,-0.93l1.11,-0.3l0.27,0.86l1.34,1.47l-0.39,2.01l0.3,1.01l4.01,2.75l0.17,0.93l2.63,2.31l0.6,1.44l2.08,1.4l-3.84,-0.21l-1.94,0.88l-1.23,-0.49l-2.67,1.2l-1.29,-0.18l-0.51,0.36l-0.6,1.22l-3.35,-0.65l-1.57,-0.91l-2.42,-0.83l-1.45,0.91l-0.97,1.27l-0.26,1.56l-3.22,-0.43l-1.49,1.33l-0.94,1.62Z", "name": "Central African Rep."}, "CD": {"path": "M487.01,272.38l2.34,-0.14l1.35,1.84l1.34,0.45l0.86,-0.39l1.21,0.12l1.07,-0.41l0.54,0.89l2.04,1.54l-0.14,2.72l0.7,0.54l-1.38,1.13l-1.53,2.54l-0.17,2.05l-0.59,1.08l-0.02,1.72l-0.72,0.84l-0.66,3.01l0.63,1.32l-0.44,4.26l0.64,1.47l-0.37,1.22l0.86,1.8l1.53,1.41l0.3,1.26l0.44,0.5l-4.08,0.75l-0.92,1.81l0.51,1.34l-0.74,5.43l0.17,0.38l2.45,1.46l0.54,-0.1l0.12,1.62l-1.28,-0.01l-1.85,-2.35l-1.94,-0.45l-0.48,-1.13l-0.55,-0.2l-1.41,0.74l-1.71,-0.3l-1.01,-1.18l-2.49,-0.19l-0.44,-0.77l-1.98,-0.21l-2.88,0.36l0.11,-2.41l-0.85,-1.13l-0.16,-1.36l0.32,-1.73l-0.46,-0.89l-0.04,-1.49l-0.4,-0.39l-2.53,0.02l0.1,-0.41l-0.39,-0.49l-1.28,0.01l-0.43,0.45l-1.62,0.32l-0.83,1.79l-1.09,-0.28l-2.4,0.52l-1.37,-1.91l-1.3,-3.3l-0.38,-0.27l-7.39,-0.03l-2.46,0.42l0.5,-0.45l0.37,-1.47l0.66,-0.38l0.92,0.08l0.73,-0.82l0.87,0.02l0.31,0.68l1.4,0.36l3.59,-3.63l0.01,-2.23l1.02,-2.29l2.69,-2.39l0.43,-0.99l0.49,-1.96l0.17,-3.51l1.25,-2.95l0.36,-3.14l0.86,-1.13l1.1,-0.66l3.57,1.73l3.65,0.73l0.46,-0.21l0.8,-1.46l1.24,0.19l2.61,-1.17l0.81,0.44l1.04,-0.03l0.59,-0.66l0.7,-0.16l1.81,0.25Z", "name": "Dem. Rep. Congo"}, "CZ": {"path": "M458.46,144.88l1.22,1.01l1.47,0.23l0.13,0.93l1.36,0.68l0.54,-0.2l0.24,-0.55l1.15,0.25l0.53,1.09l1.68,0.18l0.6,0.84l-1.04,0.73l-0.96,1.28l-1.6,0.17l-0.55,0.56l-1.04,-0.46l-1.05,0.15l-2.12,-0.96l-1.05,0.34l-1.2,1.12l-1.56,-0.87l-2.57,-2.1l-0.53,-1.88l4.7,-2.52l0.71,0.26l0.9,-0.28Z", "name": "Czech Rep."}, "CY": {"path": "M504.36,193.47l0.43,0.28l-1.28,0.57l-0.92,-0.28l-0.24,-0.46l2.01,-0.13Z", "name": "Cyprus"}, "CR": {"path": "M211.34,258.05l0.48,0.99l1.6,1.6l-0.54,0.45l0.29,1.42l-0.25,1.19l-1.09,-0.59l-0.05,-1.25l-2.46,-1.42l-0.28,-0.77l-0.66,-0.45l-0.45,-0.0l-0.11,1.04l-1.32,-0.95l0.31,-1.3l-0.36,-0.6l0.31,-0.27l1.42,0.58l1.29,-0.14l0.56,0.56l0.74,0.17l0.55,-0.27Z", "name": "Costa Rica"}, "CU": {"path": "M221.21,227.25l1.27,1.02l2.19,-0.28l4.43,3.33l2.08,0.43l-0.1,0.38l0.36,0.5l1.75,0.1l1.48,0.84l-3.11,0.51l-4.15,-0.03l0.77,-0.67l-0.04,-0.64l-1.2,-0.74l-1.49,-0.16l-0.7,-0.61l-0.56,-1.4l-0.4,-0.25l-1.34,0.1l-2.2,-0.66l-0.88,-0.58l-3.18,-0.4l-0.27,-0.16l0.58,-0.74l-0.36,-0.29l-2.72,-0.05l-1.7,1.29l-0.91,0.03l-0.61,0.69l-1.01,0.22l1.11,-1.29l1.01,-0.52l3.69,-1.01l3.98,0.21l2.21,0.84Z", "name": "Cuba"}, "SZ": {"path": "M500.35,351.36l0.5,2.04l-0.38,0.89l-1.05,0.21l-1.23,-1.2l-0.02,-0.64l0.83,-1.57l1.34,0.27Z", "name": "Swaziland"}, "SY": {"path": "M511.0,199.79l0.05,-1.33l0.54,-1.36l1.28,-0.99l0.13,-0.45l-0.41,-1.11l-1.14,-0.36l-0.19,-1.74l0.52,-1.0l1.29,-1.21l0.2,-1.18l0.59,0.23l2.62,-0.76l1.36,0.52l2.06,-0.01l2.95,-1.08l3.25,-0.26l-0.67,0.94l-1.28,0.66l-0.21,0.4l0.23,2.01l-0.88,3.19l-10.15,5.73l-2.15,-0.85Z", "name": "Syria"}, "KG": {"path": "M621.35,172.32l-3.87,1.69l-0.96,1.18l-3.04,0.34l-1.13,1.86l-2.36,-0.35l-1.99,0.63l-2.39,1.4l0.06,0.95l-0.4,0.37l-4.52,0.43l-3.02,-0.93l-2.37,0.17l0.11,-0.79l2.32,0.42l1.13,-0.88l1.99,0.2l3.21,-2.14l-0.03,-0.69l-2.97,-1.57l-1.94,0.65l-1.22,-0.74l1.71,-1.58l-0.12,-0.67l-0.36,-0.15l0.32,-0.77l1.36,-0.35l4.02,1.02l0.49,-0.3l0.35,-1.59l1.09,-0.48l3.42,1.22l1.11,-0.31l7.64,0.39l1.16,1.0l1.23,0.39Z", "name": "Kyrgyzstan"}, "KE": {"path": "M506.26,284.69l1.87,-2.56l0.93,-2.15l-1.38,-4.08l-1.06,-1.6l2.82,-2.75l0.79,0.26l0.12,1.41l0.86,0.83l1.9,0.11l3.28,2.13l3.57,0.44l1.05,-1.12l1.96,-0.9l0.82,0.68l1.16,0.09l-1.78,2.45l0.03,9.12l1.3,1.94l-1.37,0.78l-0.67,1.03l-1.08,0.46l-0.34,1.67l-0.81,1.07l-0.45,1.55l-0.68,0.56l-3.2,-2.23l-0.35,-1.58l-8.86,-4.98l0.14,-1.6l-0.57,-1.04Z", "name": "Kenya"}, "SS": {"path": "M481.71,263.34l1.07,-0.72l1.2,-3.18l1.36,-0.26l1.61,1.99l0.87,0.34l1.1,-0.41l1.5,0.07l0.57,0.53l2.49,0.0l0.44,-0.63l1.07,-0.4l0.45,-0.84l0.59,-0.33l1.9,1.33l1.6,-0.2l2.83,-3.33l-0.32,-2.21l1.59,-0.52l-0.24,1.6l0.3,1.83l1.35,1.18l0.2,1.87l0.35,0.41l0.02,1.53l-0.23,0.47l-1.42,0.25l-0.85,1.44l0.3,0.6l1.4,0.16l1.11,1.08l0.59,1.13l1.03,0.53l1.28,2.36l-4.41,3.98l-1.74,0.01l-1.89,0.55l-1.47,-0.52l-1.15,0.57l-2.96,-2.62l-1.3,0.49l-1.06,-0.15l-0.79,0.39l-0.82,-0.22l-1.8,-2.7l-1.91,-1.1l-0.66,-1.5l-2.62,-2.32l-0.18,-0.94l-2.37,-1.6Z", "name": "S. Sudan"}, "SR": {"path": "M283.12,270.19l2.1,0.53l-1.08,1.95l0.2,1.72l0.93,1.49l-0.59,2.03l-0.43,0.71l-1.12,-0.42l-1.32,0.22l-0.93,-0.2l-0.46,0.26l-0.25,0.73l0.33,0.7l-0.89,-0.13l-1.39,-1.97l-0.31,-1.34l-0.97,-0.31l-0.89,-1.47l0.35,-1.61l1.45,-0.82l0.33,-1.87l2.61,0.44l0.57,-0.47l1.75,-0.16Z", "name": "Suriname"}, "KH": {"path": "M689.52,249.39l0.49,1.45l-0.28,2.74l-4.0,1.86l-0.16,0.6l0.68,0.95l-2.06,0.17l-2.05,0.97l-1.82,-0.32l-2.12,-3.7l-0.55,-2.85l1.4,-1.85l3.02,-0.45l2.23,0.35l2.01,0.98l0.51,-0.14l0.95,-1.48l1.74,0.74Z", "name": "Cambodia"}, "SV": {"path": "M195.8,250.13l1.4,-1.19l2.24,1.45l0.98,-0.27l0.44,0.2l-0.27,1.05l-1.14,-0.03l-3.64,-1.21Z", "name": "El Salvador"}, "SK": {"path": "M476.82,151.17l-1.14,1.9l-2.73,-0.92l-0.82,0.2l-0.74,0.8l-3.46,0.73l-0.47,0.69l-1.76,0.33l-1.88,-1.0l-0.18,-0.81l0.38,-0.75l1.87,-0.32l1.74,-1.89l0.83,0.16l0.79,-0.34l1.51,1.04l1.34,-0.63l1.25,0.3l1.65,-0.42l1.81,0.95Z", "name": "Slovakia"}, "KR": {"path": "M737.51,185.84l0.98,-0.1l0.87,-1.17l2.69,-0.32l0.33,-0.29l1.76,2.79l0.58,1.76l0.02,3.12l-0.8,1.32l-2.21,0.55l-1.93,1.13l-1.8,0.19l-0.2,-1.1l0.43,-2.28l-0.95,-2.56l1.43,-0.37l0.23,-0.62l-1.43,-2.06Z", "name": "Korea"}, "SI": {"path": "M456.18,162.07l-0.51,-1.32l0.18,-1.05l1.69,0.2l1.42,-0.71l2.09,-0.07l0.62,-0.51l0.21,0.47l-1.61,0.67l-0.44,1.34l-0.66,0.24l-0.26,0.82l-1.22,-0.49l-0.84,0.46l-0.69,-0.04Z", "name": "Slovenia"}, "KP": {"path": "M736.77,185.16l-0.92,-0.42l-0.88,0.62l-1.21,-0.88l0.96,-1.15l0.59,-2.59l-0.46,-0.74l-2.09,-0.77l1.64,-1.52l2.72,-1.58l1.58,-1.91l1.11,0.78l2.17,0.11l0.41,-0.5l-0.3,-1.22l3.52,-1.18l0.94,-1.4l0.98,1.08l-2.19,2.18l0.01,2.14l-1.06,0.54l-1.41,1.4l-1.7,0.52l-1.25,1.09l-0.14,1.98l0.94,0.45l1.15,1.04l-0.13,0.26l-2.6,0.29l-1.13,1.29l-1.22,0.08Z", "name": "Dem. Rep. Korea"}, "SO": {"path": "M525.13,288.48l-1.13,-1.57l-0.03,-8.86l2.66,-3.38l1.67,-0.13l2.13,-1.69l3.41,-0.23l7.08,-7.55l2.91,-3.69l0.08,-4.82l2.98,-0.67l1.24,-0.86l0.45,-0.0l-0.2,3.0l-1.21,3.62l-2.73,5.97l-2.13,3.65l-5.03,6.16l-8.56,6.4l-2.78,3.08l-0.8,1.56Z", "name": "Somalia"}, "SN": {"path": "M390.09,248.21l0.12,1.55l0.49,1.46l0.96,0.82l0.05,1.28l-1.26,-0.19l-0.75,0.33l-1.84,-0.61l-5.84,-0.13l-2.54,0.51l-0.22,-1.03l1.77,0.04l2.01,-0.91l1.03,0.48l1.09,0.04l1.29,-0.62l0.14,-0.58l-0.51,-0.74l-1.81,0.25l-1.13,-0.63l-0.79,0.04l-0.72,0.61l-2.31,0.06l-0.92,-1.77l-0.81,-0.64l0.64,-0.35l2.46,-3.74l1.04,0.19l1.38,-0.56l1.19,-0.02l2.72,1.37l3.03,3.48Z", "name": "Senegal"}, "SL": {"path": "M394.46,264.11l-1.73,1.98l-0.58,1.33l-2.07,-1.06l-1.22,-1.26l-0.65,-2.39l1.16,-0.96l0.67,-1.17l1.21,-0.52l1.66,0.0l1.03,1.64l0.52,2.41Z", "name": "Sierra Leone"}, "SB": {"path": "M826.69,311.6l-0.61,0.09l-0.2,-0.33l0.37,0.15l0.44,0.09ZM824.18,307.38l-0.26,-0.3l-0.31,-0.91l0.03,0.0l0.54,1.21ZM823.04,309.33l-1.66,-0.22l-0.2,-0.52l1.16,0.28l0.69,0.46ZM819.28,304.68l1.14,0.65l0.02,0.03l-0.81,-0.44l-0.35,-0.23Z", "name": "Solomon Is."}, "SA": {"path": "M537.53,210.34l2.0,0.24l0.9,1.32l1.49,-0.06l0.87,2.08l1.29,0.76l0.51,0.99l1.56,1.03l-0.1,1.9l0.32,0.9l1.58,2.47l0.76,0.53l0.7,-0.04l1.68,4.23l7.53,1.33l0.51,-0.29l0.77,1.25l-1.55,4.87l-7.29,2.52l-7.3,1.03l-2.34,1.17l-1.88,2.74l-0.76,0.28l-0.82,-0.78l-0.91,0.12l-2.88,-0.51l-3.51,0.25l-0.86,-0.56l-0.57,0.15l-0.66,1.27l0.16,1.11l-0.43,0.32l-0.93,-1.4l-0.33,-1.16l-1.23,-0.88l-1.27,-2.06l-0.78,-2.22l-1.73,-1.79l-1.14,-0.48l-1.54,-2.31l-0.21,-3.41l-1.44,-2.93l-1.27,-1.16l-1.33,-0.57l-1.31,-3.37l-0.77,-0.67l-0.97,-1.97l-2.8,-4.03l-1.06,-0.17l0.37,-1.96l0.2,-0.72l2.74,0.3l1.08,-0.84l0.6,-0.94l1.74,-0.35l0.65,-1.03l0.71,-0.4l0.1,-0.62l-2.06,-2.28l4.39,-1.22l0.48,-0.37l2.77,0.69l3.66,1.9l7.03,5.5l4.87,0.3Z", "name": "Saudi Arabia"}, "SE": {"path": "M480.22,89.3l-4.03,1.17l-2.43,2.86l0.26,2.57l-8.77,6.64l-1.78,5.79l1.78,2.68l2.22,1.96l-2.07,3.77l-2.72,1.13l-0.95,6.04l-1.29,3.01l-2.74,-0.31l-0.4,0.22l-1.31,2.59l-2.34,0.13l-0.75,-3.09l-2.08,-4.03l-1.83,-4.96l1.0,-1.93l2.14,-2.7l0.83,-4.45l-1.6,-2.17l-0.15,-4.94l1.48,-3.39l2.58,-0.15l0.87,-1.59l-0.78,-1.57l3.76,-5.59l4.04,-7.48l2.17,0.01l0.39,-0.29l0.57,-2.07l4.37,0.64l0.46,-0.34l0.33,-2.56l1.1,-0.13l6.94,4.87l0.06,6.32l0.66,1.36Z", "name": "Sweden"}, "SD": {"path": "M505.98,259.4l-0.34,-0.77l-1.17,-0.9l-0.26,-1.61l0.29,-1.81l-0.34,-0.46l-1.16,-0.17l-0.54,0.59l-1.23,0.11l-0.28,0.65l0.53,0.65l0.17,1.22l-2.44,3.0l-0.96,0.19l-2.39,-1.4l-0.95,0.52l-0.38,0.78l-1.11,0.41l-0.29,0.5l-1.94,0.0l-0.54,-0.52l-1.81,-0.09l-0.95,0.4l-2.45,-2.35l-2.07,0.54l-0.73,1.26l-0.6,2.1l-1.25,0.58l-0.75,-0.62l0.27,-2.65l-1.48,-1.78l-0.22,-1.48l-0.92,-0.96l-0.02,-1.29l-0.57,-1.16l-0.68,-0.16l0.69,-1.29l-0.18,-1.14l0.65,-0.62l0.03,-0.55l-0.36,-0.41l1.55,-2.97l1.91,0.16l0.43,-0.4l-0.1,-10.94l2.49,-0.01l0.4,-0.4l-0.0,-4.82l29.02,0.0l0.64,2.04l-0.49,0.66l0.36,2.69l0.93,3.16l2.12,1.55l-0.89,1.04l-1.72,0.39l-0.98,0.9l-1.43,5.65l0.24,1.15l-0.38,2.06l-0.96,2.38l-1.53,1.31l-1.32,2.91l-1.22,0.86l-0.37,1.34Z", "name": "Sudan"}, "DO": {"path": "M241.8,239.2l0.05,-0.65l-0.46,-0.73l0.42,-0.44l0.19,-1.0l-0.09,-1.53l1.66,0.01l1.99,0.63l0.33,0.67l1.28,0.19l0.33,0.76l1.0,0.08l0.8,0.62l-0.45,0.51l-1.13,-0.47l-1.88,-0.01l-1.27,0.59l-0.75,-0.55l-1.01,0.54l-0.79,1.4l-0.23,-0.61Z", "name": "Dominican Rep."}, "DJ": {"path": "M528.43,256.18l-0.45,0.66l-0.58,-0.25l-1.51,0.13l-0.18,-1.01l1.45,-1.95l0.83,0.17l0.77,-0.44l0.2,1.0l-1.2,0.51l-0.06,0.7l0.73,0.47Z", "name": "Djibouti"}, "DK": {"path": "M452.28,129.07l-1.19,2.24l-2.13,-1.6l-0.23,-0.95l2.98,-0.95l0.57,1.26ZM447.74,126.31l-0.26,0.57l-0.88,-0.07l-1.8,2.53l0.48,1.69l-1.09,0.36l-1.61,-0.39l-0.89,-1.69l-0.07,-3.43l0.96,-1.73l2.02,-0.2l1.09,-1.07l1.33,-0.67l-0.05,1.06l-0.73,1.41l0.3,1.0l1.2,0.64Z", "name": "Denmark"}, "DE": {"path": "M453.14,155.55l-0.55,-0.36l-1.2,-0.1l-1.87,0.57l-2.13,-0.13l-0.56,0.63l-0.86,-0.6l-0.96,0.09l-2.57,-0.93l-0.85,0.67l-1.47,-0.02l0.24,-1.75l1.23,-2.14l-0.28,-0.59l-3.52,-0.58l-0.92,-0.66l0.12,-1.2l-0.48,-0.88l0.27,-2.17l-0.37,-3.03l1.41,-0.22l0.63,-1.26l0.66,-3.19l-0.41,-1.18l0.26,-0.39l1.66,-0.15l0.33,0.54l0.62,0.07l1.7,-1.69l-0.54,-3.02l1.37,0.33l1.31,-0.37l0.31,1.18l2.25,0.71l-0.02,0.92l0.5,0.4l2.55,-0.65l1.34,-0.87l2.57,1.24l1.06,0.98l0.48,1.44l-0.57,0.74l-0.0,0.48l0.87,1.15l0.57,1.64l-0.14,1.29l0.82,1.7l-1.5,-0.07l-0.56,0.57l-4.47,2.15l-0.22,0.54l0.68,2.26l2.58,2.16l-0.66,1.11l-0.79,0.36l-0.23,0.43l0.32,1.87Z", "name": "Germany"}, "YE": {"path": "M528.27,246.72l0.26,-0.42l-0.22,-1.01l0.19,-1.5l0.92,-0.69l-0.07,-1.35l0.39,-0.75l1.01,0.47l3.34,-0.27l3.76,0.41l0.95,0.81l1.36,-0.58l1.74,-2.62l2.18,-1.09l6.86,-0.94l2.48,5.41l-1.64,0.76l-0.56,1.9l-6.23,2.16l-2.29,1.8l-1.93,0.05l-1.41,1.02l-4.24,0.74l-1.72,1.49l-3.28,0.19l-0.52,-1.18l0.02,-1.51l-1.34,-3.29Z", "name": "Yemen"}, "AT": {"path": "M462.89,152.8l0.04,2.25l-1.07,0.0l-0.33,0.63l0.36,0.51l-1.04,2.13l-2.02,0.07l-1.33,0.7l-5.29,-0.99l-0.47,-0.93l-0.44,-0.21l-2.47,0.55l-0.42,0.51l-3.18,-0.81l0.43,-0.91l1.12,0.78l0.6,-0.17l0.25,-0.58l1.93,0.12l1.86,-0.56l1.0,0.08l0.68,0.57l0.62,-0.15l0.26,-0.77l-0.3,-1.78l0.8,-0.44l0.68,-1.15l1.52,0.85l0.47,-0.06l1.34,-1.25l0.64,-0.17l1.81,0.92l1.28,-0.11l0.7,0.37Z", "name": "Austria"}, "DZ": {"path": "M441.46,188.44l-0.32,1.07l0.39,2.64l-0.54,2.16l-1.58,1.82l0.37,2.39l1.91,1.55l0.18,0.8l1.42,1.03l1.84,7.23l0.12,1.16l-0.57,5.0l0.2,1.51l-0.87,0.99l-0.02,0.51l1.41,1.86l0.14,1.2l0.89,1.48l0.5,0.16l0.98,-0.41l1.73,1.08l0.82,1.23l-8.22,4.81l-7.23,5.11l-3.43,1.13l-2.3,0.21l-0.28,-1.59l-2.56,-1.09l-0.67,-1.25l-26.12,-17.86l0.01,-3.47l3.77,-1.88l2.44,-0.41l2.12,-0.75l1.08,-1.42l2.81,-1.05l0.35,-2.08l1.33,-0.29l1.04,-0.94l3.47,-0.69l0.46,-1.08l-0.1,-0.45l-0.58,-0.52l-0.82,-2.81l-0.19,-1.83l-0.78,-1.49l2.03,-1.31l2.63,-0.48l1.7,-1.22l2.31,-0.84l8.24,-0.73l1.49,0.38l2.28,-1.1l2.46,-0.02l0.92,0.6l1.35,-0.05Z", "name": "Algeria"}, "US": {"path": "M892.72,99.2l1.31,0.53l1.41,-0.37l1.89,0.98l1.89,0.42l-1.32,0.58l-2.9,-1.53l-2.08,0.22l-0.26,-0.15l0.07,-0.67ZM183.22,150.47l0.37,1.47l1.12,0.85l4.23,0.7l2.39,0.98l2.17,-0.38l1.85,0.5l-1.55,0.65l-3.49,2.61l-0.16,0.77l0.5,0.39l2.33,-0.61l1.77,1.02l5.15,-2.4l-0.31,0.65l0.25,0.56l1.36,0.38l1.71,1.16l4.7,-0.88l0.67,0.85l1.31,0.21l0.58,0.58l-1.34,0.17l-2.18,-0.32l-3.6,0.89l-2.71,3.25l0.35,0.9l0.59,-0.0l0.55,-0.6l-1.36,4.65l0.29,3.09l0.67,1.58l0.61,0.45l1.77,-0.44l1.6,-1.96l0.14,-2.21l-0.82,-1.96l0.11,-1.13l1.19,-2.37l0.44,-0.33l0.48,0.75l0.4,-0.29l0.4,-1.37l0.6,-0.47l0.24,-0.8l1.69,0.49l1.65,1.08l-0.03,2.37l-1.27,1.13l-0.0,1.13l0.87,0.36l1.66,-1.29l0.5,0.17l0.5,2.6l-2.49,3.75l0.17,0.61l1.54,0.62l1.48,0.17l1.92,-0.44l4.72,-2.15l2.16,-1.8l-0.05,-1.24l0.75,-0.22l3.92,0.36l2.12,-1.05l0.21,-0.4l-0.28,-1.48l3.27,-2.4l8.32,-0.02l0.56,-0.82l1.9,-0.77l0.93,-1.51l0.74,-2.37l1.58,-1.98l0.92,0.62l1.47,-0.47l0.8,0.66l-0.0,4.09l1.96,2.6l-2.34,1.31l-5.37,2.09l-1.83,2.72l0.02,1.79l0.83,1.59l0.54,0.23l-6.19,0.94l-2.2,0.89l-0.23,0.48l0.45,0.29l2.99,-0.46l-2.19,0.56l-1.13,0.0l-0.15,-0.32l-0.48,0.08l-0.76,0.82l0.22,0.67l0.32,0.06l-0.41,1.62l-1.27,1.58l-1.48,-1.07l-0.49,-0.04l-0.16,0.46l0.52,1.58l0.61,0.59l0.03,0.79l-0.95,1.38l-1.21,-1.22l-0.27,-2.27l-0.35,-0.35l-0.42,0.25l-0.48,1.27l0.33,1.41l-0.97,-0.27l-0.48,0.24l0.18,0.5l1.52,0.83l0.1,2.52l0.79,0.51l0.52,3.42l-1.42,1.88l-2.47,0.8l-1.71,1.66l-1.31,0.25l-1.27,1.03l-0.43,0.99l-2.69,1.78l-2.64,3.03l-0.45,2.12l0.45,2.08l0.85,2.38l1.09,1.9l0.04,1.2l1.16,3.06l-0.18,2.69l-0.55,1.43l-0.47,0.21l-0.89,-0.23l-0.49,-1.18l-0.87,-0.56l-2.75,-5.16l0.48,-1.68l-0.72,-1.78l-2.01,-2.38l-1.12,-0.53l-2.72,1.18l-1.47,-1.35l-1.57,-0.68l-2.99,0.31l-2.17,-0.3l-2.0,0.19l-1.15,0.46l-0.19,0.58l0.39,0.63l0.14,1.34l-0.84,-0.2l-0.84,0.46l-1.58,-0.07l-2.08,-1.44l-2.09,0.33l-1.91,-0.62l-3.73,0.84l-2.39,2.07l-2.54,1.22l-1.45,1.41l-0.61,1.38l0.34,3.71l-0.29,0.02l-3.5,-1.33l-1.25,-3.11l-1.44,-1.5l-2.24,-3.56l-1.76,-1.09l-2.27,-0.01l-1.71,2.07l-1.76,-0.69l-1.16,-0.74l-1.52,-2.98l-3.93,-3.16l-4.34,-0.0l-0.4,0.4l-0.0,0.74l-6.5,0.02l-9.02,-3.14l-0.34,-0.71l-5.7,0.49l-0.43,-1.29l-1.62,-1.61l-1.14,-0.38l-0.55,-0.88l-1.28,-0.13l-1.01,-0.77l-2.22,-0.27l-0.43,-0.3l-0.36,-1.58l-2.4,-2.83l-2.01,-3.85l-0.06,-0.9l-2.92,-3.26l-0.33,-2.29l-1.3,-1.66l0.52,-2.37l-0.09,-2.57l-0.78,-2.3l0.95,-2.82l0.61,-5.68l-0.47,-4.27l-1.46,-4.08l3.19,0.79l1.26,2.83l0.69,0.08l0.69,-1.14l-1.1,-4.79l68.76,-0.0l0.4,-0.4l0.14,-0.86ZM32.44,67.52l1.73,1.97l0.55,0.05l0.99,-0.79l3.65,0.24l-0.09,0.62l0.32,0.45l3.83,0.77l2.61,-0.43l5.19,1.4l4.84,0.43l1.89,0.57l3.42,-0.7l6.14,1.87l-0.03,38.06l0.38,0.4l2.39,0.11l2.31,0.98l3.9,3.99l0.55,0.04l2.4,-2.03l2.16,-1.04l1.2,1.71l3.95,3.14l4.09,6.63l4.2,2.29l0.06,1.83l-1.02,1.23l-1.16,-1.08l-2.04,-1.03l-0.67,-2.89l-3.28,-3.03l-1.65,-3.57l-6.35,-0.32l-2.82,-1.01l-5.26,-3.85l-6.77,-2.04l-3.53,0.3l-4.81,-1.69l-3.25,-1.63l-2.78,0.8l-0.28,0.46l0.44,2.21l-3.91,0.96l-2.26,1.27l-2.3,0.65l-0.27,-1.65l1.05,-3.42l2.49,-1.09l0.16,-0.6l-0.69,-0.96l-0.55,-0.1l-3.19,2.12l-1.78,2.56l-3.55,2.61l-0.04,0.61l1.56,1.52l-2.07,2.29l-5.11,2.57l-0.77,1.66l-3.76,1.77l-0.92,1.73l-2.69,1.38l-1.81,-0.22l-6.95,3.32l-3.97,0.91l4.85,-2.5l2.59,-1.86l3.26,-0.52l1.19,-1.4l3.42,-2.1l2.59,-2.27l0.42,-2.68l1.23,-2.1l-0.04,-0.46l-0.45,-0.11l-2.68,1.03l-0.63,-0.49l-0.53,0.03l-1.05,1.04l-1.36,-1.54l-0.66,0.08l-0.32,0.62l-0.58,-1.14l-0.56,-0.16l-2.41,1.42l-1.07,-0.0l-0.17,-1.75l0.3,-1.71l-1.61,-1.33l-3.41,0.59l-1.96,-1.63l-1.57,-0.84l-0.15,-2.21l-1.7,-1.43l0.82,-1.88l1.99,-2.12l0.88,-1.92l1.71,-0.24l2.04,0.51l1.87,-1.77l1.91,0.25l1.91,-1.23l0.17,-0.43l-0.47,-1.82l-1.07,-0.7l1.39,-1.17l0.12,-0.45l-0.39,-0.26l-1.65,0.07l-2.66,0.88l-0.75,0.78l-1.92,-0.8l-3.46,0.44l-3.44,-0.91l-1.06,-1.61l-2.65,-1.99l2.91,-1.43l5.5,-2.0l1.52,0.0l-0.26,1.62l0.41,0.46l5.29,-0.16l0.3,-0.65l-2.03,-2.59l-3.14,-1.68l-1.79,-2.12l-2.4,-1.83l-3.09,-1.24l1.04,-1.69l4.23,-0.14l3.36,-2.07l0.73,-2.27l2.39,-1.99l2.42,-0.52l4.65,-1.97l2.46,0.23l3.71,-2.35l3.5,0.89ZM37.6,123.41l-2.25,1.23l-0.95,-0.69l-0.29,-1.24l3.21,-1.63l1.42,0.21l0.67,0.7l-1.8,1.42ZM31.06,234.03l0.98,0.47l0.74,0.87l-1.77,1.07l-0.44,-1.53l0.49,-0.89ZM29.34,232.07l0.18,0.05l0.08,0.05l-0.16,0.03l-0.11,-0.14ZM25.16,230.17l0.05,-0.03l0.18,0.22l-0.13,-0.01l-0.1,-0.18ZM5.89,113.26l-1.08,0.41l-2.21,-1.12l1.53,-0.4l1.62,0.28l0.14,0.83Z", "name": "United States"}, "LV": {"path": "M489.16,122.85l0.96,0.66l0.22,1.65l0.68,1.76l-3.65,1.7l-2.23,-1.58l-1.29,-0.26l-0.68,-0.77l-2.42,0.34l-4.16,-0.23l-2.47,0.9l0.06,-1.98l1.13,-2.06l1.95,-1.02l2.12,2.58l2.01,-0.07l0.38,-0.33l0.44,-2.52l1.76,-0.53l3.06,1.7l2.15,0.07Z", "name": "Latvia"}, "UY": {"path": "M286.85,372.74l-0.92,1.5l-2.59,1.44l-1.69,-0.52l-1.42,0.26l-2.39,-1.19l-1.52,0.08l-1.27,-1.3l0.16,-1.5l0.56,-0.79l-0.02,-2.73l1.21,-4.74l1.19,-0.21l2.37,2.0l1.08,0.03l4.36,3.17l1.22,1.6l-0.96,1.5l0.61,1.4Z", "name": "Uruguay"}, "LB": {"path": "M510.37,198.01l-0.88,0.51l1.82,-3.54l0.62,0.08l0.22,0.61l-1.13,0.88l-0.65,1.47Z", "name": "Lebanon"}, "LA": {"path": "M689.54,248.53l-1.76,-0.74l-0.49,0.15l-0.94,1.46l-1.32,-0.64l0.62,-0.98l0.11,-2.17l-2.04,-2.42l-0.25,-2.65l-1.9,-2.1l-2.15,-0.31l-0.78,0.91l-1.12,0.06l-1.05,-0.4l-2.06,1.2l-0.04,-1.59l0.61,-2.68l-0.36,-0.49l-1.35,-0.1l-0.11,-1.23l-0.96,-0.88l1.96,-1.89l0.39,0.36l1.33,0.07l0.42,-0.45l-0.34,-2.66l0.7,-0.21l1.28,1.81l1.11,2.35l0.36,0.23l2.82,0.02l0.71,1.67l-1.39,0.65l-0.72,0.93l0.13,0.6l2.91,1.51l3.6,5.25l1.88,1.78l0.56,1.62l-0.35,1.96Z", "name": "Lao PDR"}, "TW": {"path": "M724.01,226.68l-0.74,1.48l-0.9,-1.52l-0.25,-1.74l1.38,-2.44l1.73,-1.74l0.64,0.44l-1.85,5.52Z", "name": "Taiwan"}, "TT": {"path": "M266.64,259.32l0.28,-1.16l1.13,-0.22l-0.06,1.2l-1.35,0.18Z", "name": "Trinidad and Tobago"}, "TR": {"path": "M513.21,175.47l3.64,1.17l3.05,-0.44l2.1,0.26l3.11,-1.56l2.46,-0.13l2.19,1.33l0.33,0.82l-0.22,1.33l0.25,0.44l2.28,1.13l-1.17,0.57l-0.21,0.45l0.75,3.2l-0.41,1.16l1.13,1.92l-0.55,0.22l-0.9,-0.67l-2.91,-0.37l-1.24,0.46l-4.23,0.41l-2.81,1.05l-1.91,0.01l-1.52,-0.53l-2.58,0.75l-0.66,-0.45l-0.62,0.3l-0.12,1.45l-0.89,0.84l-0.47,-0.67l0.79,-1.3l-0.41,-0.2l-1.43,0.23l-2.0,-0.63l-2.02,1.65l-3.51,0.3l-2.13,-1.53l-2.7,-0.1l-0.86,1.24l-1.38,0.27l-2.29,-1.44l-2.71,-0.01l-1.37,-2.65l-1.68,-1.52l1.07,-1.99l-0.09,-0.49l-1.27,-1.12l2.37,-2.41l3.7,-0.11l1.28,-2.24l4.49,0.37l3.21,-1.97l2.81,-0.82l3.99,-0.06l4.29,2.07ZM488.79,176.72l-1.72,1.31l-0.5,-0.88l1.37,-2.57l-0.7,-0.85l1.7,-0.63l1.8,0.34l0.46,1.17l1.76,0.78l-2.87,0.32l-1.3,1.01Z", "name": "Turkey"}, "LK": {"path": "M624.16,268.99l-1.82,0.48l-0.99,-1.67l-0.42,-3.46l0.95,-3.43l1.21,0.98l2.26,4.19l-0.34,2.33l-0.85,0.58Z", "name": "Sri Lanka"}, "TN": {"path": "M448.1,188.24l-1.0,1.27l-0.02,1.32l0.84,0.88l-0.28,2.09l-1.53,1.32l-0.12,0.42l0.48,1.54l1.42,0.32l0.53,1.11l0.9,0.52l-0.11,1.67l-3.54,2.64l-0.1,2.38l-0.58,0.3l-0.96,-4.45l-1.54,-1.25l-0.16,-0.78l-1.92,-1.56l-0.18,-1.76l1.51,-1.62l0.59,-2.34l-0.38,-2.78l0.42,-1.21l2.45,-1.05l1.29,0.26l-0.06,1.11l0.58,0.38l1.47,-0.73Z", "name": "Tunisia"}, "TL": {"path": "M734.55,307.93l-0.1,-0.97l4.5,-0.86l-2.82,1.28l-1.59,0.55Z", "name": "Timor-Leste"}, "TM": {"path": "M553.03,173.76l-0.04,0.34l-0.09,-0.22l0.13,-0.12ZM555.87,172.66l0.45,-0.1l1.48,0.74l2.06,2.43l4.07,-0.18l0.38,-0.51l-0.32,-1.19l1.92,-0.94l1.91,-1.59l2.94,1.39l0.43,2.47l1.19,0.67l2.58,-0.13l0.62,0.4l1.32,3.12l4.54,3.44l2.67,1.45l3.06,1.14l-0.04,1.05l-1.33,-0.75l-0.59,0.19l-0.32,0.84l-2.2,0.81l-0.46,2.13l-1.21,0.74l-1.91,0.42l-0.73,1.33l-1.56,0.31l-2.22,-0.94l-0.2,-2.17l-0.38,-0.36l-1.73,-0.09l-2.76,-2.46l-2.14,-0.4l-2.84,-1.48l-1.78,-0.27l-1.24,0.53l-1.57,-0.08l-2.0,1.69l-1.7,0.43l-0.36,-1.58l0.36,-2.98l-0.22,-0.4l-1.65,-0.84l0.54,-1.69l-0.34,-0.52l-1.22,-0.13l0.36,-1.64l2.22,0.59l2.2,-0.95l0.12,-0.65l-1.77,-1.74l-0.66,-1.57Z", "name": "Turkmenistan"}, "TJ": {"path": "M597.75,178.82l-2.54,-0.44l-0.47,0.34l-0.24,1.7l0.43,0.45l2.64,-0.22l3.18,0.95l4.39,-0.41l0.56,2.37l0.52,0.29l0.67,-0.24l1.11,0.49l0.21,2.13l-3.76,-0.21l-1.8,1.32l-1.76,0.74l-0.61,-0.58l0.21,-2.23l-0.64,-0.49l-0.07,-0.93l-1.36,-0.66l-0.45,0.07l-1.08,1.01l-0.55,1.48l-1.31,-0.05l-0.95,1.16l-0.9,-0.35l-1.86,0.74l1.26,-2.83l-0.54,-2.17l-1.67,-0.82l0.33,-0.66l2.18,-0.04l1.19,-1.63l0.76,-1.79l2.43,-0.5l-0.26,1.0l0.73,1.05Z", "name": "Tajikistan"}, "LS": {"path": "M491.06,363.48l-0.49,0.15l-1.49,-1.67l1.1,-1.43l2.19,-1.44l1.51,1.27l-0.98,1.82l-1.23,0.38l-0.62,0.93Z", "name": "Lesotho"}, "TH": {"path": "M670.27,255.86l-1.41,3.87l0.15,2.0l0.38,0.36l1.38,0.07l0.9,2.04l0.55,2.34l1.4,1.44l1.61,0.38l0.96,0.97l-0.5,0.64l-1.1,0.2l-0.34,-1.18l-2.04,-1.1l-0.63,0.23l-0.63,-0.62l-0.48,-1.3l-2.56,-2.63l-0.73,0.41l0.95,-3.89l2.16,-4.22ZM670.67,254.77l-0.92,-2.18l-0.26,-2.61l-2.14,-3.06l0.71,-0.49l0.89,-2.59l-3.61,-5.45l0.87,-0.51l1.05,-2.58l1.74,-0.18l2.6,-1.59l0.76,0.56l0.13,1.39l0.37,0.36l1.23,0.09l-0.51,2.28l0.05,2.42l0.6,0.34l2.43,-1.42l0.77,0.39l1.47,-0.07l0.71,-0.88l1.48,0.14l1.71,1.88l0.25,2.65l1.92,2.11l-0.1,1.89l-0.61,0.86l-2.22,-0.33l-3.5,0.64l-1.6,2.12l0.36,2.58l-1.51,-0.79l-1.84,-0.01l0.28,-1.52l-0.4,-0.47l-2.21,0.01l-0.4,0.37l-0.19,2.74l-0.34,0.93Z", "name": "Thailand"}, "TF": {"path": "M596.68,420.38l-3.2,0.18l-0.05,-1.26l0.39,-1.41l1.3,0.78l2.08,0.35l-0.52,1.36Z", "name": "Fr. S. Antarctic Lands"}, "TG": {"path": "M422.7,257.63l-0.09,1.23l1.53,1.52l0.08,1.09l0.5,0.65l-0.11,5.62l0.49,1.47l-1.31,0.35l-1.02,-2.13l-0.18,-1.12l0.53,-2.19l-0.63,-1.16l-0.22,-3.68l-1.01,-1.4l0.07,-0.28l1.37,0.03Z", "name": "Togo"}, "TD": {"path": "M480.25,235.49l0.12,9.57l-2.1,0.05l-1.14,1.89l-0.69,1.63l0.34,0.73l-0.66,0.91l0.24,0.89l-0.86,1.95l0.45,0.5l0.6,-0.1l0.34,0.64l0.03,1.38l0.9,1.04l-1.45,0.43l-1.27,1.03l-1.83,2.76l-2.16,1.07l-2.31,-0.15l-0.86,0.25l-0.26,0.49l0.17,0.61l-2.11,1.68l-2.85,0.87l-1.09,-0.57l-0.73,0.66l-1.12,0.1l-1.1,-3.12l-1.25,-0.64l-1.22,-1.22l0.29,-0.64l3.01,0.04l0.35,-0.6l-1.3,-2.2l-0.08,-3.31l-0.97,-1.66l0.22,-1.04l-0.38,-0.48l-1.22,-0.04l0.0,-1.25l-0.98,-1.07l0.96,-3.01l3.25,-2.65l0.13,-3.33l0.95,-5.18l0.52,-1.07l-0.1,-0.48l-0.91,-0.78l-0.2,-0.96l-0.8,-0.58l-0.55,-3.65l2.1,-1.2l19.57,9.83Z", "name": "Chad"}, "LY": {"path": "M483.48,203.15l-0.75,1.1l0.29,1.39l-0.6,1.83l0.73,2.14l0.0,24.12l-2.48,0.01l-0.41,0.85l-19.41,-9.76l-4.41,2.28l-1.37,-1.33l-3.82,-1.1l-1.14,-1.65l-1.98,-1.23l-1.22,0.32l-0.66,-1.11l-0.17,-1.26l-1.28,-1.69l0.87,-1.19l-0.07,-4.34l0.43,-2.27l-0.86,-3.45l1.13,-0.76l0.22,-1.16l-0.2,-1.03l3.48,-2.61l0.29,-1.94l2.45,0.8l1.18,-0.21l1.98,0.44l3.15,1.18l1.37,2.54l5.72,1.67l2.64,1.35l1.61,-0.72l1.29,-1.34l-0.44,-2.34l0.66,-1.13l1.67,-1.21l1.57,-0.35l3.14,0.53l1.08,1.28l3.99,0.78l0.36,0.54Z", "name": "Libya"}, "AE": {"path": "M550.76,223.97l1.88,-0.4l3.84,0.02l4.78,-4.75l0.19,0.36l0.26,1.58l-0.81,0.01l-0.39,0.35l-0.08,2.04l-0.81,0.63l-0.01,0.96l-0.66,0.99l-0.39,1.41l-7.08,-1.25l-0.7,-1.96Z", "name": "United Arab Emirates"}, "VE": {"path": "M240.68,256.69l0.53,0.75l-0.02,1.06l-1.07,1.78l0.95,2.0l0.42,0.22l1.4,-0.44l0.56,-1.83l-0.77,-1.17l-0.1,-1.47l2.82,-0.93l0.26,-0.49l-0.28,-0.96l0.3,-0.28l0.66,1.31l1.96,0.26l1.4,1.22l0.08,0.68l0.39,0.35l4.81,-0.22l1.49,1.11l1.92,0.31l1.67,-0.84l0.22,-0.6l3.44,-0.14l-0.17,0.55l0.86,1.19l2.19,0.35l1.67,1.1l0.37,1.86l0.41,0.32l1.55,0.17l-1.66,1.35l-0.22,0.92l0.65,0.97l-1.67,0.54l-0.3,0.4l0.04,0.99l-0.56,0.57l-0.01,0.55l1.85,2.27l-0.66,0.69l-4.47,1.29l-0.72,0.54l-3.69,-0.9l-0.71,0.27l-0.02,0.7l0.91,0.53l-0.08,1.54l0.35,1.58l0.35,0.31l1.66,0.17l-1.3,0.52l-0.48,1.13l-2.68,0.91l-0.6,0.77l-1.57,0.13l-1.17,-1.13l-0.8,-2.52l-1.25,-1.26l1.02,-1.23l-1.29,-2.95l0.18,-1.62l1.0,-2.21l-0.2,-0.49l-1.14,-0.46l-4.02,0.36l-1.82,-2.1l-1.57,-0.33l-2.99,0.22l-1.06,-0.97l0.25,-1.23l-0.2,-1.01l-0.59,-0.69l-0.29,-1.06l-1.08,-0.39l0.78,-2.79l1.9,-2.11Z", "name": "Venezuela"}, "AF": {"path": "M600.7,188.88l-1.57,1.3l-0.1,0.48l0.8,2.31l-1.09,1.04l-0.03,1.27l-0.48,0.71l-2.16,-0.08l-0.37,0.59l0.78,1.48l-1.38,0.69l-1.06,1.69l0.06,1.7l-0.65,0.52l-0.91,-0.21l-1.91,0.36l-0.48,0.77l-1.88,0.13l-1.4,1.56l-0.18,2.32l-2.91,1.02l-1.65,-0.23l-0.71,0.55l-1.41,-0.3l-2.41,0.39l-3.52,-1.17l1.96,-2.35l-0.21,-1.78l-0.3,-0.34l-1.63,-0.4l-0.19,-1.58l-0.75,-2.03l0.95,-1.36l-0.19,-0.6l-0.73,-0.28l1.47,-4.8l2.14,0.9l2.12,-0.36l0.74,-1.34l1.77,-0.39l1.54,-0.92l0.63,-2.31l1.87,-0.5l0.49,-0.81l0.94,0.56l2.13,0.11l2.55,0.92l1.95,-0.83l0.65,0.43l0.56,-0.13l0.69,-1.12l1.57,-0.08l0.72,-1.66l0.79,-0.74l0.8,0.39l-0.17,0.56l0.71,0.58l-0.08,2.39l1.11,0.95ZM601.37,188.71l1.73,-0.71l1.43,-1.18l4.03,0.35l-2.23,0.74l-4.95,0.8Z", "name": "Afghanistan"}, "IQ": {"path": "M530.82,187.47l0.79,0.66l1.26,-0.28l1.46,3.08l1.63,0.94l0.14,1.23l-1.22,1.05l-0.53,2.52l1.73,2.67l3.12,1.62l1.15,1.88l-0.38,1.85l0.39,0.48l0.41,-0.0l0.02,1.07l0.76,0.94l-2.47,-0.1l-1.71,2.44l-4.31,-0.2l-7.02,-5.48l-3.73,-1.94l-2.88,-0.73l-0.85,-2.87l5.45,-3.02l0.95,-3.43l-0.19,-1.96l1.27,-0.7l1.22,-1.7l0.87,-0.36l2.69,0.34Z", "name": "Iraq"}, "IS": {"path": "M384.14,88.06l-0.37,2.61l2.54,2.51l-2.9,2.75l-9.19,3.4l-9.25,-1.66l1.7,-1.22l-0.1,-0.7l-4.05,-1.47l2.96,-0.53l0.33,-0.43l-0.11,-1.2l-0.33,-0.36l-4.67,-0.85l1.28,-2.04l3.45,-0.56l3.77,2.72l0.44,0.02l3.64,-2.16l3.3,1.08l3.98,-2.16l3.58,0.26Z", "name": "Iceland"}, "IR": {"path": "M533.43,187.16l-1.27,-2.15l0.42,-0.98l-0.71,-3.04l1.03,-0.5l0.33,0.83l1.26,1.35l2.05,0.51l1.11,-0.16l2.89,-2.11l0.62,-0.14l0.39,0.46l-0.72,1.2l0.06,0.49l1.56,1.53l0.65,0.04l0.67,1.81l2.56,0.83l1.87,1.48l3.69,0.49l3.91,-0.76l0.47,-0.73l2.17,-0.6l1.66,-1.54l1.51,0.08l1.18,-0.53l1.59,0.24l2.83,1.48l1.88,0.3l2.77,2.47l1.77,0.18l0.18,1.99l-1.68,5.49l0.24,0.5l0.61,0.23l-0.82,1.48l0.8,2.18l0.19,1.71l0.3,0.34l1.63,0.4l0.15,1.32l-2.15,2.35l-0.01,0.53l2.21,3.03l2.34,1.24l0.06,2.14l1.24,0.72l0.11,0.69l-3.31,1.27l-1.08,3.03l-9.68,-1.68l-0.99,-3.05l-1.43,-0.73l-2.17,0.46l-2.47,1.26l-2.83,-0.82l-2.46,-2.02l-2.41,-0.8l-3.42,-6.06l-0.48,-0.2l-1.18,0.39l-1.44,-0.82l-0.5,0.08l-0.65,0.74l-0.97,-1.01l-0.02,-1.31l-0.71,-0.39l0.26,-1.81l-1.29,-2.11l-3.13,-1.63l-1.58,-2.43l0.5,-1.9l1.31,-1.26l-0.19,-1.66l-1.74,-1.1l-1.57,-3.3Z", "name": "Iran"}, "AM": {"path": "M536.99,182.33l-0.28,0.03l-1.23,-2.13l-0.93,0.01l-0.62,-0.66l-0.69,-0.07l-0.96,-0.81l-1.56,-0.62l0.19,-1.12l-0.26,-0.79l2.72,-0.36l1.09,1.01l-0.17,0.92l1.02,0.78l-0.47,0.62l0.08,0.56l2.04,1.23l0.04,1.4Z", "name": "Armenia"}, "IT": {"path": "M451.59,158.63l3.48,0.94l-0.21,1.17l0.3,0.83l-1.49,-0.24l-2.04,1.1l-0.21,0.39l0.13,1.45l-0.25,1.12l0.82,1.57l2.39,1.63l1.31,2.54l2.79,2.43l2.05,0.08l0.21,0.23l-0.39,0.33l0.09,0.67l4.05,1.97l2.17,1.76l-0.16,0.36l-1.17,-1.08l-2.18,-0.49l-0.44,0.2l-1.05,1.91l0.14,0.54l1.57,0.95l-0.19,0.98l-1.06,0.33l-1.25,2.34l-0.37,0.08l0.0,-0.33l1.0,-2.45l-1.73,-3.17l-1.12,-0.51l-0.88,-1.33l-1.51,-0.51l-1.27,-1.25l-1.75,-0.18l-4.12,-3.21l-1.62,-1.65l-1.03,-3.19l-3.53,-1.36l-1.3,0.51l-1.69,1.41l0.16,-0.72l-0.28,-0.47l-1.14,-0.33l-0.53,-1.96l0.72,-0.78l0.04,-0.48l-0.65,-1.17l0.8,0.39l1.4,-0.23l1.11,-0.84l0.52,0.35l1.19,-0.1l0.75,-1.2l1.53,0.33l1.36,-0.56l0.35,-1.14l1.08,0.32l0.68,-0.64l1.98,-0.44l0.42,0.82ZM459.19,184.75l-0.65,1.65l0.32,1.05l-0.31,0.89l-1.5,-0.85l-4.5,-1.67l0.19,-0.82l2.67,0.23l3.78,-0.48ZM443.93,176.05l1.18,1.66l-0.3,3.32l-1.06,-0.01l-0.77,0.73l-0.53,-0.44l-0.1,-3.37l-0.39,-1.22l1.04,0.01l0.92,-0.68Z", "name": "Italy"}, "VN": {"path": "M690.56,230.25l-2.7,1.82l-2.09,2.46l-0.63,1.95l4.31,6.45l2.32,1.65l1.43,1.94l1.11,4.59l-0.32,4.24l-1.93,1.54l-2.84,1.61l-2.11,2.15l-2.73,2.06l-0.59,-1.05l0.63,-1.53l-0.13,-0.47l-1.34,-1.04l1.51,-0.71l2.55,-0.18l0.3,-0.63l-0.82,-1.14l4.0,-2.07l0.31,-3.05l-0.57,-1.77l0.42,-2.66l-0.73,-1.97l-1.86,-1.76l-3.63,-5.29l-2.72,-1.46l0.36,-0.47l1.5,-0.64l0.21,-0.52l-0.97,-2.27l-0.37,-0.24l-2.83,-0.02l-2.24,-3.9l0.83,-0.4l4.39,-0.29l2.06,-1.31l1.15,0.89l1.88,0.4l-0.17,1.51l1.35,1.16l1.67,0.45Z", "name": "Vietnam"}, "AR": {"path": "M249.29,428.93l-2.33,-0.52l-5.83,-0.43l-0.89,-1.66l0.05,-2.37l-0.45,-0.4l-1.43,0.18l-0.67,-0.91l-0.2,-3.13l1.88,-1.47l0.79,-2.04l-0.25,-1.7l1.3,-2.68l0.91,-4.15l-0.22,-1.69l0.85,-0.45l0.2,-0.44l-0.27,-1.16l-0.98,-0.68l0.59,-0.92l-0.05,-0.5l-1.04,-1.07l-0.52,-3.1l0.97,-0.86l-0.42,-3.58l1.2,-5.43l1.38,-0.98l0.16,-0.43l-0.75,-2.79l-0.01,-2.43l1.78,-1.75l0.06,-2.57l1.43,-2.85l0.01,-2.58l-0.69,-0.74l-1.09,-4.52l1.47,-2.7l-0.18,-2.79l0.85,-2.35l1.59,-2.46l1.73,-1.64l0.05,-0.52l-0.6,-0.84l0.44,-0.85l-0.07,-4.19l2.7,-1.44l0.86,-2.75l-0.21,-0.71l1.76,-2.01l2.9,0.57l1.38,1.78l0.68,-0.08l0.87,-1.87l2.39,0.09l4.95,4.77l2.17,0.49l3.0,1.92l2.47,1.0l0.25,0.82l-2.37,3.93l0.23,0.59l5.39,1.16l2.12,-0.44l2.45,-2.16l0.5,-2.38l0.76,-0.31l0.98,1.2l-0.04,1.8l-3.67,2.51l-2.85,2.66l-3.43,3.88l-1.3,5.07l0.01,2.72l-0.54,0.73l-0.36,3.28l3.14,2.64l-0.16,2.11l1.4,1.11l-0.1,1.09l-2.29,3.52l-3.55,1.49l-4.92,0.6l-2.71,-0.29l-0.43,0.51l0.5,1.65l-0.49,2.1l0.38,1.42l-1.19,0.83l-2.36,0.38l-2.3,-1.04l-1.38,0.83l0.41,3.64l1.69,0.91l1.4,-0.71l0.36,0.76l-2.04,0.86l-2.01,1.89l-0.97,4.63l-2.34,0.1l-2.09,1.78l-0.61,2.75l2.46,2.31l2.17,0.63l-0.7,2.32l-2.83,1.73l-1.73,3.86l-2.17,1.22l-1.16,1.67l0.75,3.76l1.04,1.28ZM256.71,438.88l-2.0,0.15l-1.4,-1.22l-3.82,-0.1l-0.0,-5.83l1.6,3.05l3.26,2.07l3.08,0.78l-0.71,1.1Z", "name": "Argentina"}, "AU": {"path": "M705.8,353.26l0.26,0.04l0.17,-0.47l-0.48,-1.42l0.92,1.11l0.45,0.15l0.27,-0.39l-0.1,-1.56l-1.98,-3.63l1.09,-3.31l-0.24,-1.57l0.34,-0.62l0.38,1.06l0.43,-0.19l0.99,-1.7l1.91,-0.83l1.29,-1.15l1.81,-0.91l0.96,-0.17l0.92,0.26l1.92,-0.95l1.47,-0.28l1.03,-0.8l1.43,0.04l2.78,-0.84l1.36,-1.15l0.71,-1.45l1.41,-1.26l0.3,-2.58l1.27,-1.59l0.78,1.65l0.54,0.19l1.07,-0.51l0.15,-0.6l-0.73,-1.0l0.45,-0.71l0.78,0.39l0.58,-0.3l0.28,-1.82l1.87,-2.14l1.12,-0.39l0.28,-0.58l0.62,0.17l0.53,-0.73l1.87,-0.57l1.65,1.05l1.35,1.48l3.39,0.38l0.43,-0.54l-0.46,-1.23l1.05,-1.79l1.04,-0.61l0.14,-0.55l-0.25,-0.41l0.88,-1.17l1.31,-0.77l1.3,0.27l2.1,-0.48l0.31,-0.4l-0.05,-1.3l-0.92,-0.77l1.48,0.56l1.41,1.07l2.11,0.65l0.81,-0.2l1.4,0.7l1.69,-0.66l0.8,0.19l0.64,-0.33l0.71,0.77l-1.33,1.94l-0.71,0.07l-0.35,0.51l0.24,0.86l-1.52,2.35l0.12,1.05l2.15,1.65l1.97,0.85l3.04,2.36l1.97,0.65l0.55,0.88l2.72,0.85l1.84,-1.1l2.07,-5.97l-0.42,-3.59l0.3,-1.73l0.47,-0.87l-0.31,-0.68l1.09,-3.28l0.46,-0.47l0.4,0.71l0.16,1.51l0.65,0.52l0.16,1.04l0.85,1.21l0.12,2.38l0.9,2.0l0.57,0.18l1.3,-0.78l1.69,1.7l-0.2,1.08l0.53,2.2l0.39,1.3l0.68,0.48l0.6,1.95l-0.19,1.48l0.81,1.76l6.01,3.69l-0.11,0.76l1.38,1.58l0.95,2.77l0.58,0.22l0.72,-0.41l0.8,0.9l0.61,0.01l0.46,2.41l4.81,4.71l0.66,2.02l-0.07,3.31l1.14,2.2l-0.13,2.24l-1.1,3.68l0.03,1.64l-0.47,1.89l-1.05,2.4l-1.9,1.47l-1.72,3.51l-2.38,6.09l-0.24,2.82l-1.14,0.8l-2.85,0.15l-2.31,1.19l-2.51,2.25l-3.09,-1.57l0.3,-1.15l-0.54,-0.47l-1.5,0.63l-2.01,1.94l-7.12,-2.18l-1.48,-1.63l-1.14,-3.74l-1.45,-1.26l-1.81,-0.26l0.56,-1.18l-0.61,-2.1l-0.72,-0.1l-1.14,1.82l-0.9,0.21l0.63,-0.82l0.36,-1.55l0.92,-1.31l-0.13,-2.34l-0.7,-0.22l-2.0,2.34l-1.51,0.93l-0.94,2.01l-1.35,-0.81l-0.02,-1.52l-1.57,-2.04l-1.09,-0.88l0.24,-0.33l-0.14,-0.59l-3.21,-1.69l-1.83,-0.12l-2.54,-1.35l-4.58,0.28l-6.02,1.9l-2.53,-0.13l-2.62,1.41l-2.13,0.63l-1.49,2.6l-3.49,0.31l-2.29,-0.5l-3.48,0.43l-1.6,1.47l-0.81,-0.04l-2.37,1.63l-3.26,-0.1l-3.72,-2.21l0.04,-1.05l1.19,-0.46l0.49,-0.89l0.21,-2.97l-0.28,-1.64l-1.34,-2.86l-0.38,-1.47l0.05,-1.72l-0.95,-1.7l-0.18,-0.97l-1.01,-0.99l-0.29,-1.98l-1.13,-1.75ZM784.92,393.44l2.65,1.02l3.23,-0.96l1.09,0.14l0.15,3.06l-0.85,1.13l-0.17,1.63l-0.87,-0.24l-1.57,1.91l-1.68,-0.18l-1.4,-2.36l-0.37,-2.04l-1.39,-2.51l0.04,-0.8l1.15,0.18Z", "name": "Australia"}, "IL": {"path": "M507.76,203.05l0.4,-0.78l0.18,0.4l-0.33,1.03l0.52,0.44l0.68,-0.22l-0.86,3.6l-1.16,-3.32l0.59,-0.74l-0.03,-0.41ZM508.73,200.34l0.37,-1.02l0.64,0.0l0.52,-0.51l-0.49,1.53l-0.56,-0.24l-0.48,0.23Z", "name": "Israel"}, "IN": {"path": "M623.34,207.03l-1.24,1.04l-0.97,2.55l0.22,0.51l8.04,3.87l3.42,0.37l1.57,1.38l4.92,0.88l2.18,-0.04l0.38,-0.3l0.29,-1.24l-0.32,-1.64l0.14,-0.87l0.82,-0.31l0.45,2.48l2.28,1.02l1.77,-0.38l4.14,0.1l0.38,-0.36l0.18,-1.66l-0.5,-0.65l1.37,-0.29l2.25,-1.99l2.7,-1.62l1.93,0.62l1.8,-0.98l0.79,1.14l-0.68,0.91l0.26,0.63l2.42,0.36l0.09,0.47l-0.83,0.75l0.13,1.07l-1.52,-0.29l-3.24,1.86l-0.13,1.78l-1.32,2.14l-0.18,1.39l-0.93,1.82l-1.64,-0.5l-0.52,0.37l-0.09,2.63l-0.56,1.11l0.19,0.81l-0.53,0.27l-1.18,-3.73l-1.08,-0.27l-0.38,0.31l-0.24,1.0l-0.66,-0.66l0.54,-1.06l1.22,-0.34l1.15,-2.25l-0.24,-0.56l-1.57,-0.47l-4.34,-0.28l-0.18,-1.56l-0.35,-0.35l-1.11,-0.12l-1.91,-1.12l-0.56,0.17l-0.88,1.82l0.11,0.49l1.36,1.07l-1.09,0.69l-0.69,1.11l0.18,0.56l1.24,0.57l-0.32,1.54l0.85,1.94l0.36,2.01l-0.22,0.59l-4.58,0.52l-0.33,0.42l0.13,1.8l-1.17,1.36l-3.65,1.81l-2.79,3.03l-4.32,3.28l-0.18,1.27l-4.65,1.79l-0.77,2.16l0.64,5.3l-1.06,2.49l-0.01,3.94l-1.24,0.28l-1.14,1.93l0.39,0.84l-1.68,0.53l-1.04,1.83l-0.65,0.47l-2.06,-2.05l-2.1,-6.02l-2.2,-3.64l-1.05,-4.75l-2.29,-3.57l-1.76,-8.2l0.01,-3.11l-0.49,-2.53l-0.55,-0.29l-3.53,1.52l-1.53,-0.27l-2.86,-2.77l0.85,-0.67l0.08,-0.55l-0.74,-1.03l-2.67,-2.06l1.24,-1.32l5.34,0.01l0.39,-0.49l-0.5,-2.29l-1.42,-1.46l-0.27,-1.93l-1.43,-1.2l2.31,-2.37l3.05,0.06l2.62,-2.85l1.6,-2.81l2.4,-2.73l0.07,-2.04l1.97,-1.48l-0.02,-0.65l-1.93,-1.31l-0.82,-1.78l-0.8,-2.21l0.9,-0.89l3.59,0.65l2.92,-0.42l2.33,-2.19l2.31,2.85l-0.24,2.13l0.99,1.59l-0.05,0.82l-1.34,-0.28l-0.47,0.48l0.7,3.06l2.62,1.99l2.99,1.65Z", "name": "India"}, "TZ": {"path": "M495.56,296.42l2.8,-3.12l-0.02,-0.81l-0.64,-1.3l0.68,-0.52l0.14,-1.47l-0.76,-1.25l0.31,-0.11l2.26,0.03l-0.51,2.76l0.76,1.3l0.5,0.12l1.05,-0.53l1.19,-0.12l0.61,0.24l1.43,-0.62l0.1,-0.67l-0.71,-0.62l1.57,-1.7l8.65,4.86l0.32,1.53l3.34,2.33l-1.05,2.8l0.13,1.61l1.63,1.12l-0.6,1.76l-0.01,2.33l1.89,4.03l0.57,0.43l-1.46,1.08l-2.61,0.94l-1.43,-0.04l-1.06,0.77l-2.29,0.36l-2.87,-0.68l-0.83,0.07l-0.63,-0.75l-0.31,-2.78l-1.32,-1.35l-3.25,-0.77l-3.96,-1.58l-1.18,-2.41l-0.32,-1.75l-1.76,-1.49l0.42,-1.05l-0.44,-0.89l0.08,-0.96l-0.46,-0.58l0.06,-0.56Z", "name": "Tanzania"}, "AZ": {"path": "M539.29,175.73l1.33,0.32l1.94,-1.8l2.3,3.34l1.43,0.43l-1.26,0.15l-0.35,0.32l-0.8,3.14l-0.99,0.96l0.05,1.11l-1.26,-1.13l0.7,-1.18l-0.04,-0.47l-0.74,-0.86l-1.48,0.15l-2.34,1.71l-0.03,-1.27l-2.03,-1.35l0.47,-0.62l-0.08,-0.56l-1.03,-0.79l0.29,-0.43l-0.14,-0.58l-1.13,-0.86l1.89,0.68l1.69,0.06l0.37,-0.87l-0.81,-1.37l0.42,0.06l1.63,1.72ZM533.78,180.57l0.61,0.46l0.69,-0.0l0.59,1.15l-0.68,-0.15l-1.21,-1.45Z", "name": "Azerbaijan"}, "IE": {"path": "M405.08,135.42l0.35,2.06l-1.75,2.78l-4.22,1.88l-2.84,-0.4l1.73,-3.0l-1.18,-3.53l4.6,-3.74l0.32,1.15l-0.49,1.74l0.4,0.51l1.47,-0.04l1.6,0.6Z", "name": "Ireland"}, "ID": {"path": "M756.47,287.89l0.69,4.01l2.79,1.78l0.51,-0.1l2.04,-2.59l2.71,-1.43l2.05,-0.0l3.9,1.73l2.46,0.45l0.08,15.12l-1.75,-1.54l-2.54,-0.51l-0.88,0.71l-2.32,0.06l0.69,-1.33l1.45,-0.64l0.23,-0.46l-0.65,-2.74l-1.24,-2.21l-5.04,-2.29l-2.09,-0.23l-3.68,-2.27l-0.55,0.13l-0.65,1.07l-0.52,0.12l-0.55,-1.89l-1.21,-0.78l1.84,-0.62l1.72,0.05l0.39,-0.52l-0.21,-0.66l-0.38,-0.28l-3.45,-0.0l-1.13,-1.48l-2.1,-0.43l-0.52,-0.6l2.69,-0.48l1.28,-0.78l3.66,0.94l0.3,0.71ZM757.91,300.34l-0.62,0.82l-0.1,-0.8l0.59,-1.12l0.13,1.1ZM747.38,292.98l0.34,0.72l-1.22,-0.57l-4.68,-0.1l0.27,-0.62l2.78,-0.09l2.52,0.67ZM741.05,285.25l-0.67,-2.88l0.64,-2.01l0.41,0.86l1.21,0.18l0.16,0.7l-0.1,1.68l-0.84,-0.16l-0.46,0.3l-0.34,1.34ZM739.05,293.5l-0.5,0.44l-1.34,-0.36l-0.17,-0.37l1.73,-0.08l0.27,0.36ZM721.45,284.51l-0.19,1.97l2.24,2.23l0.54,0.02l1.27,-1.07l2.75,-0.5l-0.9,1.21l-2.11,0.93l-0.16,0.6l2.22,3.01l-0.3,1.07l1.36,1.74l-2.26,0.85l-0.28,-0.31l0.12,-1.19l-1.64,-1.34l0.17,-2.23l-0.56,-0.39l-1.67,0.76l-0.23,0.39l0.3,6.17l-1.1,0.25l-0.69,-0.47l0.64,-2.21l-0.39,-2.42l-0.39,-0.34l-0.8,-0.01l-0.58,-1.29l0.98,-1.6l0.35,-1.96l1.32,-3.87ZM728.59,296.27l0.38,0.49l-0.02,1.28l-0.88,0.49l-0.53,-0.47l1.04,-1.79ZM729.04,286.98l0.27,-0.05l-0.02,0.13l-0.24,-0.08ZM721.68,284.05l0.16,-0.32l1.89,-1.65l1.83,0.68l3.16,0.35l2.94,-0.1l2.39,-1.66l-1.73,2.13l-1.66,0.43l-2.41,-0.48l-4.17,0.13l-2.39,0.51ZM730.55,310.47l1.11,-1.93l2.03,-0.82l0.08,0.62l-1.45,1.67l-1.77,0.46ZM728.12,305.88l-0.1,0.38l-3.46,0.66l-2.91,-0.27l-0.0,-0.25l1.54,-0.41l1.66,0.73l1.67,-0.19l1.61,-0.65ZM722.9,310.24l-0.64,0.03l-2.26,-1.2l1.11,-0.24l1.78,1.41ZM716.26,305.77l0.88,0.51l1.28,-0.17l0.2,0.35l-4.65,0.73l0.39,-0.67l1.15,-0.02l0.75,-0.73ZM711.66,293.84l-0.38,-0.16l-2.54,1.01l-1.12,-1.44l-1.69,-0.13l-1.16,-0.75l-3.04,0.77l-1.1,-1.15l-3.31,-0.11l-0.35,-3.05l-1.35,-0.95l-1.11,-1.98l-0.33,-2.06l0.27,-2.14l0.9,-1.01l0.37,1.15l2.09,1.49l1.53,-0.48l1.82,0.08l1.38,-1.19l1.0,-0.18l2.28,0.67l2.26,-0.53l1.52,-3.64l1.01,-0.99l0.78,-2.57l4.1,0.3l-1.11,1.77l0.02,0.46l1.7,2.2l-0.23,1.39l2.07,1.71l-2.33,0.42l-0.88,1.9l0.1,2.05l-2.4,1.9l-0.06,2.45l-0.7,2.79ZM692.58,302.03l0.35,0.26l4.8,0.25l0.78,-0.97l4.17,1.09l1.13,1.68l3.69,0.45l2.13,1.04l-1.8,0.6l-2.77,-0.99l-4.8,-0.12l-5.24,-1.41l-1.84,-0.25l-1.11,0.3l-4.26,-0.97l-0.7,-1.14l-1.59,-0.13l1.18,-1.65l2.74,0.13l2.87,1.13l0.26,0.68ZM685.53,299.17l-2.22,0.04l-2.06,-2.03l-3.15,-2.01l-2.93,-3.51l-3.11,-5.33l-2.2,-2.12l-1.64,-4.06l-2.32,-1.69l-1.27,-2.07l-1.96,-1.5l-2.51,-2.65l-0.11,-0.66l4.81,0.53l2.15,2.38l3.31,2.74l2.35,2.66l2.7,0.17l1.95,1.59l1.54,2.17l1.59,0.95l-0.84,1.71l0.15,0.52l1.44,0.87l0.79,0.1l0.4,1.58l0.87,1.4l1.96,0.39l1.0,1.31l-0.6,3.01l-0.09,3.5Z", "name": "Indonesia"}, "UA": {"path": "M492.5,162.44l1.28,-2.49l1.82,0.19l0.66,-0.23l0.09,-0.71l-0.25,-0.75l-0.79,-0.72l-0.33,-1.21l-0.86,-0.62l-0.02,-1.19l-1.13,-0.86l-1.15,-0.19l-2.04,-1.0l-1.66,0.32l-0.66,0.47l-0.92,-0.0l-0.84,0.78l-2.48,0.7l-1.18,-0.71l-3.07,-0.36l-0.89,0.43l-0.24,-0.55l-1.11,-0.7l0.35,-0.93l1.26,-1.02l-0.54,-1.23l2.04,-2.43l1.4,-0.62l0.25,-1.19l-1.04,-2.39l0.83,-0.13l1.28,-0.84l1.8,-0.07l2.47,0.26l2.86,0.81l1.88,0.06l0.86,0.44l1.04,-0.41l0.77,0.66l2.18,-0.15l0.92,0.3l0.52,-0.34l0.15,-1.53l0.56,-0.54l2.85,-0.05l0.84,-0.72l3.04,-0.18l1.23,1.46l-0.48,0.77l0.21,1.03l0.36,0.32l1.8,0.14l0.93,2.08l3.18,1.15l1.94,-0.45l1.67,1.49l1.4,-0.03l3.35,0.96l0.02,0.54l-0.96,1.59l0.47,1.97l-0.26,0.7l-2.36,0.28l-1.29,0.89l-0.23,1.38l-1.83,0.27l-1.58,0.97l-2.41,0.21l-2.16,1.17l-0.21,0.38l0.34,2.26l1.23,0.75l2.13,-0.08l-0.14,0.31l-2.65,0.53l-3.23,1.69l-0.87,-0.39l0.42,-1.1l-0.25,-0.52l-2.21,-0.73l2.35,-1.06l0.12,-0.65l-0.93,-0.82l-3.62,-0.74l-0.13,-0.89l-0.46,-0.34l-2.61,0.59l-0.91,1.69l-1.71,2.04l-0.86,-0.4l-1.62,0.27Z", "name": "Ukraine"}, "QA": {"path": "M549.33,221.64l-0.76,-0.23l-0.14,-1.64l0.84,-1.29l0.47,0.52l0.04,1.34l-0.45,1.3Z", "name": "Qatar"}, "MZ": {"path": "M508.58,318.75l-0.34,-2.57l0.51,-2.05l3.55,0.63l2.5,-0.38l1.02,-0.76l1.49,0.01l2.74,-0.98l1.66,-1.2l0.5,9.24l0.41,1.23l-0.68,1.67l-0.93,1.71l-1.5,1.5l-5.16,2.28l-2.78,2.73l-1.02,0.53l-1.71,1.8l-0.98,0.57l-0.35,2.41l1.16,1.94l0.49,2.17l0.43,0.31l-0.06,2.06l-0.39,1.17l0.5,0.72l-0.25,0.73l-0.92,0.83l-5.12,2.39l-1.22,1.36l0.21,1.13l0.58,0.39l-0.11,0.72l-1.22,-0.01l-0.73,-2.97l0.42,-3.09l-1.78,-5.37l2.49,-2.81l0.69,-1.89l0.44,-0.43l0.28,-1.53l-0.39,-0.93l0.59,-3.65l-0.01,-3.26l-1.49,-1.16l-1.2,-0.22l-1.74,-1.17l-1.92,0.01l-0.29,-2.08l7.06,-1.96l1.28,1.09l0.89,-0.1l0.67,0.44l0.1,0.73l-0.51,1.29l0.19,1.81l1.75,1.83l0.65,-0.13l0.71,-1.65l1.17,-0.86l-0.26,-3.47l-1.05,-1.85l-1.04,-0.94Z", "name": "Mozambique"}}, "height": 440.70631074413296, "projection": {"type": "mill", "centralMeridian": 11.5}, "width": 900.0});

$.fn.vectorMap('addMap', 'map_format_cn', {
    "height": 270,
    "width": 290,
    "paths": {
        "HAI": {
            "path": "M178.207 248.443c-1.0058,-0.3706 -2.0116,-0.6882 -2.9644,-1.0058 -1.641,-1.2175 -1.1117,-2.0645 -1.1117,-3.4408 0.2647,-1.7469 -0.0529,-1.4293 1.5352,-1.7998 0.1588,-0.1588 0.3705,-0.3177 0.5823,-0.4765 0,-0.6352 0.0529,-1.2704 0.1058,-1.8527 0.053,-0.0529 0.1059,-0.0529 0.2118,-0.0529 0.3705,0.1588 1.0587,0.2646 1.7998,0.1588 0.847,-0.4765 1.6939,-0.9529 2.5409,-1.4293 1.3764,-0.1059 2.7527,-0.2117 4.1819,-0.2647 0.3706,0.2647 1.3234,0.6352 1.3234,1.7998 -0.4234,0.6882 -0.8469,1.4293 -1.3763,1.9587 -0.4235,1.0587 -1.1116,1.9056 -1.4293,3.3349 -1.5351,0.9529 -3.0173,1.9057 -4.4995,2.8585 -0.3176,0.053 -0.6352,0.1059 -0.8999,0.2118z",
            "name": "海南"
        },
        "GUD": {
            "path": "M181.648 236.533c-1.1646,-0.7411 -1.0587,-1.4822 -1.3234,-2.1703 -0.4764,-0.6882 -0.8999,-1.3234 -1.3234,-1.9587 0,-1.641 -0.0529,-1.3763 0.8999,-2.0644 0.2647,-2.4351 0.4765,-2.6998 2.3822,-4.182 0.9528,-1.1116 1.7468,-1.9057 2.9644,-2.7526 1.0057,-1.2705 1.8527,-2.2233 3.0173,-3.335 0.9528,-0.5823 1.1646,-1.3234 1.4293,-2.2762 0,-2.3821 0.6352,-1.8528 1.7468,-3.335 -0.0529,-0.9528 -0.1058,-1.9057 -0.1588,-2.8585 0.7941,-0.794 0.847,-1.5351 0.9529,-2.3292 0.2117,-0.4235 0.4764,-0.847 0.7411,-1.2175 0.3176,0 0.6352,0 1.0058,0 0.5293,0.5294 1.1116,1.0587 1.6939,1.5881 0.3176,0 0.6352,0 1.0058,0 0.4235,-0.4235 0.3705,-1.5881 0.3705,-1.7998 -0.3176,-0.3706 -0.6352,-0.7411 -0.9528,-1.1117 0.0529,-0.0529 0.1588,-0.1059 0.2647,-0.1059 1.588,0 3.229,0 4.8701,0 0.5822,0.2647 2.3821,0.2118 3.229,-0.4235 0.1588,0 0.3706,0 0.5823,0 0,0.3177 0,0.6353 0,1.0058 -0.6881,0.7941 -1.3763,1.5881 -2.0645,2.4351 0.053,1.2175 0.3706,1.4822 2.3821,1.4822 0.9529,-0.4235 1.9057,-0.847 2.8586,-1.2705 0.3176,0 0.6352,0 0.9528,0 0.1588,0.1588 0.3706,0.3706 0.5823,0.5823 1.7469,0 2.5939,-2.2233 4.976,-1.4293 0.4764,0.5823 0.9528,1.1646 1.4822,1.7999 0.7411,1.0057 1.4822,2.0115 2.2233,3.0173 0,0.2647 0,0.5293 0,0.847 -0.9529,0 -1.0058,0.0529 -1.5881,0.3176 -0.5823,0.847 -2.1704,1.1116 -1.2175,2.5409 0,0.0529 0,0.1588 0,0.2647 -1.5881,0.6881 -3.282,1.9586 -4.7113,2.6468 -0.2647,0.2646 -0.5294,0.5293 -0.794,0.794 -0.5294,0 -0.7941,-0.2117 -0.8999,-0.4764 -0.3177,0 -0.6353,0 -0.9529,0 -0.2117,0.2647 -0.4235,0.5293 -0.5823,0.794 -0.2647,0 -0.4764,0 -0.6881,0 -0.6353,-0.9528 -1.0588,-0.5823 -1.5352,-0.5293 0,0.3705 0,0.794 0,1.2175 -0.794,0.794 -1.2175,-0.053 -1.5881,1.4292 -1.1645,0 -1.0057,-0.4764 -1.3763,-1.0057 -0.1059,-0.053 -0.2117,-0.053 -0.2647,-0.053 -0.4764,-0.4235 -0.8999,-0.8469 -1.3234,-1.2175 -0.2646,0 -0.5293,0 -0.794,0 -0.3705,0.5823 -0.3705,0.6882 -0.5823,1.4293 -0.3705,0.5293 -0.7411,1.0587 -1.0587,1.588 -1.1646,0.5823 -1.2175,0.6353 -1.8528,1.6411 -0.4234,0.0529 -0.794,0.1588 -1.1645,0.2646 -0.3706,0.3176 -0.7411,0.6353 -1.1117,0.9529 -1.3234,0 -1.5881,0.0529 -2.2233,0.4235 -0.1059,0.2117 -0.2117,0.4234 -0.3176,0.6352 -0.2118,0 -0.4235,0 -0.5823,0 -1.2705,-0.6352 -1.3763,-0.3176 -2.2762,0.1059 -1.0058,0.3176 -2.0116,0.6881 -2.9644,1.0587 -1.5352,0.0529 -2.1175,0.2117 -3.0703,1.1646 -0.053,0.3705 -0.1059,0.794 -0.1059,1.2175 -1.1116,0.4235 -1.2175,0.4235 -1.2175,1.641 0.3705,0.2647 1.7469,1.2175 1.7469,2.3821 -0.5823,0.4764 -1.3234,0.5823 -1.694,0.6352z",
            "name": "广东"
        },
        "YUN": {
            "path": "M136.282 232.298c-0.847,-0.847 -1.694,-1.3764 -2.4351,-1.694 0.1059,-1.3234 0.2118,-1.9586 -0.2646,-2.7526 -0.1589,-0.1588 -0.3177,-0.3176 -0.4765,-0.4235 -1.3234,0 -2.0645,0.6352 -2.6997,1.5881 -0.4764,-0.1059 -0.9528,-0.2118 -1.4293,-0.3177 -0.5293,-0.9528 -0.8469,-1.3234 -1.3234,-1.641 -1.3763,-1.9057 -1.1645,-1.4292 -3.0702,-1.5351 -0.8999,-0.8999 -0.6353,-2.2233 -0.6353,-2.9115 0.3706,-1.1116 0.5823,-2.1703 0.053,-2.8585 -2.1175,-0.6882 -1.9057,-0.4235 -1.9057,-1.6939 -0.2118,-0.5823 -0.3706,-1.1646 -0.5294,-1.694 -0.2117,-0.3176 -0.3705,-0.5823 -0.5293,-0.847 -0.4764,-1.9586 -0.7941,-2.1174 -2.2763,-2.1174 -0.8469,0.4235 -1.9586,1.1646 -2.6467,1.1646 -0.053,-0.0529 -0.1059,-0.1059 -0.1589,-0.1588 -0.0529,-1.4822 -0.0529,-2.9644 -0.0529,-4.3937 0.2118,-0.5823 0.4764,-1.1646 0.7411,-1.7469 1.1646,-1.4822 1.7998,-1.9586 3.4938,-3.1232 0.3705,-0.3705 0.7411,-0.7411 1.1646,-1.1116 0.0529,-0.7411 0.1058,-1.4822 0.1588,-2.1704 0.1588,-0.3176 0.3176,-0.6352 0.4764,-0.8999 0,-1.3763 -0.1059,-3.1232 0.5293,-3.7584 0.1588,-1.1117 0.2118,-2.1704 -0.2117,-2.8586 -0.7411,-0.6352 -1.4293,-1.2704 -2.1174,-1.8527 0,-0.5294 0,-1.0587 0,-1.5881 0.6352,0 1.2704,-0.1588 2.0645,-0.5294 0.5293,-1.6939 -0.3706,-3.229 -0.3706,-4.3936 0.5294,-0.4235 0.8999,-1.1117 1.7998,-0.2118 0.5294,1.1117 1.2176,2.3292 1.4822,4.129 0.4765,0.4764 0.3176,0.3176 1.2705,0.4764 0.5823,-0.8469 0.4764,-2.2233 0.4764,-2.8055 0.2118,-0.2118 0.4235,-0.3706 0.6352,-0.5294 0.4235,0.5823 0.7411,1.4822 1.1117,2.6997 0.4235,0.6882 0.9528,1.694 2.0115,2.7527 0.6353,0.1059 1.2705,0.2117 1.9587,0.3176 0.5823,1.1116 1.1646,2.2762 1.7998,3.4408 0.5823,0.7941 1.2175,1.5881 1.8527,2.3821 0,0.2647 0,0.5294 0.053,0.847 -0.6882,0.8999 -0.7411,0.6352 -0.7411,2.1704 0.6881,0.8469 0.9528,1.5351 2.5409,1.9586 0.3176,0.2117 0.5823,0.5823 1.5881,0.8999 0.4234,-0.0529 0.8999,-0.1059 1.3763,-0.1588 1.2175,-0.5294 2.435,-1.0587 3.7055,-1.5881 0.6882,-1.1116 0.6352,-1.7998 0.6352,-2.7526 -0.4764,-1.0058 -1.0058,-1.1117 -1.4292,-1.4822 0,-1.2176 -0.1588,-1.3234 0.3176,-1.9587 1.0058,-0.4764 2.0645,-1.1646 2.8056,-2.2762 0,-0.4764 0,-0.8999 0.0529,-1.3234 -0.3705,-1.1116 -0.6352,-1.3763 -1.0587,-1.7998 -0.0529,-0.1588 -0.0529,-0.2647 -0.0529,-0.3706 0.2646,-0.0529 0.5293,-0.1058 0.794,-0.1588 1.5351,-1.5351 -0.0529,-2.3291 2.9644,-2.0115 0.3176,0.9528 0.6882,1.9586 1.0587,2.9644 0.3706,0.4235 0.5823,0.794 1.3763,1.3763 0.5823,0 1.1646,0 1.7999,0 0.5293,-0.4235 1.1116,-0.794 1.6939,-1.1646 0.0529,0.1588 0.1588,0.3176 0.2647,0.4764 0,0.7411 0.0529,2.488 -0.7941,3.335 -0.6352,0.1588 -0.794,0.2647 -1.3763,0.2647 -0.5823,-0.3176 -1.1116,-0.6353 -1.641,-0.8999 -2.0116,0 -2.5938,0.1588 -3.9702,1.3234 -0.2117,0.3176 -0.3705,0.6352 -0.5293,0.9528 0,0.6352 -0.2647,1.1646 0.2117,2.1704 0,0.5823 0.7411,2.1174 2.0116,1.2704 1.2175,-0.2117 2.1174,-0.7411 2.1174,1.3234 -0.2647,0.7941 -0.4764,1.5881 -0.6882,2.3821 -1.3234,1.694 -0.7411,2.5409 1.5352,3.335 -0.053,0.4764 -0.053,0.9528 -0.053,1.4292 -0.1588,0.6353 -0.8469,2.1704 -0.1588,3.2291 0.4764,0.5823 1.0058,1.1646 1.5352,1.7469 1.1116,0.2647 2.2233,0.5823 3.3879,0.8999 0.3705,0.2118 0.4764,0.4764 1.1645,0.7411 0.4235,0 0.847,0.053 1.3234,0.1059 0.053,0.3176 0.1588,0.6882 0.2647,1.0587 -0.2117,0.2647 -0.3705,0.5823 -0.5293,0.8999 -0.7411,0.5294 -1.4293,0.847 -1.9587,1.0587 -1.9586,0 -3.1232,0.6882 -4.4466,1.694 -0.2647,0.4764 -0.5823,1.2704 -1.2175,1.6939 -0.6882,0 -1.3234,0 -1.9586,0.053 -0.5294,0.4764 -1.3234,1.7998 -2.3292,1.588 -1.0587,-1.9586 -2.1174,-1.1116 -3.1232,-0.3705 -1.4293,0.4764 -1.7998,-0.5294 -2.3821,-0.8999 -1.641,-0.5294 -2.0116,0.2117 -2.6468,1.2175 -0.7411,0.7411 -1.9057,-0.1588 -2.2233,-0.4235 -0.2647,0 -0.5294,0 -0.7411,0 -1.0058,0.8999 -0.847,0.6882 -1.0058,2.2762 0.5294,0.8999 1.2175,1.4293 0.7411,2.9644 0,0.7941 0.3706,1.694 0.5294,3.0703 -0.3176,0.3176 -0.4764,0.4764 -0.7411,0.5294z",
            "name": "云南"
        },
        "GXI": {
            "path": "M175.931 230.339c0,-0.3177 0,-0.6353 0,-0.9 -0.2647,0 -0.3706,-0.3176 -0.4765,-0.4764 -0.2117,-0.0529 -0.4234,-0.1059 -0.5823,-0.1059 -0.3705,-1.2704 -1.0057,-1.2175 -1.641,-0.9528 -0.1058,0.4235 -0.2117,0.847 -0.3176,1.2705 -1.1646,0.0529 -2.3292,0.1588 -3.4408,0.2646 -0.7411,-0.1588 -1.4293,-0.3176 -2.1174,-0.4764 -0.5823,-0.1059 -1.1646,-0.1588 -1.7469,-0.2117 -0.4764,-0.5294 -0.8999,-1.0058 -1.3234,-1.4822 -0.2118,-0.3176 -0.3706,-0.6353 -0.5294,-0.9529 -0.1058,0 -0.1588,0 -0.2117,0 -0.4235,-1.2704 -0.0529,-1.641 0.4235,-2.3821 0,-0.4764 0,-0.8999 0,-1.3234 -0.4235,-0.2646 -0.847,-0.5293 -1.2175,-0.794 -0.053,-0.1059 -0.053,-0.2118 -0.053,-0.2647 -1.6939,0 -3.0703,-0.1588 -4.1819,-0.3176 -0.3706,-0.1588 -0.7411,-0.3176 -1.1117,-0.4764 -0.1588,-0.4235 -0.3176,-0.847 -0.4764,-1.2705 0.4764,-0.0529 1.0058,-0.1059 1.5352,-0.1059 0.4764,-0.1588 1.3234,-0.794 1.8527,-1.2704 0.6882,-1.1646 0.6352,-1.9586 0.0529,-2.6997 -0.4764,-0.053 -0.9528,-0.1059 -1.3763,-0.1059 -1.641,-1.1646 -3.5467,-1.3234 -4.7642,-1.9057 -0.6352,-0.7411 -0.9528,-1.2705 -0.9528,-1.5881 1.0587,-1.4292 0.9528,-1.9057 3.0702,-1.9057 0.4765,0.1589 0.9529,0.3177 1.4822,0.5294 0.4765,0.4235 0.9529,0.847 1.4293,1.2705 0.794,0.1588 1.4822,0.2646 2.6468,0 1.1646,-0.847 2.2233,-2.488 3.3879,-3.4938 0,-0.3705 0,-0.7411 0.0529,-1.1116 0.3706,-0.053 0.794,-0.1059 1.2175,-0.1059 0.1588,0.2117 0.3176,0.4235 0.4765,0.6881 0.6352,0.2118 1.3233,0.9 2.5409,1.2705 0.3176,0 0.6352,0 0.9528,0 0.6882,-0.2647 1.3763,-0.4764 2.1174,-0.6882 0.9,-0.8999 1.5352,-1.3763 2.6998,-1.8527 0.1588,-0.2118 0.2646,-0.4235 0.5823,-0.5823 0.8469,-1.2705 1.6939,-1.5881 3.229,-1.7469 0.5823,-0.0529 1.2176,-0.0529 1.8528,-0.0529 1.5351,-1.0058 1.9586,-1.8528 4.129,-1.8528 0.3176,0.5823 0.6881,1.2175 1.0587,1.8528 0.3176,0.2647 0.6352,0.5293 0.9528,0.8469 -0.5293,0.9529 -1.2704,1.7999 -1.6939,2.9115 -0.0529,0.4764 -0.0529,0.9529 -0.0529,1.4293 0.1588,0.1588 1.0057,0.1588 1.6939,0.1588 0.1588,0.4764 0.3176,0.9528 0.4764,1.4822 0.1588,0.2117 0.3176,0.4235 0.4764,0.6352 0.6882,-0.1059 1.4293,-0.2117 2.1704,-0.2647 0.4764,0.6353 0.7411,1.641 0.7411,2.9644 -0.2647,0.3177 -0.5293,0.6882 -1.1646,1.0058 0,0.2118 -0.2646,0.3176 -0.3705,0.3706 -0.1059,0.7411 -0.2118,1.5351 -0.3176,2.3291 -0.2118,0.4235 -0.4235,0.847 -0.5823,1.3234 -0.4235,0.2647 -0.9529,0.4765 -0.9529,0.8999 -1.3234,0.2647 -2.0645,2.6468 -3.2291,3.2291 0,0.2118 -0.7411,0.6353 -0.8999,0.6882 -0.4764,0.4764 -0.9528,0.9528 -1.3763,1.4822 -0.0529,0.0529 -0.0529,0.1588 -0.0529,0.2647 -0.1059,0 -0.2118,0 -0.2647,0 0,0.0529 0,0.1588 0,0.2647 -0.7411,0 -1.3234,0.9528 -1.641,1.3233 -0.2647,0.5823 -0.5294,1.1646 -0.7411,1.7469 -1.3234,0.2647 -1.7469,0.5294 -2.5939,1.1646 -0.3176,0 -0.5823,0 -0.8469,0.053z",
            "name": "广西"
        },
        "TAI": {
            "path": "M238.024 222.399c-0.5293,-0.7941 -1.0587,-1.5352 -1.5351,-2.2763 -0.3176,-0.1058 -0.6353,-0.2117 -0.9529,-0.2646 -0.2647,-1.0058 -0.9528,-2.1175 -1.3234,-2.2763 -0.0529,-0.3705 -0.0529,-0.7411 -0.0529,-1.1116 0.1588,-1.1117 0.4235,-1.9057 0.4235,-2.8056 -0.6352,-2.0116 0.2647,-2.4351 1.1646,-3.7055 0.1058,-0.5823 0.2117,-1.1646 0.3176,-1.7469 0.7411,-1.7469 1.1116,-2.8056 2.3292,-4.0231 0.5293,-0.4764 1.0587,-0.8999 1.588,-1.3234 0.5823,-0.0529 1.1646,-0.0529 1.7469,-0.0529 0,0.2117 0.4764,1.5351 0.3176,2.1703 -1.1116,1.4822 -0.4764,4.129 -0.5293,6.5641 -0.4235,1.4292 -1.3764,3.3349 -2.1704,4.87 -0.1588,0.3177 -0.2647,0.6353 -0.3705,0.9529 -0.2118,1.5351 -0.3706,3.0703 -0.5294,4.6583 -0.1588,0.1059 -0.3176,0.2118 -0.4235,0.3706z",
            "name": "台湾"
        },
        "FUJ": {
            "path": "M219.073 214.3c0,-0.9528 -0.6882,-1.5881 -1.0058,-1.7469 -0.0529,-0.1058 -0.0529,-0.2117 -0.0529,-0.2646 -0.9529,-1.2705 -1.9057,-2.488 -2.8585,-3.7055 -1.3234,-0.4235 -2.1175,-0.1059 -2.8586,-0.3177 -0.2647,-1.3763 0,-1.9057 0.2118,-2.9644 0.5293,-1.0587 0.1058,-1.8527 0.1058,-2.6997 0.5294,-0.6352 1.0588,-1.2704 1.5881,-1.8527 0.053,-0.4235 0.1588,-0.847 0.2647,-1.2176 0,-0.8999 -0.3176,-2.3291 0.1059,-2.7526 0.4235,-0.3176 0.8999,-0.5823 1.3763,-0.847 0.3176,-0.3705 0.6352,-0.7411 1.0058,-1.1116 0.1058,-0.3177 0.2647,-0.6353 0.4235,-0.9529 -0.053,-0.3176 -0.053,-0.6352 -0.053,-0.8999 -0.8469,-1.6939 -0.4235,-1.9057 0.8999,-2.7527 0.8999,-0.2646 1.641,-0.1588 2.6468,-0.6352 0.6882,-0.4235 1.3234,-1.5881 1.641,-2.3292 0.4765,-0.1588 0.7411,-0.2117 1.3764,0.2647 0.5823,1.2175 0.4234,3.3879 2.435,4.4466 0.8999,0.053 1.8528,0.1059 2.8056,0.2118 0.7411,-0.7411 2.2233,-0.6882 3.4408,-0.7411 0.1588,0.0529 0.3176,0.1588 0.5294,0.2646 -0.5823,0.5823 -1.0587,0.847 -1.5352,1.694 -0.0529,0.5293 -0.0529,1.0587 -0.0529,1.5881 -1.3234,0 -3.1232,-0.4235 -2.8056,1.2175 0.3706,0.2117 0.6882,0.4235 1.0587,0.9528 0.2647,0.1588 0.5294,0.3176 0.7941,0.5294 -0.2647,0.2117 -0.4765,0.4235 -0.6882,0.6352 0,1.1646 -0.9528,2.5939 -0.2117,3.7585 0.1588,0.1058 0.3176,0.2646 0.5293,0.4234 0,0.053 0,0.1059 0,0.1588 -0.1059,-0.0529 -0.2117,-0.1058 -0.3176,-0.1058 -0.4764,0 -0.9528,0 -1.4293,0.0529 -0.4235,0.4235 0,0.5294 -0.1588,1.4822 -1.3763,0.9529 -1.1646,0.5823 -1.5351,2.4351 -0.3706,0.3705 -0.7411,0.7411 -1.0587,1.1645 -0.5823,0 -1.1646,0.053 -1.7469,0.1059 -0.3706,0.3706 -0.4764,0.8999 0.3705,1.5352 -1.7468,0.4234 -2.5409,1.7468 -3.5996,3.0173 -0.0529,0.2117 -0.1059,0.4764 -0.1588,0.7411 -0.5294,0.6352 -0.9528,0.8999 -1.4822,1.2175z",
            "name": "福建"
        },
        "GUI": {
            "path": "M160.209 211.388c-1.4292,-0.5293 -1.7468,-1.2175 -2.3291,-1.588 -0.3706,-0.1588 -0.7411,-0.2647 -1.0587,-0.3706 -1.6411,0 -1.9587,-0.1588 -3.0703,0.7411 -0.2647,0.3176 -0.5294,0.6882 -0.7941,1.0587 0,-0.794 0.2118,-1.3763 0.3706,-1.7998 0,-0.6881 0.0529,-1.3763 0.1059,-2.0645 -0.7411,-0.3705 -1.4822,-0.6881 -2.2233,-1.0058 0,-0.4234 0.1588,-0.8469 0.3705,-1.1116 0.2647,-0.9528 0.5294,-1.8528 0.794,-2.7527 0.4765,-0.4764 0,-1.6939 0,-1.8527 -0.2646,-0.2647 -0.4764,-0.5294 -0.6881,-0.7411 -0.847,0 -1.694,0.2647 -2.5409,0.4764 -0.847,0 -0.7411,-1.1116 -0.7411,-1.2175 -0.1059,-0.2118 -0.2118,-0.4235 -0.2647,-0.5823 0,-2.488 1.1116,-2.5939 2.9644,-3.0703 0.2647,0 0.5293,0 0.794,0 0.8999,0.5294 2.0645,1.3234 3.4938,0.6352 0.2117,-0.2646 0.4235,-0.5293 0.6881,-0.794 0.053,-0.3176 0.1589,-0.6352 0.2647,-0.9528 0.1588,-0.053 0.3176,-0.053 0.5294,-0.053 0.4764,0.4765 2.6468,0.4765 3.9172,0.4765 0.9529,-0.9529 0.7411,-1.9587 0.7411,-2.9644 -1.3234,-1.3234 -2.3291,-1.3764 -3.4937,-1.9057 -0.5294,-1.1117 -0.1059,-1.4293 0.9528,-1.4293 0.3706,0.2117 0.7411,0.4764 1.1117,0.7411 0.6881,0.1059 1.3763,0.2647 2.0645,0.4235 2.0115,0 4.5524,-1.7998 5.4523,-3.5996 0,-1.4293 1.0058,-1.5352 2.2233,-1.5352 1.0058,0.4764 1.694,1.7469 1.9057,3.335 0.7941,1.0057 1.5352,2.1174 2.9115,3.2291 0.5294,0.1588 1.0587,0.3705 1.5881,0.5822 0.1588,0.7411 0.8469,2.0116 0,3.1233 -1.7469,1.1645 -2.9115,0.3176 -2.6468,2.9644 0.3705,0 0.8999,-0.053 1.3234,-0.2647 0.6881,-0.053 1.3763,-0.053 2.0645,-0.053 -0.1059,1.1646 -0.1588,2.3292 -0.2118,3.5467 0.2118,0.4765 0.4765,0.6882 1.2176,1.4293 0.2117,0.3706 0.4234,0.7411 0.6352,1.1117 -1.2175,0 -1.7998,0.5822 -2.5939,1.0587 -0.8999,1.3763 -2.4879,1.9057 -3.6525,3.0702 -0.9529,0.3706 -2.2233,0.7411 -3.1232,0.6353 -0.4765,-0.2647 -0.9529,-0.5294 -1.4293,-0.7941 -1.3234,-1.4822 -1.1117,-0.9528 -2.4351,-1.0587 -0.2117,0.1059 -0.4234,0.2118 -0.5822,0.3706 -0.053,0.3705 -0.1059,0.7411 -0.1059,1.1116 -0.8999,0.8999 -1.8528,1.8528 -2.5409,2.9115 -0.8999,0.4235 -1.5352,0.4764 -1.9587,0.5293z",
            "name": "贵州"
        },
        "HUN": {
            "path": "M190.806 211.123c-0.847,-0.847 -1.7469,-0.2647 -2.435,-0.1059 -0.1588,-0.2647 -0.3177,-0.5294 -0.4765,-0.794 0,-1.7999 -1.2704,-1.3234 -2.0115,-1.3234 0,-0.2647 0,-0.4765 0,-0.6882 0.6881,-1.2175 1.5881,-2.5939 1.7469,-3.6526 -0.847,-0.8469 -1.5352,-1.5351 -1.641,-2.2762 -0.7411,-0.9528 -1.0588,-0.6882 -1.5881,-0.6882 -0.5294,0.1059 -1.0587,0.2118 -1.5881,0.3706 -0.6882,0.6881 -1.4293,1.1116 -2.0645,1.4822 -0.5823,0 -1.1116,0.0529 -1.641,0.1059 -0.2117,-1.3764 -1.1116,-1.8528 -1.5351,-2.2763 -0.1059,-0.1588 -0.2118,-0.3176 -0.2647,-0.4764 0,-1.3234 0,-2.6468 0.0529,-3.9702 -1.3234,0 -2.3291,0.0529 -3.282,0.3706 0,-1.3234 0.5294,-1.0058 1.641,-1.3234 1.0058,-0.4765 1.5352,-1.641 1.5352,-2.5939 -0.2647,-1.0058 -0.5294,-2.0115 -0.7411,-2.9644 -0.053,-1.2175 -0.1059,-2.3821 -0.1059,-3.5467 -0.1059,-0.4235 -0.2118,-0.847 -0.3176,-1.2175 1.1116,-0.5294 1.588,-1.5881 2.0645,-2.6468 0.9528,-0.5823 1.641,-1.4822 3.1232,-1.0058 0.4764,0 1.1116,-0.1058 1.3234,-0.7411 0,-1.1116 -0.3706,-1.2704 -0.7941,-1.6939 0.1588,-0.847 1.8528,-0.2118 2.8586,0.1588 0.4764,0.0529 0.9528,0.1059 1.4822,0.1588 0.9528,0.5294 2.4879,1.2175 3.6525,2.0645 0.4765,0.1588 1.0058,0.3176 1.5352,0.5293 0.4764,0 0.9528,0 1.4822,0.053 0.3176,-0.4235 0.6881,-0.847 1.0587,-1.2175 0.4764,0 1.2175,0.4764 1.9586,1.4292 0.3176,0.1588 0.6352,0.3176 1.0058,0.5294 0.847,0.2117 2.2762,1.3234 3.2291,2.5938 0.3176,1.1646 0.6881,2.3821 0.0529,3.9702 -1.641,1.7998 -2.5938,2.6997 -1.1116,5.3465 0.0529,0.3176 0.1588,0.6353 0.2646,1.0058 0.3706,0.3706 0.8999,2.7527 1.1117,3.8114 0.6881,0.8999 0.6881,1.5351 0.3176,2.9115 0,0.8469 -0.0529,1.8527 0.4764,3.1761 -1.8527,0.0529 -3.7055,0.1059 -5.5582,0.2117 -0.4235,0.4235 0.3705,1.3234 1.0057,2.0645 -0.1058,0.2647 -0.2117,0.5823 -0.2646,0.8999 -0.7941,0 -1.8528,-1.4822 -1.9587,-1.588 -0.5823,-0.053 -1.1645,-0.053 -1.6939,-0.053 -0.3176,0.4765 -0.6352,0.9529 -0.9528,1.4293 -0.053,0.4764 -0.1059,1.7469 -0.9529,2.1704z",
            "name": "湖南"
        },
        "JXI": {
            "path": "M204.781 210.7c-0.3706,-0.3706 -0.847,-0.3176 -1.2176,-0.4764 -0.0529,-0.1059 -0.0529,-0.2118 -0.0529,-0.3177 0.6882,-0.8469 1.3763,-1.6939 2.0645,-2.5409 0,-1.0058 -0.1059,-1.2175 -0.3176,-1.6939 -1.0587,0 -1.3764,0.1588 -2.0116,0.5293 -0.4764,0 -0.9528,0 -1.4293,0.053 -0.2117,-0.6882 -0.4234,-1.3764 -0.5822,-2.0116 0,-1.5881 0.4764,-2.8585 0.1588,-4.076 -0.1588,-0.1588 -0.3177,-0.3176 -0.4765,-0.4765 0,-1.6939 -1.0587,-3.3349 -1.2704,-4.5524 -0.7941,-1.641 -1.1646,-2.4351 -0.2647,-3.7055 0.5294,-0.1588 1.3234,-1.641 1.5881,-2.1175 0,-0.8999 0,-1.7998 0,-2.6997 -0.2118,-0.5293 -0.4235,-1.0587 -0.6353,-1.5881 -0.1588,-0.1588 -0.3176,-0.3176 -0.4234,-0.4764 0.3705,-0.3705 0.794,-0.7411 1.2175,-1.0587 0.0529,0 1.5881,-0.2117 1.7469,-0.5294 0.1058,-0.0529 0.2117,-0.0529 0.3705,-0.0529 0.794,-1.2175 2.5409,-1.7998 3.6526,-2.6997 0.6881,-1.3763 3.0703,-0.8999 4.4995,-1.9586 0.4235,-1.1117 0.4235,-1.1117 1.7469,-1.1117 0,0.794 0.0529,1.5881 0.1059,2.4351 0.2647,0.4234 0.794,0.3705 1.3763,0.4234 0.847,-0.6881 0.5823,-1.641 1.0058,-2.0645 0.1588,0.3706 0.6352,1.694 1.8527,1.9587 0.8999,0 1.641,-0.1059 2.6998,-0.6353 0.2646,0 0.5823,0 0.8999,0 -0.4765,1.0058 -1.694,1.5352 -1.3764,2.8056 0.8999,0.9529 1.694,2.0116 2.541,3.5467 -0.053,0.3706 -0.053,0.7941 -0.053,1.2176 -0.3176,0.3176 -0.4235,0.7411 -0.7411,1.3763 -1.2704,1.5881 -2.3821,0.9528 -3.6526,1.5881 -1.3233,1.1116 -1.641,0.794 -1.4292,2.6997 0.5293,0.5293 0.4764,1.2175 0.0529,2.0645 -0.3705,0.3705 -0.7411,0.7411 -1.0587,1.1116 -1.8527,1.2705 -1.7469,0.9529 -1.4293,3.6526 -0.1588,0.4764 -0.2646,0.9528 -0.3705,1.4293 -1.1646,1.0057 -1.4822,1.0587 -1.4822,2.7526 0.0529,0.3706 0.1059,0.7411 0.1588,1.1646 -0.3706,0.794 -0.794,2.2762 -0.6352,3.4938 0.1058,0.2117 0.2117,0.4764 0.3176,0.7411 -0.6353,0.3176 -1.2175,0.6352 -1.7998,1.0057 -1.2705,-1.2704 -2.488,-0.3176 -3.8114,0.2647 -0.5294,0.1588 -1.0587,0.3176 -1.5351,0.5294z",
            "name": "江西"
        },
        "SCH": {
            "path": "M139.934 204.083c-0.1588,-0.0529 -0.3176,-0.1059 -0.4764,-0.1588 -1.1646,-0.9528 -1.8527,-1.0058 -2.6997,-1.641 -0.2647,-0.3176 -0.5294,-0.5823 -0.7411,-0.847 0,-0.2647 0,-0.5293 0,-0.7411 1.3763,-1.641 0.6352,-2.488 -0.1588,-3.6525 -1.1646,-1.1646 -1.5881,-2.6468 -2.2233,-3.2821 -0.794,-1.9056 -0.6352,-1.4292 -2.0645,-1.588 -0.3176,-0.1588 -0.6352,-0.2647 -0.8999,-0.3706 -0.4235,-0.5823 -0.847,-1.1646 -1.2175,-1.7469 -0.3177,-0.8469 -0.6353,-1.6939 -0.8999,-2.5409 -0.2647,-0.3705 -0.5294,-0.6881 -0.7411,-1.0058 -2.1704,0 -1.0588,1.9587 -1.7469,3.335 -0.1588,-0.0529 -0.3176,-0.1059 -0.4235,-0.1588 0,-1.2705 -0.6882,-2.3821 -0.8999,-3.2291 0.5293,-0.3176 0.4235,-1.4293 0.4235,-1.4822 0.0529,-0.6882 0.1058,-1.3234 0.2117,-1.9586 -0.6882,-1.2175 -0.8999,-2.6468 -0.6352,-3.5997 0.3176,-0.4234 0.6352,-0.8469 1.0058,-1.2175 -0.1059,-0.794 -0.1588,-1.588 -0.2118,-2.3291 -0.3705,-0.5823 -0.7411,-1.1117 -1.0587,-1.6411 -0.3176,-1.2175 -0.6882,-2.5938 -1.0587,-3.229 -1.3234,-1.4822 -2.5939,-3.1232 -2.8056,-4.3937 -0.6352,-0.4235 -1.2705,-0.847 -1.8528,-1.2175 -0.1058,-0.1588 -0.2117,-0.3176 -0.3176,-0.4765 -0.1058,0 -0.1588,0 -0.2117,0 0,-0.8999 -0.1588,-1.7468 0.0529,-2.2233 1.2175,-0.5822 1.1646,-1.6939 1.1646,-2.6997 -0.4235,-0.5293 -0.847,-1.0587 -1.2175,-1.5351 0,-0.3706 0,-0.7411 0,-1.1117 1.2175,-0.1058 2.435,-0.1588 3.7055,-0.2117 0.4764,0.1588 1.3763,1.0587 1.8527,2.0645 0,1.4293 1.3234,3.1232 2.8056,4.3937 0.5294,0.0529 1.0587,-0.1589 1.641,0.9528 0.5294,0 1.0588,-0.0529 1.7999,-0.6352 0.1058,-0.053 0.2117,-0.053 0.3705,-0.053 0.0529,0.053 0.1588,0.1059 0.2647,0.2118 0,0.6881 0.847,0.7411 1.7469,0.8469 0.1058,0.1589 0.2646,0.3177 0.4235,0.5294 0.3176,0 0.6352,0 1.0057,0 0.2647,-0.2647 0.5823,-0.5294 0.8999,-0.7411 0.7411,-0.1588 1.5352,-0.3176 2.3292,-0.4235 0.1059,-0.2117 0.2118,-0.4235 0.3706,-0.5823 0,-1.641 -1.2705,-3.7584 -0.5823,-4.4466 0.3705,0.2118 0.7411,0.8999 1.7468,1.2705 0.1059,0.1059 0.2118,0.2647 0.3706,0.4235 0.6882,0.3176 1.7469,0.3705 2.7527,0 0.2646,-0.2647 0.5293,-0.5294 0.8469,-0.7941 0,-1.588 -0.5293,-2.0115 -0.6352,-2.7526 0.5294,-0.5294 1.5881,-2.0116 2.6997,-1.2705 0.3706,0.794 0.5294,1.3763 1.9057,2.2762 0.3706,0.1589 0.794,0.3177 1.2175,0.5294 0.5823,0.847 1.9587,1.3763 2.8056,2.9115 0.1059,0.3176 0.2118,0.6881 0.3706,1.0587 0.2647,0.5823 1.0587,1.9586 2.2233,2.3292 1.1646,-0.053 2.3292,-0.053 3.4937,-0.053 0.7941,-0.4235 1.2705,-0.8999 2.488,-0.7411 0.7411,0.2118 1.4822,0.4764 2.2233,0.7411 0.6882,0 1.4293,0 2.1704,0.053 0.794,0.5823 1.0587,1.1645 2.5938,1.3234 0.3177,0.2646 0.6882,0.5293 1.0588,0.8469 0,0.847 0,1.694 0,2.5409 -1.0588,1.0588 -1.7469,2.5939 -2.1175,4.0232 -0.6881,1.0587 -1.5351,2.0645 -2.5409,3.0702 -2.1174,0.5294 -2.1174,-0.3705 -3.4408,-1.2704 -0.7411,-0.9529 -1.694,-1.0058 -2.1704,-0.9529 -0.1058,0.1059 -0.2117,0.2118 -0.2647,0.3176 0,0.6353 0,1.3234 0,2.0116 0.4235,0.847 0.4765,1.5881 0.4765,2.8585 -0.2647,0.8999 -0.5294,2.2233 -0.2118,3.4938 0.2647,0.2647 0.5294,0.5823 0.7941,0.8999 0.6881,0.3176 2.0645,2.1174 0.794,3.3879 -1.1646,0.794 -1.2175,0.4235 -1.2175,2.0645 0.5293,1.0587 2.3291,0.8999 3.7055,2.2762 0,0.4765 0,1.641 -0.5294,2.1704 -1.4822,0 -3.0173,-0.2647 -3.8114,-0.6352 -0.0529,-0.9529 -0.3176,-1.8528 -0.5823,-2.3292 -1.3233,0 -1.4292,0.6882 -2.3291,1.1116 -0.4764,-0.0529 -0.8999,-0.0529 -1.3234,-0.0529 -1.4822,-1.0587 -1.694,-2.5409 -1.9057,-3.6526 -0.2117,-0.2646 -0.4235,-0.5293 -0.5823,-0.7411 -2.1174,0 -2.6468,-0.2646 -2.9644,1.694 -0.5823,0.5823 -0.9528,0.4764 -1.4822,0.794 0,0.2647 0,0.5823 0.0529,0.8999 0.4235,0.5294 1.3234,1.4293 0.9529,2.7527 -0.4764,0.9528 -2.0116,1.5881 -2.7527,2.1174 -0.1059,0.1588 -0.2117,0.3176 -0.3176,0.4764 0,0.6353 0,1.3234 0,2.0116 0.4235,0.8999 1.4293,0.3706 1.4293,2.5939 -0.1588,0.2646 -0.2647,0.5293 -0.3706,0.8469 -0.4235,0.1588 -0.794,0.3706 -1.1646,0.5823 -1.1646,0.4235 -2.2762,0.847 -3.3879,1.3234z",
            "name": "四川"
        },
        "TIB": {
            "path": "M94.5685 195.243c-0.5294,-0.5293 -3.8114,-0.3705 -4.2349,-0.3705 -0.2117,0.0529 -0.4235,0.1059 -0.6352,0.2117 -3.0173,-0.2117 -1.3234,-1.3234 -0.794,-2.8056 0,-0.3705 0,-0.7411 0,-1.1116 -2.0116,-0.6352 -1.8528,-1.1646 -2.1704,-2.3292 -0.1059,-0.1588 -0.2117,-0.3176 -0.3176,-0.4235 -1.0587,0 -1.8528,-0.1058 -2.5939,-0.3176 -0.3176,-0.4235 -0.5823,-0.847 -0.8469,-1.2175 -1.3234,-0.3706 -2.541,-1.0058 -3.0703,-1.4293 -0.2118,-0.1058 -0.4235,-0.2117 -0.6352,-0.2647 -0.6353,0 -1.2176,0 -1.7999,0 -0.794,0.4765 -1.2704,1.3234 -2.2762,1.694 -0.2647,0.2117 -0.4764,0.4235 -0.6882,0.6352 -0.1588,0.2647 -0.2646,0.5294 -0.3705,0.7941 -0.1588,0.6352 -0.2647,1.3233 -0.3706,2.0115 -2.4879,-0.3705 -1.7998,-2.5409 -1.0587,-3.8643 0,-0.2647 0,-0.5294 0,-0.794 -1.1116,-0.847 -1.0587,-0.5294 -1.7998,-0.6353 -2.1174,0.4235 -3.1232,0.5294 -4.4995,1.3234 -1.5352,0 -2.3292,-1.0587 -2.6998,-1.8527 -0.2646,-0.2647 -0.5293,-0.5294 -0.7411,-0.7411 -1.3763,0 -2.6997,0 -4.0231,0 -1.1116,-0.7411 -1.2704,-2.1704 -1.6939,-2.9115 -0.847,-0.2647 -0.8999,-0.2117 -1.2175,-0.7411 -0.3706,-0.3176 -0.7411,-0.5823 -1.1117,-0.847 -0.6882,-0.2646 -1.3763,-0.4764 -2.0645,-0.6881 -2.0645,-1.7998 -1.5351,-2.0645 -1.7998,-4.0231 -0.1588,-0.3177 -0.3176,-0.6353 -0.4764,-0.9529 -0.7941,0 -1.5352,0 -2.2763,0.0529 -1.588,-0.5293 -1.4822,-1.0057 -1.6939,-1.9586 -0.6882,-0.8469 -1.1646,-1.1116 -1.5881,-1.3234 -0.6881,-0.5823 -1.3763,-1.1646 -2.0115,-1.7468 -0.5823,-0.9529 -1.1646,-1.9057 -1.7469,-2.8586 -1.1117,0 -1.4293,0.053 -2.0645,0.3176 -0.4235,0.2118 -0.847,0.4235 -1.2175,0.6882 -0.6353,0 -1.2705,0 -1.8528,0 -1.6939,-1.1117 -1.7998,-2.6468 -2.0115,-3.8643 -0.5294,-0.794 -1.0058,-1.5881 -1.4822,-2.3821 -1.5881,-1.5881 -3.5467,-2.1175 -5.0819,-2.5939 -1.1116,-0.794 -0.4764,-1.588 -0.1588,-2.1174 0.4235,-0.2647 0.6352,-1.0058 0.7411,-1.1646 0,-1.2704 0.053,-2.488 0.1059,-3.7055 -0.5823,-1.5881 -1.0587,-1.7469 0.5823,-1.7469 0.1588,0.1059 0.3176,0.2647 0.5293,0.4235 0.2118,0.5294 1.2176,2.488 2.3821,1.0058 0.1589,-0.5294 0.3177,-1.0058 0.4765,-1.4822 -0.1059,-1.1117 -0.2118,-2.1704 -0.2647,-3.2291 -0.3176,-0.847 -0.6352,-1.641 -0.9529,-2.435 -0.3705,-1.8528 -0.2117,-2.5939 0.9,-3.4409 0.1588,-0.2646 0.3176,-0.5293 0.5293,-0.794 0.6352,0.2647 1.2705,0.5294 1.9586,0.794 0.5823,0 1.1646,0 1.7999,0 0.4764,-0.4764 1.0587,-0.6881 1.641,-1.3763 0.6352,-1.7469 1.3234,-2.6468 3.0173,-3.5996 0.4764,0 0.4764,-0.053 1.4822,0.2647 0.7411,0.4764 1.5351,0.9528 2.3292,1.4292 0,1.4293 1.588,0.7411 2.5938,0.4235 0.5823,-0.1059 1.2175,-0.2117 1.8528,-0.3176 1.2704,-1.2705 1.1116,-1.8528 2.9114,-0.6882 0,1.4822 0,1.3234 1.5881,2.3292 0.5823,0.2117 1.1646,0.4764 1.7998,0.7411 0.4765,0 0.9529,0 1.4822,0 0.8999,-0.4235 1.9057,-0.794 3.2291,-0.8999 1.7998,-0.6882 1.7469,-0.9528 3.8643,0.1059 0.6882,0 1.3764,0 2.1175,0.0529 0.6881,-0.5294 0.5293,-1.0058 1.3763,-1.2175 1.5351,-1.2705 2.2762,-1.9057 4.7642,-0.6882 1.6939,0 3.9702,-0.3705 6.0347,-0.3705 0.4764,0.2117 0.9528,0.4764 1.4292,0.7411 0.3706,0.3705 0.9529,1.1116 2.0116,1.3763 0,0.3705 0,0.794 0.0529,1.2175 0.4235,0.6352 1.641,1.641 1.1646,3.1232 -0.3176,0.5294 -0.6352,1.0587 -0.8999,1.5881 0,0.6352 0,1.2705 0,1.9057 0.3706,3.282 -0.3176,6.7228 2.6468,9.6872 0.4764,0.2647 1.4822,0.9529 2.3821,1.3234 0.7411,0.1059 1.4822,0.2118 2.2233,0.3706 1.0587,2.0645 2.6997,2.7526 5.4524,3.1761 1.1117,0.847 1.8528,1.7469 3.8114,1.9586 1.7998,-0.0529 3.5996,-0.1058 5.3994,-0.1058 0.3706,0.1058 0.7941,0.2647 1.2175,0.4235 0.5294,0.3176 1.1117,0.6881 1.694,1.0587 0.3176,0.794 0.6882,1.588 1.0587,2.3821 0.3706,1.4293 0.3176,1.5881 1.9057,2.9644 0.3705,0 0.7411,0 1.1116,0.0529 0.1589,-0.3176 0.3706,-0.6352 0.5823,-0.9528 0.3177,-0.053 0.6353,-0.1059 0.9529,-0.1059 0,0.5823 0.6881,1.0058 1.641,1.0058 0.5823,-0.3706 1.1646,-0.7411 1.7998,-1.1117 0.6882,-0.8469 1.2705,-2.0645 2.0116,-2.8056 0.0529,-0.0529 0.1058,-0.0529 0.2117,-0.0529 0.2647,0.3706 1.0058,0.8999 1.9586,1.4822 0.3176,1.3234 1.5352,2.9644 2.9644,4.4995 0.3176,1.1117 0.6353,2.2233 1.0058,3.335 0.4764,0.6882 1.2175,1.641 1.2175,3.1761 -1.1646,1.3764 -1.2175,1.2176 -1.1646,3.335 0.2647,0.8999 1.0588,2.1174 0.5294,3.4938 0,0.3176 0,0.6881 0,1.0587 -0.1059,0 -0.2117,0 -0.2647,0 0,-0.4235 -0.794,-0.7411 -1.0058,-1.0058 -1.3233,0 -1.4822,0.4764 -2.0644,0.8999 0,0.794 0.3176,1.6939 0.5293,3.0703 -0.0529,0.4235 -0.1059,0.8469 -0.1588,1.2704 -0.2117,0.053 -0.4235,0.1588 -0.6352,0.2647 -0.4235,0 -0.847,0 -1.2175,0 -0.5823,-0.7411 -1.1117,-1.4293 -1.6411,-2.1174 -2.0644,-1.0058 -3.282,0.5823 -2.8585,2.6468 -0.1588,0.2647 -0.3176,0.5293 -0.4235,0.8469 -0.8999,0 -2.0115,-0.5822 -2.2233,-0.794 -0.1058,-0.4235 -0.2117,-0.794 -0.2647,-1.1646 -1.2704,-0.6881 -2.3821,-0.9528 -3.1761,-1.2704 -0.2117,-0.2647 -0.4235,-0.5294 -0.5823,-0.7411 -1.7469,0 -1.5881,0.3176 -2.8056,1.2704 -0.7411,0.3706 -1.4822,0.7941 -2.1704,1.2175 -1.6939,0.3177 -1.4292,0.5294 -2.3821,1.8528 -2.2233,0.2647 -2.0115,0.2647 -3.229,1.9057 -0.2118,0.1588 -0.3706,0.3176 -0.5294,0.4764 -1.3763,0.2117 -2.0116,0.4764 -2.9644,0.794z",
            "name": "西藏"
        },
        "ZHJ": {
            "path": "M228.231 191.802c-1.5351,-0.2647 -1.9586,-0.4764 -2.5409,-1.0587 -0.3706,-1.1117 -0.7411,-2.2233 -1.1117,-3.282 -0.3176,-0.3176 -0.6352,-0.5823 -0.9528,-0.847 -0.3176,-0.0529 -0.6352,-0.1059 -0.9529,-0.1059 0.5294,-1.9586 -1.641,-3.9172 -2.435,-4.7112 0,-0.847 1.0058,-1.4822 1.3234,-2.0116 0,-1.0058 0.9528,-1.1646 1.641,-1.6939 0.2117,-0.3706 0.4235,-0.6882 0.6352,-1.0058 0,-0.7941 -0.1058,-2.3821 0.1059,-2.5939 0.5294,-0.0529 1.0058,-0.9528 2.0116,-0.3176 0.4234,0 0.8999,0 1.3763,0 0.6352,-0.847 2.0115,-0.4235 3.1761,-0.1588 0.3706,0.5294 1.4822,1.2705 2.5939,0.7411 0.5823,-0.4235 1.2704,-1.6939 2.2762,-0.6882 0.4235,0.1588 0.847,0.3176 1.2705,0.5294 0.6352,0.0529 1.3234,0.1059 2.0115,0.2117 -0.2117,0.4765 -3.3349,2.0116 -2.2762,3.0703 0.4764,0 1.0058,0 1.5351,0 0.2118,-0.2117 0.4235,-0.4235 0.6353,-0.6352 0.0529,0.2117 0.2117,0.8999 -0.1588,1.2704 -1.0058,0.2118 -1.3764,0.4235 -1.9057,0.7941 0,0.3176 0.0529,0.6352 0.1058,0.9528 0.3177,0.1588 0.6353,0.3176 1.0058,0.5294 -0.2117,0.8469 -0.2117,1.4292 -0.2117,2.6997 0.1059,0.3706 0.4235,1.5881 -0.1059,2.1174 -0.1588,0 -0.3176,0.053 -0.4235,0.1059 -0.0529,-0.2117 -0.0529,-0.4235 -0.0529,-0.6352 -0.9529,-0.6353 -2.4351,1.641 -2.9115,2.1174 -0.1588,0.2647 -0.2647,0.5823 -0.3705,0.8999 -0.053,0.9529 -0.1059,1.9057 -0.1059,2.9115 -0.2117,-0.053 -0.3706,-0.1059 -0.5294,-0.1059 -2.1703,0 -2.9644,0.2118 -4.6583,0.8999z",
            "name": "浙江"
        },
        "CHQ": {
            "path": "M175.984 191.114c-1.9586,-0.847 -2.8056,-2.3292 -3.7055,-3.4409 -0.3176,-2.5409 -2.0645,-4.6583 -4.2878,-3.3349 -0.6352,0.6352 -0.7411,0.4764 -0.8999,1.5351 -0.5294,0.8999 -1.4293,1.641 -2.2762,2.3821 0,0.053 0,0.1059 0,0.2118 -0.3706,0 -0.4765,0.1588 -0.5823,0.2646 -0.3706,0.1059 -0.7411,0.2647 -1.1117,0.4235 -1.6939,0 -3.1761,-0.4764 -3.9702,-1.2704 0.5823,-1.1646 0.4235,-1.9587 0.1059,-2.8056 -0.847,-0.847 -1.7998,-1.694 -1.9586,-2.4351 0.1058,-1.4292 0.2117,-2.8585 0.3705,-4.2348 -0.3705,-1.3764 -0.5823,-2.1175 -0.4764,-3.0174 0.0529,-0.0529 0.1059,-0.1058 0.1588,-0.1058 0.5823,0.3705 1.1646,0.7411 1.7469,1.1116 0.4235,0.3706 0.847,0.794 1.2704,1.2175 2.7527,1.1117 4.8701,-2.6468 5.6642,-4.8171 0.5823,-0.9529 1.1646,-1.9057 1.7469,-2.8056 0,-0.7941 0,-1.5352 0,-2.2763 0.3176,-0.2117 0.6881,-0.4234 1.0587,-0.6352 1.4822,-0.1059 2.6468,-0.5293 4.3407,0.7411 0.5823,0.5294 1.1646,1.0587 1.7469,1.5881 0.6881,0.1588 1.3763,0.3176 2.1174,0.5293 0.8999,0.4765 3.3879,2.0116 3.3879,3.7055 -1.1646,0.6882 -2.0645,1.7469 -3.0173,2.3822 -2.1704,0.8469 -4.4996,-0.3177 -6.0877,0.8469 0.053,0.3176 0.1059,0.6882 0.1589,1.0587 0.794,1.1646 -1.2176,2.4351 1.0057,3.9173 0.4765,0.4764 0.9529,0.9528 1.4822,1.4293 0.4765,0.6352 0.9529,1.2704 1.4293,1.9586 0.1588,0.5823 0.3176,1.2175 0.5294,1.8527 0,1.3234 0,2.6468 0.0529,4.0232z",
            "name": "重庆"
        },
        "HUB": {
            "path": "M175.931 185.026c-0.8999,-1.8527 -2.7527,-3.229 -3.8114,-4.3407 -0.2118,-0.847 -0.1059,-1.0587 0.1059,-1.5351 0,-0.3706 0,-0.7411 0.0529,-1.0587 -0.1588,-0.3177 -0.3176,-0.6353 -0.4235,-0.9 0.794,-0.6352 3.5467,-0.3176 4.8701,-0.3176 1.0587,-0.3705 2.0116,-1.1116 2.8056,-2.0115 0.4235,-0.3176 0.8999,-0.6353 1.3763,-0.9529 0,-0.3705 0,-0.6881 0.053,-1.0058 -1.1117,-1.7998 -2.4351,-2.8585 -3.7055,-3.4937 -0.1059,-0.2118 -0.2118,-0.4235 -0.2647,-0.6352 -0.053,-0.7941 -0.1059,-1.5881 -0.1059,-2.3822 0.6352,-0.6352 0.8999,-1.1116 1.9057,-1.4822 1.0587,-0.6881 0.1588,-1.8527 -0.1588,-2.2762 -0.5823,-0.4235 -1.1117,-0.6352 -1.3234,-1.1116 1.4822,0 2.9644,0 4.4995,0 0.5823,0.1058 1.2176,0.2117 1.8528,0.3176 0.5293,1.1116 2.2233,2.435 4.076,2.8585 0.3706,0.1588 0.7941,0.3176 1.2176,0.5294 1.9586,0 3.9172,0.0529 5.9288,0.1058 0.6352,0.4235 1.2704,0.847 1.9586,1.2705 0.1059,0.4235 0.5293,1.1646 1.4822,1.7998 0.8999,0.0529 1.7998,0.1588 2.7526,0.2647 0.6353,0.2647 1.3234,0.5823 2.0116,0.8999 0.2647,0.2647 1.4822,-0.2117 2.488,0.5294 0,0.3176 0.2117,0.6881 0.794,1.1645 0.1588,0 1.7998,0.1588 1.7998,1.0588 -0.6352,0.794 -0.6881,0.5293 -0.8469,1.7998 0.2117,0.4235 1.0057,0.8999 1.4292,2.0115 0,0.5823 0,1.5352 1.1117,2.0645 0,0.053 0,0.1059 0,0.2118 -2.8585,0.3176 -3.4408,1.4292 -5.6641,2.9114 -0.5823,0.1588 -0.9,0.5823 -1.2705,1.0587 -1.4293,0.6882 -2.0645,0.2118 -3.0173,1.4823 -0.2118,0.1058 -0.4235,0.2117 -0.5823,0.3176 -0.5294,-0.4765 -1.0587,-0.9529 -1.5881,-1.3764 -1.7469,-0.3705 -2.3292,-1.4822 -3.1762,-2.0645 -1.3763,0 -1.2175,0.1059 -1.9586,1.1646 -2.5938,-0.1058 -4.6583,-1.6939 -6.2464,-2.6468 -1.3234,-0.1058 -2.3292,-0.4234 -2.9644,-0.6881 -2.2233,0 -2.9115,0.2647 -1.2705,2.1703 -0.1058,0.1588 -0.2117,0.3706 -0.3176,0.5823 -0.2646,-0.0529 -0.5293,-0.1058 -0.7411,-0.1058 -2.6468,0 -3.282,1.0057 -4.2878,3.229 -0.3176,0.1589 -0.5823,0.3706 -0.8469,0.5823z",
            "name": "湖北"
        },
        "ANH": {
            "path": "M214.045 179.468c-0.1059,-0.1059 -0.2117,-0.1588 -0.2647,-0.2118 0,-0.7411 0,-1.4822 0.053,-2.2233 -0.1588,-0.1588 -0.3176,-0.3176 -0.4765,-0.4234 -1.7468,0 -1.7468,-0.053 -2.435,1.3233 -0.2117,0.053 -0.3706,0.1589 -0.5294,0.2647 0,-0.4235 -0.3705,-0.5823 -0.7411,-0.8469 -0.1058,-0.2118 -0.2117,-0.3706 -0.3176,-0.5294 0,-1.694 -0.7411,-1.641 -1.0587,-2.5939 -0.1588,-0.1058 -0.3176,-0.2117 -0.4235,-0.3176 0,-0.8999 0.4764,-0.9528 0.8999,-1.3763 0,-1.8528 -1.7998,-1.5351 -2.5409,-2.1174 -0.0529,-0.2647 -0.1059,-0.4765 -0.1059,-0.6882 -0.1058,-0.0529 -0.2117,-0.1059 -0.2646,-0.1588 0,-0.847 0.8999,-1.3234 1.641,-1.5881 0.2647,-0.3705 0.5293,-0.6881 0.794,-1.0058 0,-1.4822 -0.3705,-2.8585 -1.1646,-3.6525 -0.4235,0 -0.794,0 -1.1646,0 -0.1588,0.1588 -0.3176,0.3176 -0.4234,0.4764 -0.1589,0 -0.2647,0 -0.3706,0.0529 -0.847,-0.6881 -0.847,-1.8527 -1.0058,-2.435 -0.3176,-0.2647 -0.6352,-0.4764 -0.9528,-0.6882 0,-1.1116 1.3763,-1.8527 2.1174,-2.6468 0.3176,-1.4292 0.0529,-2.6468 0.0529,-3.8643 0.053,-0.0529 0.1059,-0.1058 0.1589,-0.1058 0.1588,0.0529 0.3176,0.1058 0.5293,0.2117 0.1588,0.3176 0.5294,1.9057 1.641,2.2762 0.3176,0 0.6352,0 1.0058,0 0.7411,-1.1116 0.5294,-1.7468 1.1116,-2.6997 0,-0.2117 0,-0.4235 0.053,-0.6352 -0.6352,-0.6352 -1.2705,-1.2175 -1.9057,-1.7998 0,-0.6353 0.5294,-0.5823 0.847,-0.847 0.0529,0 0.1588,0 0.2646,0 0.6882,0.6882 1.6411,1.5351 2.1175,2.9644 0.2647,0.3176 0.5293,0.6352 0.8469,1.0058 1.2176,0.2117 2.4351,0.4764 3.6526,0.7411 0.2118,0.1588 0.4764,0.3705 0.7411,0.5823 0.5823,1.1116 0.8999,3.3349 2.5409,4.4466 0.053,0.1058 0.1059,0.2117 0.2118,0.3705 0.4764,0 1.3763,0.053 2.0115,-0.3705 0.1059,-1.1117 -0.0529,-0.5823 1.0588,-0.7411 0.1058,0.1588 0.7411,1.1646 0.7411,2.0115 -0.7411,0.3706 -1.7469,0.3176 -2.2763,0.3176 -0.2117,0.4235 -0.4235,0.847 -0.5823,1.2705 -0.0529,0.3706 -0.1059,0.794 -0.1059,1.2175 -0.5293,0.3706 -0.4764,0.4235 -0.4764,1.3764 0.6882,0.6352 1.3764,1.3233 2.1175,2.0115 0.1588,0.053 1.0057,0.053 1.2704,0.8999 0.2647,0.2118 0.5294,0.4235 0.7941,0.6882 0.794,0.0529 1.588,0.1588 2.3821,0.2647 0.1588,0.1058 0.3176,0.2117 0.4764,0.3705 0,0.2118 0,0.4764 0.0529,0.7411 -1.1116,1.1117 -2.488,0.3176 -2.488,2.0116 0.1588,0.3176 0.2647,0.5823 0.1059,1.0058 -0.4235,0.1058 -0.7411,0.3705 -0.9528,0.5293 0,0.847 0,1.694 0,2.5409 -1.0058,1.4822 -2.0116,1.694 -3.4938,1.9587 -1.1116,0.3705 -1.9057,0.6881 -2.6997,0.3176 -0.7941,-0.7941 -0.9529,-1.4822 -1.3763,-1.9057 -0.6882,0.0529 -0.5294,0.0529 -0.847,0.6881 -0.1059,0.4765 -0.2118,1.0058 -0.3176,1.5352 -0.2118,0 -0.3706,0 -0.5294,0z",
            "name": "安徽"
        },
        "JSU": {
            "path": "M226.643,173.804c-0.8999,-0.3706 -1.2704,-0.3177 -1.6939,-0.3706 0,-0.2117 0,-0.4235 0,-0.6352 -1.1117,-0.3706 1.5351,-1.0587 1.7998,-1.1646 0.1588,-0.2118 0.3176,-0.4235 0.4764,-0.6352 0,-2.3292 -1.5351,-1.9587 -2.8585,-2.0116 -0.847,-0.2117 -1.1117,-0.8999 -1.2705,-1.1646 -1.0058,-0.4235 -1.641,-0.8999 -1.9057,-1.3234 -0.9528,-0.5823 -1.0057,-0.847 -1.1646,-1.3234 0.7941,-0.4764 0.5823,-1.2704 0.6353,-1.6939 0.1059,-0.3706 0.2117,-0.6882 0.3705,-1.0058 0.6882,0 1.5352,0.2117 2.488,-0.5294 0,-1.2704 -0.3705,-2.435 -1.0058,-2.8585 -0.9528,0 -1.1646,0 -1.641,0.2118 -0.0529,0.2646 -0.1058,0.5293 -0.1588,0.8469 -0.3705,0.053 -0.7411,0.1059 -1.1116,0.1588 -0.2647,-0.5823 -0.4765,-0.5293 -0.847,-0.794 -1.0058,-1.7998 -1.3763,-3.282 -2.2762,-4.3937 -0.847,-0.5823 -1.7469,-0.4764 -2.2763,-0.5293 -0.6352,-0.2118 -1.2704,-0.4235 -1.9057,-0.5823 -0.1588,-0.1588 -0.3176,-0.3176 -0.4235,-0.4764 -0.5293,-1.3764 -1.6939,-2.8056 -2.4879,-3.3879 0,-0.8999 -0.3706,-2.2763 0.8999,-1.4293 0.1058,0.2117 0.2646,0.4235 0.5823,0.5823 0,0.0529 0,0.1059 0,0.1588 0.4764,0.3176 0.8999,0.6882 1.5351,1.6939 0.5294,0.2647 1.4293,0.3706 2.5939,0.4765 0.8469,-0.2647 1.4292,-2.6998 2.4879,-1.1117 0.2647,0 0.5294,0 0.847,0.053 0.3706,-0.4765 0.7411,-0.9529 1.1117,-1.3764 0.2117,-1.2175 0.3176,-2.5409 1.7998,-2.5409 0,0.4235 0,0.847 0.0529,1.3234 0.5294,0.4235 1.0587,0.847 1.641,1.2705 0.9529,0.3176 2.0116,1.2175 3.4938,1.8527 1.0058,2.0116 2.1703,4.1819 3.7584,6.564 0,0.6353 0.2647,1.7999 1.0058,2.7527 1.7469,0.8999 2.8056,1.4293 4.7113,2.8585 0,0.1059 0,0.2118 0,0.3177 -0.4764,0.4764 -2.6468,0.2117 -2.8586,0.2117 0,0.3176 0,0.6882 0,1.0587 0.5294,0.2118 1.1117,0.4235 1.694,0.6352 -0.2118,0.4235 -0.69121,0.32069 -0.47951,1.00879 -1.63008,1.34664 -1.78819,2.3365 -0.79254,3.64352 0,0.053 0.60958,0.3751 0.60958,0.481 -0.4765,0 -1.40203,1.53659 -1.87843,1.90719 -0.5823,0.1588 -1.1646,0.3705 -1.7469,0.5823 -0.0529,0.0529 -0.1059,0.1588 -0.1059,0.2647 -0.8469,-0.053 -1.6939,-0.1059 -2.5409,-0.1588 -0.4235,0.1588 -0.794,0.3705 -1.1646,0.5823z",
            "name": "江苏"
        },
        "HEN": {
            "path": "M205.204 169.304c-0.7411,-0.1059 -1.4822,-0.2117 -2.2233,-0.3176 -0.5823,-0.3176 -1.1646,-0.6352 -1.7468,-0.8999 -1.9587,0 -2.4351,0 -3.335,-0.7411 -0.3176,-0.4764 -0.6352,-0.9529 -0.8999,-1.3763 -0.5823,-0.3706 -1.1646,-0.7411 -1.694,-1.0588 -2.0644,-0.0529 -4.076,-0.1058 -6.0876,-0.1588 -1.2704,-0.5293 -3.4937,-1.2175 -3.8643,-1.9586 -0.8999,-0.5293 -1.0058,-0.8999 -1.2175,-1.3234 -0.3176,-2.1703 -1.4293,-3.4408 -2.1174,-4.7113 -0.3176,-0.794 -0.5823,-1.588 -0.847,-2.3821 -0.0529,-0.6352 -0.0529,-1.2704 -0.0529,-1.9057 0.8469,0 1.7998,-0.7411 2.4879,-1.3234 0.2647,-0.1588 0.5294,-0.3176 0.847,-0.4234 1.3234,-0.1059 2.4351,-0.5294 3.5467,-1.4293 1.0058,-0.1059 2.3292,-0.5294 3.5467,-0.847 1.0058,-0.6352 1.7998,-1.4822 2.5409,-2.3291 1.3234,-0.9 1.2705,-2.9115 1.3234,-4.0761 0.847,0.1588 1.7469,0.3705 2.6468,0.5823 1.2705,0 2.5939,0 3.9173,0 0.2117,0.3176 0.4234,0.6352 0.6352,0.9528 0.4764,0.3176 1.2704,1.4822 0.5823,2.541 -1.0058,0.5293 -1.3764,0.7411 -1.5881,1.8527 -0.2117,0.0529 -0.4235,0.1059 -0.5823,0.2117 0,0.1059 0,0.2118 0,0.3706 0.5823,0.4235 1.1646,0.847 1.7998,1.3234 0,0.0529 0.053,0.1588 0.1059,0.2647 0.794,0.5823 2.3292,2.435 3.8643,1.2704 0.3706,0.053 0.6352,0.2647 1.1117,0.8999 0.4234,0.3177 0.8999,0.6882 1.3763,1.0588 -0.0529,0.1588 -0.0529,0.3176 -0.0529,0.4764 -0.4765,0.4764 -0.4765,1.641 -0.7411,2.3291 -0.3177,-0.1058 -0.5823,-0.1588 -0.847,-0.2117 -1.0587,-1.4293 -1.0587,-2.7527 -2.7527,-2.2233 0,1.1646 0.053,2.3292 0.1059,3.4938 -0.3706,0.8999 -1.5351,2.0115 -2.3292,2.6468 0,0.3705 0,0.7411 0,1.1116 0.2647,0.2647 0.4235,0.4764 1.0587,0.794 0.1588,0.5823 0.3176,1.2176 0.5294,1.8528 0.0529,0.1588 0.3705,0.847 1.3234,0.847 0.5293,-0.5294 0.4764,-0.6882 1.3763,-0.5294 0.2647,0.5823 1.2175,2.1704 0.6352,3.335 -0.5293,0 -1.5351,0.794 -1.7468,1.0057 -0.2118,0.3177 -0.4235,0.6353 -0.6353,1.0058z",
            "name": "河南"
        },
        "SHA": {
            "path": "M176.09 169.145c-1.9057,-0.6882 -2.2763,-1.4822 -3.282,-2.3292 -0.4235,-0.1588 -0.847,-0.3176 -1.2705,-0.4235 -1.3234,0 -2.6997,-0.0529 -3.6526,0.5294 -0.5823,0 -1.4822,-0.794 -1.6939,-0.9528 -1.5352,0 -1.9057,-1.1646 -2.4351,-1.3234 -0.7411,0 -1.4822,0 -2.1703,0 -0.7411,-0.2647 -1.4822,-0.5294 -2.2233,-0.7411 0,-0.6882 0.2117,-0.847 0.4235,-1.3234 0,-1.2705 -0.1059,-1.4293 -0.5823,-1.641 -0.4765,-0.4765 -0.5294,-0.847 -0.3706,-1.0058 0.9529,-0.0529 1.9057,-0.0529 2.8585,-0.0529 0.7941,-1.2176 0.4235,-2.6468 0.3706,-3.7056 -0.2647,-0.4764 -0.4764,-0.9528 -0.6882,-1.4292 -0.5293,-3.282 -0.5823,-3.7055 2.6997,-3.7055 0.7412,0.3705 1.5352,0.7411 2.3292,1.1646 0.2118,0 0.847,-0.1059 1.0587,-0.3177 0,-0.7411 0,-1.4292 0,-2.1174 0,-0.5823 1.641,-0.7411 2.1704,-0.2117 0.4235,0 0.847,0 1.3234,0 0.5823,-1.3234 0.6352,-3.3879 0.2117,-4.2349 0.1059,-0.9528 0.3177,-1.0587 0.5823,-1.5881 0,-0.3705 0,-0.6881 0,-1.0057 -0.3176,-0.053 -0.6352,-0.1059 -0.8999,-0.1059 -0.9528,-0.794 -2.1703,-1.3763 -2.5409,-1.7469 -1.1646,-0.2117 -2.6997,-0.6352 -3.1761,-1.1116 0,-0.6882 0.2117,-0.847 0.4764,-1.2705 -0.1059,-0.6352 -0.2118,-1.2175 -0.2647,-1.7998 0.2647,0 0.794,-0.847 0.9529,-1.1646 0.3705,0 0.9528,-0.1059 1.7468,0.2647 1.3234,0.0529 2.6468,0.1058 4.0231,0.1588 1.1646,-1.1646 0.7412,-3.282 0.7412,-4.3407 0,-1.2176 0.6352,-1.2705 1.2704,-1.9587 0.5294,-0.7411 1.0587,-1.4822 1.5881,-2.2233 0.4764,-0.3705 0.9528,-0.7411 1.4822,-1.1116 0.3176,-0.4764 0.6352,-0.9529 0.9528,-1.3764 0.3176,0.2647 0.6882,0.5294 1.0587,0.7941 0.1059,0 0.2118,0 0.3177,0 0.4234,-0.2647 0.794,-0.8999 1.0057,-1.3234 0.4235,0 1.694,0.0529 1.694,1.3763 -0.2118,0.3706 -0.4235,0.7411 -0.6352,1.1646 0,1.4293 -0.1589,2.5939 -1.3764,3.8114 -0.4764,1.4822 0.1059,3.282 0.3176,5.0818 0,1.2705 -0.9528,2.6468 -1.588,3.6526 0,1.3763 0,2.7526 0,4.1819 0.3705,0.847 1.0057,2.2762 1.0057,3.5467 -0.4234,1.2705 -0.7411,2.5409 -0.2117,4.2349 0.2647,0.3705 0.5294,0.5293 1.0058,1.4822 -0.053,0.5293 -0.1059,1.1116 -0.1059,1.6939 0.3706,0.9529 0.794,1.9586 1.2175,2.9644 0.6882,0.8999 1.3234,2.0116 1.694,3.6526 -0.4764,-0.1059 -0.9529,-0.2118 -1.4293,-0.2647 -1.2175,0 -4.8701,-0.2117 -5.3465,0.2647 -0.0529,0.1588 -0.0529,0.3705 -0.0529,0.5823 0.6352,0.5293 1.2704,1.0587 1.9586,1.641 0.0529,0.2647 0.1059,0.5293 0.2117,0.794 -1.3234,0.4764 -1.641,0.847 -2.435,1.7998 0,1.0058 0,2.0116 0.0529,3.0703 -0.1588,0 -0.2647,0 -0.3705,0z",
            "name": "陕西"
        },
        "QIH": {
            "path": "M110.29 169.039c-0.4764,-0.4764 -0.9528,-0.8999 -1.4292,-1.3234 -0.4235,-1.4822 -0.9529,-2.7526 -1.4293,-3.8113 -1.1646,-1.3234 -2.2763,-1.4822 -3.282,-1.8528 -1.7998,0 -3.5997,0.053 -5.3995,0.1059 -1.9057,-0.2647 -2.8056,-1.2705 -3.7584,-1.9586 -1.9586,-0.2647 -3.335,-0.7941 -4.4996,-1.641 0,-0.3177 -0.5293,-1.0058 -0.5293,-1.1117 -0.1588,-0.1588 -0.3176,-0.3176 -0.4764,-0.4235 -1.4822,-0.2117 -2.541,-0.4764 -3.4938,-1.0587 -2.0645,-0.5823 -2.8585,-3.7584 -3.1761,-5.0289 -0.1059,-2.1704 -0.2118,-4.3407 -0.2647,-6.4582 0.3705,-0.7411 0.9528,-1.7998 1.0587,-2.3821 0,-1.1116 -0.5823,-1.641 -0.5823,-1.9057 0.1588,-0.0529 0.3705,-0.1058 0.5823,-0.1058 0.2647,0.2647 0.6882,0.2117 1.0587,0.2117 0.3706,-0.3705 0.4235,-0.5823 0.4764,-0.794 1.0058,-0.4764 1.4293,0.6881 2.8056,1.3763 0.3176,0 1.641,0.0529 2.1175,-0.2647 0.1058,-0.1588 0.2646,-0.3176 0.4234,-0.4764 0,-0.4764 0,-0.8999 0,-1.3234 -0.794,-1.0587 -1.5351,-1.5881 -0.9528,-2.435 0.4764,-0.3176 0.9528,-0.5823 1.4822,-0.847 0.1588,-0.2117 0.3176,-0.3706 0.5294,-0.5294 1.0057,-2.0115 -0.1589,-2.435 -1.0058,-3.0702 -0.4764,-1.0058 -1.3234,-1.9587 -1.9057,-1.9587 -0.1059,-0.4234 -0.4235,-0.6352 -0.4235,-1.0587 0.7411,-0.7411 -0.3176,-1.7998 -0.4235,-1.9586 0,-0.1059 0,-0.2117 0,-0.3176 2.0645,-0.5823 5.0289,-0.3706 7.411,-1.0058 2.0116,-1.0587 3.5997,-1.9586 6.3523,-1.9586 0.3706,0.1588 0.7411,0.3176 1.1117,0.4764 2.0115,0 4.1819,-0.2647 6.2993,0.5823 1.3234,0.847 2.6468,1.6939 3.9702,2.5939 0.1059,0.1588 0.2117,0.3705 0.3706,0.5822 0.6881,0.5294 1.7468,1.4293 3.229,1.9587 0.4765,0 1.0058,0 1.5352,0 0.2117,-0.2647 0.4235,-0.4764 0.6881,-0.6882 0.2118,-1.0058 0.053,-1.9586 -0.2117,-2.5409 0.5294,-0.5294 1.3763,-0.3706 2.3292,-0.3176 0.4764,0.3176 1.0057,0.6352 1.5351,1.0058 0.847,0.2117 2.0116,0.4764 3.282,0.5822 0.6882,0.3177 1.3764,0.6353 2.0645,1.0058 0.5294,0.3706 1.0587,0.7941 1.5881,1.2176 0,0.0529 0,0.1058 0,0.1588 0.1588,0.1058 0.3176,0.2646 0.5293,0.4234 0.7411,0.1589 1.5881,0 2.5939,-0.2117 0.6352,0.794 1.3234,1.5881 2.0116,2.435 0.9528,0.6882 1.9056,1.3764 2.8585,2.0645 0.4235,0.2118 0.8999,0.4235 1.3763,0.6882 0.847,0 1.694,0 2.5409,0 0.4765,0.4764 1.2176,2.5939 1.3764,3.9173 0.3705,0.8469 0.7411,1.7468 1.1646,2.6467 0.0529,0.7411 0.1058,1.4822 0.2117,2.2233 0.3705,0.5294 1.3234,1.694 0.3176,2.6998 -2.3292,1.1646 -2.1704,1.4292 -3.5996,3.7584 -0.5823,0.4235 -1.1646,0.8999 -1.7469,1.3763 -0.0529,0.2647 -0.0529,0.5294 -0.0529,0.7941 0.5293,0.4764 1.1116,1.0058 1.6939,1.5351 0,0.9529 -1.3763,0.6352 -1.641,0.6352 -0.5823,-0.3705 -1.1646,-0.7411 -1.7469,-1.1116 -0.8999,0 -2.6468,-0.1059 -2.8585,0.1059 0,1.7468 -0.2118,2.8056 1.7998,4.3407 -0.0529,0.5823 -0.0529,1.2175 -0.0529,1.8527 0.2646,0.847 0.5293,1.694 0.794,2.541 0,1.0057 -0.8999,0.8999 -1.7469,1.0057 -0.8469,0.2118 -1.0058,0.4765 -1.5351,0.8999 -0.2118,0 -0.4235,0 -0.5823,0 -0.1059,-0.2117 -0.2117,-0.4234 -0.3176,-0.6352 -0.4764,-0.0529 -0.9529,-0.1059 -1.4293,-0.1059 0,-0.4234 -0.3705,-0.6352 -0.6352,-0.794 -0.3176,-0.0529 -0.6352,-0.0529 -0.9529,-0.0529 -0.1058,0.2117 -0.8999,0.794 -1.1645,0.6881 -0.1059,-0.2646 -0.2118,-0.4764 -0.3177,-0.6881 -0.5293,-0.1059 -1.0057,-0.2118 -1.4822,-0.3176 -0.7411,-0.847 -1.4292,-1.641 -2.1174,-2.4351 -0.1059,-0.2117 -0.2117,-0.3705 -0.2647,-0.5293 0,-1.8528 -0.9528,-2.3292 -1.7469,-3.2291 -1.2175,-0.3706 -2.6997,-0.2118 -3.5996,-0.2118 -1.7469,0.2647 -1.1646,0.2118 -1.3234,2.0645 0.3706,0.5294 0.7941,1.0587 1.2175,1.5881 0,0.3176 0,0.6352 0,1.0058 -0.5293,0.794 -2.1174,1.5881 -1.2175,2.9644 0,0.6352 -1.2704,2.2762 -1.7469,2.8585 -0.2646,0.7411 -0.8999,1.0058 -1.4822,1.2705 -0.2117,0.1588 -0.3705,0.3176 -0.5293,0.5293 -0.9529,0 -0.9529,-0.6881 -1.0058,-0.8469 -0.6882,-0.4765 -1.5351,-0.053 -1.7998,0 -0.3706,0.4234 -0.4235,0.794 -0.847,1.0057z",
            "name": "青海"
        },
        "SHX": {
            "path": "M181.119 151.941c-1.4822,-0.8999 -1.1646,-2.0645 -1.1646,-2.9644 0.1588,-0.5294 0.3176,-1.0058 0.4764,-1.4822 -0.0529,-0.6352 -0.1059,-1.2175 -0.1059,-1.7998 -0.3176,-0.7411 -0.6352,-1.4822 -0.8999,-2.2233 0,-1.2705 0,-2.541 0,-3.7585 0.6882,-1.0058 1.0058,-1.8527 1.5352,-2.7526 0,-0.4765 0,-0.9529 0.0529,-1.3764 -0.3176,-2.2762 -1.2705,-4.2878 0.6352,-5.5582 0.3706,-1.2175 0.3706,-1.9586 0.4235,-2.8586 0.1588,-0.3705 0.3706,-0.7411 0.5823,-1.1116 0.2647,-1.5351 1.1646,-2.1704 2.3292,-2.9644 0.5823,-0.847 1.2175,-2.2233 2.1174,-2.6468 0.3176,-0.3176 0.6352,-0.6352 0.9528,-0.8999 0.5823,0 2.6998,0.3705 3.4409,-0.3706 0.6881,-0.1588 1.4292,-0.3705 2.1703,-1.1116 0.1059,-0.2117 0.2118,-0.3706 0.3706,-0.5294 0.3176,0.2118 0.6352,0.4235 0.9528,0.6353 0,0.794 -1.9057,1.2704 -1.5351,2.435 1.3234,0.3176 1.9586,1.4822 3.1232,3.1232 0,0.3176 0,0.6353 0,0.9529 -0.794,1.4292 -1.3234,1.3763 -2.5409,2.1703 -0.5294,1.0058 -1.641,2.3292 -0.794,3.5997 0.4234,0.3176 0.8469,0.6881 1.3233,1.0587 0.3706,0.794 1.3764,1.4822 1.3764,3.3879 -0.2118,0.6352 -0.3706,1.3234 -0.5294,2.0115 -0.3705,0.6882 -1.4292,2.1175 -2.0645,2.5939 -0.0529,0.2117 -0.0529,0.4235 -0.0529,0.6352 0.3705,0.4235 0.794,0.847 1.2175,1.2705 0.2647,0.794 0.2647,2.2762 -0.1059,3.4937 -0.8999,1.1117 -1.9056,2.0645 -3.0702,2.9644 -1.2176,0.2647 -2.4351,0.5823 -3.6526,0.8999 -1.2705,1.0058 -2.2233,1.1117 -3.5467,1.4293 -0.4764,0.2647 -0.9528,0.5294 -1.3763,0.794 -0.6353,0.6353 -1.2175,0.847 -1.641,0.9529z",
            "name": "山西"
        },
        "SHD": {
            "path": "M205.469 151.306c-0.4764,-0.3177 -0.9528,-0.6353 -1.3763,-0.9529 -0.7411,-0.6352 -1.4822,-1.2704 -2.1704,-1.8527 0.1588,-0.3706 0.3176,-0.7411 0.4764,-1.0588 0.5294,-0.4234 1.1646,-0.9528 1.4822,-1.4822 0,-0.5822 0,-1.1645 0,-1.6939 -0.1588,-0.8999 -1.0057,-3.7584 -1.3234,-4.0761 0,-1.0587 -0.1588,-1.2175 0.3706,-1.7468 0.5823,-1.2176 1.4822,-1.8528 2.435,-2.7527 0.9,-1.7998 2.4351,-2.2762 4.129,-3.3349 0.847,-0.9 1.694,-1.7469 2.5939,-2.5939 0.1588,0.5823 0.3176,1.2175 0.4764,1.8528 0.4235,0 0.847,0 1.2705,0 0.2117,-0.3706 0.4235,-0.7411 0.6352,-1.0588 0.4235,0 1.5351,0.1059 2.2762,-0.2646 0,0.2117 0.3176,0.6881 0.7411,1.2175 -0.0529,0.7411 -0.0529,1.4822 -0.0529,2.2233 0.7411,0.7411 2.2233,1.5351 3.8643,1.5351 0.6352,-1.0587 1.3234,-2.1174 2.0116,-3.1761 0.2646,-0.3176 0.5293,-0.6353 0.8469,-0.8999 0.6353,-0.4235 1.4293,-0.7941 2.5939,-0.6353 0.6882,0.2647 1.4293,0.5823 2.1704,0.8999 1.588,-0.0529 3.229,-0.1058 4.87,-0.1058 0.1059,0.0529 0.2118,0.1058 0.3706,0.2117 -0.1059,0.1059 -0.1588,0.2647 -0.2117,0.4235 -0.053,0.5294 -0.1059,1.0587 -0.1589,1.5881 -0.5822,0.0529 -1.1645,0.1058 -1.7468,0.1588 -1.694,1.0587 -4.4466,2.2233 -4.8701,4.076 -0.3706,0.1588 -0.7411,0.3177 -1.1117,0.4765 -0.4235,0.6352 -1.1116,0.7411 -1.641,0.8999 -0.1059,0.1058 -0.2117,0.2117 -0.2647,0.3176 -0.0529,0.5823 -0.1058,1.1646 -0.1588,1.7469 -0.4764,0.794 -1.4822,1.641 -1.8527,2.3821 -0.053,0.6352 0,1.641 -0.5294,2.3821 -1.3234,0 -1.8527,0.6881 -2.488,1.4822 -0.1058,0.8999 -0.3705,1.9586 -1.3234,2.5938 -0.0529,-0.1058 -0.0529,-0.1588 -0.0529,-0.2117 -0.2117,-0.1588 -0.3705,-0.3176 -0.5293,-0.4235 -0.3177,-0.0529 -0.5823,-0.0529 -0.847,-0.0529 -0.4235,0.4764 -0.847,0.9528 -1.2175,1.4822 -0.7941,0.2646 -2.0645,0 -2.4351,-0.2118 -0.1059,-0.2117 -0.2117,-0.4235 -0.2647,-0.6352 -0.6881,-0.6882 -1.3763,-1.3763 -2.0645,-2.0116 -0.4234,-0.0529 -0.8469,-0.0529 -1.2704,-0.0529 -0.2647,0.5294 -0.2647,1.1646 -0.3176,2.1174 -0.6882,0 -1.2176,0.4765 -1.3764,0.6882 -0.8999,0 -1.588,0.4764 -1.9586,0.5294z",
            "name": "山东"
        },
        "NXA": {
            "path": "M157.191 146.542c-0.1588,-0.5823 -0.3176,-1.1645 -0.4235,-1.6939 -0.1059,-1.7469 -0.4764,-3.1762 -0.6352,-4.2878 -1.0587,-1.5351 -2.4351,-2.488 -2.9644,-3.335 -0.4764,-0.2646 -0.8999,-0.4764 -1.3234,-0.6881 0.2647,-0.5294 2.435,-0.847 3.3879,-1.0058 0.8999,-0.7411 0.6352,-0.847 2.2233,-1.0058 0.2647,-0.3705 0.5823,-0.7411 0.8999,-1.1116 -0.0529,-0.6882 -0.1059,-1.3764 -0.1059,-2.0116 0.4764,-0.9528 1.0058,-1.9057 1.5352,-2.8056 0.0529,-0.5293 0.1588,-1.0587 0.2646,-1.5351 0.9529,0 1.7469,-1.0587 2.9115,-0.2647 0.0529,0.2647 0.1588,0.5294 0.2647,0.847 -0.2647,0.5823 -0.5294,1.1646 -0.7411,1.7998 -1.0587,1.2175 -1.1117,1.6939 -0.847,3.7055 0.6352,0.0529 1.2705,0.1588 1.9057,0.2647 0.3705,0.4235 1.0058,1.3234 2.2233,1.641 -0.1059,0.4235 -0.4764,1.0058 -0.9528,1.3763 -0.2647,0.5823 -0.9529,1.0587 -1.4293,1.4822 -2.2763,0 -1.0058,0.4764 -1.5352,2.1704 -0.8999,1.3234 -1.0057,1.1116 -1.0057,3.1232 0.2117,0.2117 0.4764,0.4235 0.7411,0.6881 0.4235,0.053 1.7468,0.3706 1.4822,1.7999 -0.1059,0.2117 -0.2118,0.4235 -0.3176,0.6881 -0.6882,0.1588 -1.2176,0.3176 -1.6411,0.5823 -2.1768,1.7513 -1.2954,1.6317 -3.9172,-0.4235z",
            "name": "宁夏"
        },
        "HEB": {
            "path": "M202.822 142.836c-0.2117,-0.2646 -0.4235,-0.5293 -0.6352,-0.7411 -1.2175,0 -2.3821,0 -3.5467,0.053 -1.1116,-0.2647 -2.2233,-0.5294 -3.282,-0.7411 -0.8999,-0.5823 -1.4822,-1.4293 -1.4822,-1.641 0.6352,-0.7411 1.2704,-1.4822 1.9057,-2.1704 0.1588,-0.5823 0.3176,-1.1646 0.5293,-1.7469 0.6882,-3.2291 -1.2704,-4.4995 -2.8585,-6.0876 0,-2.0645 1.3234,-2.6997 2.8585,-3.5467 0.2647,-0.4764 0.5294,-0.8999 0.7941,-1.3234 -0.053,-0.5293 -0.053,-1.0058 -0.053,-1.4822 -0.8999,-1.4822 -1.641,-2.3292 -2.5409,-3.0703 -0.1588,-0.0529 -0.3176,-0.1058 -0.4235,-0.1058 0,-0.053 0,-0.1059 0,-0.1588 0.3176,-0.2647 0.6353,-0.5294 0.9529,-0.7941 0.2117,-0.3705 0.5293,-0.847 0.5293,-1.2175 -0.4235,-0.3706 -0.8469,-0.6882 -1.2175,-1.0058 0,-0.3705 0,-0.7411 0,-1.0587 -0.5823,-0.5823 -0.9528,-0.9528 -1.1646,-1.3763 0,-0.7411 0,-1.4822 0,-2.2233 0.2118,-0.3176 0.4764,-0.6353 0.7411,-0.8999 0,0 0.6882,-0.1059 0.9529,-0.3706 0,-0.794 0,-1.5351 0,-2.2762 0.4764,-0.4764 0.4764,-0.6353 1.1645,-0.7941 0.3706,0.2118 1.1117,0.6353 1.1117,1.694 -1.2175,0.6881 -0.2117,1.6939 0.9528,2.5938 0.1589,0 0.3177,0 0.5294,0.053 0.2117,-0.1588 0.4764,-0.3176 0.7411,-0.4765 0,-1.0587 1.1646,-1.2175 1.9057,-1.7998 1.0587,-1.4292 3.0173,-0.3705 4.5525,-1.3763 -0.053,-0.8999 -0.1059,-1.7998 -0.1059,-2.6468 0.5823,-0.794 0.8999,-0.8999 1.9586,-1.5351 1.2175,-1.2175 1.5352,-0.053 2.1704,1.5351 0.6352,1.0058 1.2704,2.0116 1.9586,3.0703 0.1059,0.8999 -0.0529,1.4293 1.4293,2.0115 0.6352,0 1.9057,-0.1588 3.0173,-0.0529 -0.4764,0.6882 -1.1116,0.5823 -1.4293,1.3763 0,0.847 -0.3176,1.3234 0.9529,2.1704 1.1646,0.1588 2.1704,1.3763 3.5996,2.0645 0.2118,0.2117 0.4764,0.4235 0.7411,0.6882 -0.794,1.0587 -1.5881,2.1703 -2.3821,3.282 0,1.0058 -1.9057,2.0645 -2.6468,2.3821 -0.6352,0.1059 -1.2704,0.2117 -1.8527,0.3705 -1.2705,-0.7411 -1.7469,-1.8527 -2.488,-2.2233 -0.4235,-1.1116 0,-2.2762 -0.3706,-2.8056 -0.5293,-0.2117 -1.0587,-0.4234 -1.588,-0.5822 -0.053,-1.2705 0.2117,-2.8586 0.1588,-3.5997 -1.3234,-0.1058 -2.5409,-0.1058 -2.8056,-0.8999 -1.694,0 -1.5881,-0.0529 -1.9057,1.5352 -0.8999,0.3705 -1.694,1.0587 -2.3821,1.4822 0,0.4764 0,0.8469 0.5293,1.7468 -0.1058,1.3764 -1.6939,1.0587 -2.0645,1.8528 0,0.6352 -0.4234,1.6939 0,2.3292 1.0588,0 2.1175,0 3.1762,0 0.7411,-0.6353 0.794,-1.1646 2.3292,-0.9529 0.2646,0.4235 0.6352,0.4764 1.1116,0.9529 0.1588,0.2646 0.3176,0.5823 0.4764,0.8999 0.1059,0.7411 0.2118,1.4822 0.3177,2.2233 0.6352,0.794 1.5351,1.7998 3.1761,2.3291 0.3176,0.5294 0.6352,1.0588 1.0058,1.6411 -0.7411,0 -1.1646,0.8999 -1.641,1.2175 -0.4765,1.0058 -2.1175,2.0115 -3.0174,2.2762 -0.9528,0.6882 -1.7468,1.4293 -2.3291,2.4351 -2.4351,2.435 -3.8644,2.9114 -2.2233,6.8816 0,0.2117 0.0529,0.4235 0.1058,0.6352z",
            "name": "河北"
        },
        "XIN": {
            "path": "M88.2162 140.454c-0.2647,-0.1588 -0.4764,-0.2647 -0.6882,-0.3705 -0.4234,-0.4235 -0.8469,-0.7941 -1.2175,-1.1646 -1.3234,0 -1.4292,-0.3706 -1.9057,0.847 -0.2117,-0.1059 -0.3705,-0.1588 -0.5293,-0.2118 -0.4235,0.053 -0.847,0.1059 -1.2705,0.1588 -0.5293,-0.8469 -0.4235,-1.2704 -0.4764,-1.7469 -0.3176,-0.1588 -0.6352,-0.3176 -0.9529,-0.4234 -1.641,-1.4822 -2.9114,-2.488 -4.7642,-1.7469 -1.3763,0.1588 -2.6468,0.4235 -3.9172,0.2647 -0.6352,-0.2118 -1.2175,-0.4235 -1.7998,-0.6353 -0.5294,0 -1.0587,0 -1.5352,0 -1.1646,0.6882 -2.6997,1.3764 -3.282,2.5409 -0.5823,-0.0529 -1.1646,-0.0529 -1.6939,-0.0529 -0.5294,-0.2647 -1.0587,-0.5293 -1.5881,-0.7411 -1.1117,0 -1.4293,-0.1059 -1.9057,0.3706 -0.4764,0.1058 -0.8999,0.2117 -1.3234,0.3705 -1.2704,0 -1.7469,0.4764 -2.7526,0.794 -1.5881,0 -3.5467,-1.0587 -4.0761,-1.588 0,-1.8528 -0.3176,-1.3764 -1.2175,-2.1175 -1.7998,0 -1.3234,0.053 -2.4351,1.3234 -1.1646,0.4765 -2.2762,0.2118 -3.1232,0.7941 -0.1588,0 -0.2647,0 -0.3705,0 -0.1059,-0.2118 -0.1588,-0.3706 -0.2118,-0.5294 -1.3234,-1.4822 -3.1232,-2.2762 -4.6054,-2.0645 -1.6939,1.1646 -2.3292,1.694 -3.1232,3.5997 -0.6882,0.9528 -1.2704,1.2704 -2.2762,1.4292 -0.5294,-0.1059 -1.0587,-0.2117 -1.5352,-0.3176 -0.4764,-0.3705 -0.6352,-0.4764 -1.0057,-0.4764 -0.3706,-1.4822 -1.6411,-1.7998 -2.3822,-2.2233 -0.2117,-0.3176 -0.4234,-0.5823 -0.6352,-0.847 0,-0.7411 0,-1.4293 0,-2.1174 0.3176,-0.3176 0.1588,-1.2705 0.1588,-1.4293 -0.5823,-1.7469 -2.3292,-1.2175 -3.282,-1.5881 -0.3176,-0.3176 -0.5823,-0.5823 -0.847,-0.8469 -0.4235,-0.7411 -0.794,-1.4822 -1.1646,-2.2233 -0.6352,-0.1588 -1.2175,-0.2647 -1.7998,-0.3706 -0.4764,-1.2704 0.2118,-2.3821 0.5294,-3.2291 0,-1.8527 -1.1646,-2.6997 -2.0645,-3.6525 -0.794,-0.3706 -1.5881,-0.7411 -2.3292,-1.1117 -0.1059,-0.1588 -0.2117,-0.2647 -0.3176,-0.3705 0,-2.0116 -0.1059,-1.4293 1.694,-2.3292 0.3176,-0.2647 0.8999,-0.6882 1.0587,-1.0058 0,-1.6939 0,-3.3349 0,-4.976 -0.3706,-2.3291 -2.0645,-1.6939 -3.335,-1.7468 -0.2117,0.1058 -0.3705,0.2646 -0.5293,0.4235 -0.053,0.0529 -0.1059,0.1058 -0.1059,0.2117 -0.4235,-1.2175 -0.4235,-1.5351 -0.3176,-2.1174 0.3705,-0.2118 0.794,-0.4235 1.2175,-0.5823 0,-0.4235 0,-0.847 0.0529,-1.2175 -1.2704,-1.9057 -1.4292,-0.6882 0.6353,-2.0645 0.3705,-0.6353 0.794,-1.2705 1.2175,-1.8528 0.6881,-0.3176 1.3763,-0.5823 2.1174,-0.847 2.2762,-0.1058 3.3879,-0.0529 5.4524,-1.0587 0.2647,-0.0529 0.5823,-0.0529 0.8999,-0.0529 0,0.6881 0.2117,2.2233 1.5881,2.6468 0.6352,0 1.5351,0 2.2762,-0.5294 0.4764,-0.6882 0.9529,-1.3234 1.4822,-1.9586 0.794,0 1.5351,0.2647 2.5939,0 0.4764,-0.5294 0.8469,-0.794 1.4292,-1.1646 0.2647,-0.0529 0.5823,-0.0529 0.8999,-0.0529 0.6882,0.2117 1.4293,0.6881 2.6998,0.6881 1.2175,-0.6881 3.3879,-0.3705 5.0289,-1.0587 0.6352,-0.4235 1.3234,-0.847 2.0115,-1.2175 0.1588,-0.5294 0.3176,-1.0587 0.4764,-1.5351 1.4293,-0.4765 1.7469,-2.488 2.2233,-3.4938 0.5294,-0.2647 1.2705,-0.6352 1.7469,-1.1117 0.2118,-0.5822 0.4235,-1.1645 0.6353,-1.6939 0.0529,-0.9528 0.1058,-1.9057 0.1588,-2.8585 -0.1588,-0.4235 -0.2647,-0.847 -0.3706,-1.2176 0,-1.5351 0.847,-3.1761 0,-4.0231 -0.0529,-0.1588 -0.1059,-0.3176 -0.1588,-0.4764 1.7469,0 3.335,0 5.1348,0.3176 1.2704,0.6352 2.3821,0.1588 4.0231,1.2705 0.2117,0 0.4764,0 0.7411,0 0.2117,-0.2647 0.4235,-0.4764 0.6882,-0.6882 0,-0.2647 0,-0.5293 0,-0.7411 -0.4765,-0.9528 -0.2647,-1.7998 0.1058,-2.435 0.6353,-0.7941 1.2705,-1.5352 1.9057,-2.2763 0.2647,-1.6939 0.847,-2.0115 1.7998,-3.1761 0.4235,-0.8999 0.2118,-1.1117 1.3234,-1.1117 0.9529,0.5823 1.9586,1.2176 2.9644,1.8528 0.5823,0.1588 1.9586,0 2.8586,0.8999 1.2175,0 3.5996,0.2117 4.1289,-1.4822 -0.1058,-1.1646 -0.2117,-2.3292 -0.2646,-3.4938 1.2704,-2.5409 2.7526,-2.435 5.5053,-2.6997 0.6882,-0.2117 1.0058,-1.3763 1.2704,-1.9057 0.2118,-0.2647 0.4235,-0.4764 0.6882,-0.6881 0.7411,-0.053 1.4822,-0.053 2.2233,-0.053 0.3706,0.2647 0.4764,1.9057 0.8999,2.9644 0.6882,1.0587 1.4293,2.1704 2.1704,3.282 0.6352,0.3177 1.641,0.6882 2.9644,1.0058 0.4764,0.3176 0.9528,0.6882 1.4822,1.0587 0.2647,0.4235 0.5293,0.847 0.794,1.3234 0.1059,0.847 0.2118,1.694 0.3176,2.5939 0.3177,0.6352 0.6353,1.2704 1.0058,1.9057 0.1059,1.0057 0.4764,2.9114 -0.4235,4.2878 -1.8527,1.2175 -1.588,0.5823 -1.7998,2.8056 0.1059,0.5293 0.1588,1.3763 0.7941,2.2762 0.5293,0.3705 1.0587,0.7411 1.641,1.1646 0.794,0.1588 1.588,0.3176 2.435,0.5293 1.641,1.1646 3.4938,1.1646 5.8229,1.3234 0.7411,0.3706 2.0116,1.5881 2.9115,2.541 0.7411,0.6352 1.5351,1.2704 2.3292,1.9056 0.7411,0.1588 1.5881,0.2647 2.435,1.3234 0.2118,0.7411 0.5294,2.3292 1.1117,3.4938 0.3176,0.2647 0.794,0.3705 1.1116,1.3234 -0.0529,0.4764 -0.1058,0.9528 -0.1058,1.4822 0.1058,0.3705 0.2646,0.7411 0.4234,1.1116 -1.1645,0.5823 -1.0587,0.847 -1.4292,2.2233 -0.053,0.5294 -0.053,1.1117 -0.053,1.694 0.1059,0.6352 0.2118,1.2704 0.3706,1.9057 -0.1588,0.0529 -0.2647,0.1058 -0.3706,0.1588 -1.2704,0.0529 -2.4879,0.1059 -3.7055,0.1588 -2.6467,0.3176 -3.8643,0.5293 -4.6583,3.0173 -0.794,0.7941 -1.2175,1.2176 -1.5881,2.488 -1.3234,0.847 -3.0703,0.794 -4.129,0.794 0,0.5823 -0.5823,1.5881 -1.2175,2.0645 -0.4764,0.9529 0.0529,2.0645 0.5823,3.5467 0,0.4235 0,0.847 0.0529,1.2705 -0.9528,0.1588 -1.9057,0.3705 -2.8056,0.5823 -0.8469,0.2647 -1.6939,0.847 -2.2233,1.1646 -2.3821,0.794 -4.7112,0.9528 -6.7757,0.9528 -0.8999,0.1588 -1.0058,0.2118 -1.4822,0.5823 0,0.6352 0,0.7411 0.7411,1.7998 -0.7941,1.1646 -0.1059,1.9587 1.3234,2.8056 0.3705,0.5294 0.7411,1.0587 1.1116,1.641 0.5823,0.2647 1.0587,0.4765 0.794,1.8528 -0.2117,0.1588 -0.4234,0.3705 -0.5823,0.5823 -1.641,0.8999 -1.7998,0.6352 -1.7998,2.6468 0.4235,0.3176 1.1117,0.9528 1.1117,2.2233 -0.6352,0.4235 -1.3763,0.5293 -1.7469,0.5293z",
            "name": "新疆"
        },
        "NMG": {
            "path": "M150.575 136.907c-0.6352,-0.6352 -1.2704,-1.2704 -1.9057,-1.8527 -0.3705,-0.6882 -0.6881,-1.3764 -1.0057,-2.0116 0,-2.1174 0.2646,-2.9644 2.0115,-3.9702 0.2647,-0.2646 0.5823,-0.5293 0.8999,-0.794 0.2118,-0.4235 0.4765,-0.847 0.7411,-1.2175 -0.0529,-0.2647 -0.0529,-0.5294 -0.0529,-0.7941 -1.0587,-1.7468 -1.7469,-1.4822 -3.282,-0.9528 -0.4235,0.3176 -0.7941,0.6352 -1.1646,0.9528 -0.5823,0.2647 -1.1646,0.5294 -1.7469,0.7941 -0.3705,-0.5294 -0.7411,-0.5294 -1.0587,-0.7411 -3.7055,0 -3.6526,-0.2647 -3.9173,3.1761 -0.7411,0.7411 -1.8527,-0.3176 -2.1174,-0.3176 -0.6352,-0.8999 -1.4292,-1.6939 -1.8527,-2.1174 -0.5294,-1.4293 -1.0587,-2.4351 -2.1704,-2.6468 -0.6352,-0.6882 -1.2705,-1.3234 -1.8528,-1.9586 -0.3705,-0.1059 -0.7411,-0.2118 -1.1116,-0.2647 0,-1.4293 1.4293,-1.5351 2.2233,-2.5939 0.2117,-0.5293 0.4235,-1.0057 0.6882,-1.4822 0,-0.9528 -0.1059,-1.3234 -0.5294,-1.641 -2.1704,0 -4.4466,0.2647 -6.1935,1.0058 -0.7411,0.5294 -0.8999,0.4764 -1.4822,0.4764 0,-0.7411 0.053,-1.4822 0.1059,-2.1703 -0.2647,-0.3706 -0.5294,-0.7411 -0.794,-1.0588 -0.6353,-0.5293 -1.2176,-1.0587 -1.7999,-1.5351 0,-1.0058 0.3177,-1.2175 0.5823,-2.0645 0,-1.1116 0,-1.9057 -0.2117,-2.6468 -0.3706,-0.4764 -0.7411,-0.9528 -1.0587,-1.3763 0,-0.5823 0,-1.1646 0,-1.6939 1.641,0.4234 3.3349,0.8469 5.0289,1.2704 2.9114,0 5.8229,0 8.7344,0.0529 0.794,0.2647 2.488,0.4765 3.5467,1.0058 0.8999,0.7411 1.8527,1.4822 2.8056,2.2763 0.2117,0.1058 0.4764,0.2117 0.7411,0.3705 0.8469,0.1059 1.7468,0.2647 2.6468,0.4235 0.3705,0.2647 0.7411,0.5294 1.1645,0.794 1.1117,0.3176 2.2233,0.6882 3.335,1.0587 0.847,0.4235 1.7998,2.541 3.5996,1.2176 0.5823,-0.8999 1.641,-1.2176 2.6998,-1.641 1.1645,-0.9529 1.5351,-1.1117 3.282,-1.4822 0,-0.5294 1.1646,-0.5823 1.588,-0.847 1.0058,-0.1588 1.9057,-1.2175 2.9115,-1.3763 0.8999,-0.5823 1.641,-0.5823 3.0173,-0.4765 1.0058,0.2118 4.7113,1.1117 5.823,0 2.435,-0.1588 4.129,-2.435 5.6641,-4.2878 0.5294,-0.4764 1.1117,-0.9528 1.694,-1.4292 0.4764,-0.4235 0.9528,-0.847 1.4822,-1.2175 0.4234,-0.1589 1.1116,-0.5294 1.588,-1.0058 -0.0529,-0.4764 -0.0529,-0.8999 -0.0529,-1.3234 -0.5823,-0.5823 -1.1646,-1.1117 -1.7469,-1.641 -0.1059,-0.3706 -0.2117,-0.7411 -0.2647,-1.0587 0.1059,-1.9587 0.053,-3.2291 1.7998,-3.9173 0,-0.6882 1.1117,0.3176 2.3822,1.2705 0.4234,0.1058 0.8469,0.2646 1.3233,0.4235 0.4235,0 0.9,0 1.3764,0 1.641,-0.4765 3.0703,-2.7527 4.2878,-4.129 0.8469,-0.847 1.588,-0.3706 2.8585,-0.3706 0.5294,-0.5293 1.1117,-0.6352 1.8528,-0.9528 0.4234,-0.4235 0.8999,-0.847 1.3763,-1.2705 0.4235,0 0.7411,-1.5881 0.7411,-1.6939 0.8999,-2.488 1.5351,-1.5352 3.8114,-2.5409 0.7411,-0.9 1.5351,-1.3764 2.5938,-1.9057 0.847,-0.847 4.0231,-0.3177 5.8229,-0.2118 0.2118,-0.1059 0.4765,-0.2117 0.7412,-0.3176 1.1645,-1.1646 0.5293,-2.6997 -0.053,-3.4938 -0.4235,-0.4234 -0.847,-0.8469 -1.2704,-1.2175 -0.7941,-0.4764 -1.5881,-0.9528 -2.3822,-1.3763 -0.2117,-0.8999 -1.3763,-1.7998 -1.5351,-1.9586 -0.5293,0 -1.0587,0 -1.5881,0.0529 -0.2646,0.2647 -0.5293,0.5823 -0.7411,0.8999 -0.5293,-0.0529 -1.0587,-0.0529 -1.5351,-0.0529 -0.1059,0.6352 -0.2117,1.2704 -0.3176,1.9057 -1.1646,0.4235 -2.5409,-0.5823 -3.0174,-0.7941 -0.4764,0 -0.9528,0 -1.3763,0 -1.0058,0.3176 -1.4822,0.7941 -2.0645,1.2705 -1.5881,0 -1.8527,-1.1646 -1.8527,-1.9586 0.4764,-0.4765 1.0057,-0.9529 1.5351,-1.4293 0,-1.2705 -0.1059,-1.9586 0.0529,-2.7527 0.2647,-0.6881 0.5823,-1.3234 0.9,-1.9586 0,-1.641 -0.1059,-2.3821 0.6881,-3.3879 0.3176,0 0.6352,0 1.0058,0 1.3763,0.1588 3.8114,0.6882 5.3465,-0.4764 0.8999,-0.9528 2.0645,-1.7469 2.8585,-2.8056 0,-1.4822 -0.1588,-5.3465 1.1117,-5.9817 1.1646,-1.5352 0.6352,-3.1232 1.7998,-4.2878 -0.0529,-0.6882 -0.0529,-1.3764 -0.0529,-2.0645 -0.1059,-0.1588 -0.1588,-0.3176 -0.2118,-0.4764 -0.3705,-0.4235 -0.7411,-0.847 -1.1116,-1.2176 -0.3706,-0.2117 -0.6882,-0.3705 -1.0058,-0.5293 0,-1.4822 0.794,-2.0645 2.0645,-2.6468 1.0587,0 1.6939,-0.9529 2.8585,-0.9529 0,0.3177 0.2647,0.4765 0.5294,0.7411 -0.053,0.4235 -0.1059,0.9 -0.1588,1.3764 -0.6882,0.6881 -1.0058,0.6881 -1.0058,1.7998 0.3705,0.2647 0.7411,0.5823 1.1646,0.8999 0.4235,0.6352 0.6352,0.794 1.9057,1.0058 0.1058,-0.6353 0.2117,-1.2175 0.3176,-1.7998 0.5823,0 1.1646,-0.1588 2.2233,0.5293 0.1059,0.2118 0.2647,0.4235 0.4235,0.6352 0.1588,1.1117 0.3705,2.541 1.2704,3.7056 0.1588,0.1058 0.3706,0.2117 0.5823,0.3705 0.4764,-0.0529 1.0058,-0.1059 1.5352,-0.1588 1.3763,-0.6882 2.9644,-0.2117 4.2878,-1.5351 0.8469,-2.0116 2.2762,-2.3292 3.6525,-0.2647 0.3176,0.8999 0.6353,1.7998 1.0058,2.6997 0,0.8999 -0.7411,3.8643 -1.3234,4.8172 0,0.4234 0,0.8469 0,1.2704 0.3706,0.7411 0.7411,1.5352 1.1646,2.3292 0,0.9528 -1.641,2.9115 0.2647,4.1819 0.2117,0.6352 0.1058,1.9057 0.0529,3.0703 -0.3705,0.0529 -0.7411,0.1059 -1.1116,0.1588 -0.7411,-0.7411 -0.3706,-1.4822 -0.3706,-1.9057 -0.1588,-0.5293 -0.2117,-0.5293 -0.5823,-0.8999 -2.1704,0.1059 -0.6352,0.847 -1.4822,2.1704 -1.1116,0.9528 -1.5351,1.588 -1.8527,3.1761 -0.2647,0.6882 -1.3234,1.694 -1.9587,2.1174 -0.0529,0.5823 -0.1058,1.2176 -0.1058,1.8528 0.3705,0.3705 0.4764,0.6882 1.0057,1.5351 0.5294,0.3176 1.1117,0.6882 1.694,1.0587 0.4235,-0.0529 0.847,-0.1058 1.2704,-0.1058 0.2118,-0.4235 0.4765,-0.847 0.7411,-1.2175 0.1059,0.1588 0.5823,0.8469 0.5823,1.6939 -0.6352,0.2117 -1.2704,0.4235 -1.8527,0.6882 0,0.4234 -0.1588,1.3234 0.794,1.7998 -0.5823,0.8469 -1.4292,1.9586 -2.2233,2.435 -0.2647,-0.0529 -0.4764,-0.1058 -0.6881,-0.1588 -0.6882,-0.4764 -1.3764,-0.8999 -2.0645,-1.3234 -0.3176,0 -0.6353,0 -0.8999,0 -0.1588,0.2647 -0.5294,0.7411 -0.5823,1.1117 0,0.4235 0,0.8469 0.0529,1.3234 0.4235,0.6881 2.0116,1.0587 2.9644,2.6468 0,0.5822 0,1.2175 0,1.8527 0.4764,0.7411 1.0587,2.1704 1.5351,3.4408 0.1059,0.1588 0.2647,0.3176 0.4235,0.4765 0.2118,0 0.4764,0 0.7411,0.0529 0.2118,-0.4764 0.4764,-0.9529 0.7411,-1.3763 0.4235,-0.3706 0.847,-0.6882 1.3234,-1.0058 0.3176,0.6352 1.0058,1.4292 1.5881,2.8056 0.2117,1.1116 0.1588,2.1174 1.8527,2.9644 0.053,0.1588 0.1059,0.3176 0.2118,0.4764 -0.2647,0.5294 -0.1588,1.8528 -0.1588,2.8585 -0.2118,0.1588 -0.4235,0.3706 -0.5823,0.5823 -0.9529,0 -1.1117,-0.4235 -1.4822,-0.5823 -2.5939,0 -2.9644,0.3176 -3.8643,2.1704 -0.1588,0.1059 -0.3176,0.2117 -0.4235,0.3705 0,0.5294 -2.5939,2.1704 -2.9644,2.4351 -0.2647,0.5293 -1.7469,1.5351 -2.3292,1.9057 -0.2117,0.2117 -0.4235,0.4235 -0.5823,0.6352 -0.3176,0.0529 -0.5823,0.1059 -0.847,0.1588 -0.3176,-0.3176 -0.6352,-0.6352 -0.9528,-0.8999 -0.5294,-1.641 -1.0058,-1.6939 -2.0645,-1.6939 -0.5823,1.0057 -0.8999,2.8056 0.4235,4.129 0.0529,0.6881 0.1059,1.3763 0.1588,2.0644 -1.7469,0.1589 -3.3349,0.4235 -4.3407,-0.3176 -0.2118,-1.641 -0.7411,-2.0645 -1.3764,-2.8585 -0.4764,-1.0058 -0.9528,-2.0116 -1.3763,-2.9644 -1.0587,-1.0587 -0.8999,-0.6882 -1.7469,-0.794 -0.7411,0.7411 -1.8527,1.2704 -2.5938,1.9586 -0.3176,0.6352 -0.3706,1.7998 -0.053,3.0703 -1.0587,0.1058 -2.1174,0.2117 -3.1761,0.3176 -0.9528,0.5823 -1.9057,1.1646 -2.8585,1.7469 -0.2647,0.4234 -0.4765,1.1645 -1.0587,1.1645 -0.847,-0.5293 -1.0588,-0.9528 -1.0588,-1.3763 0.1588,-0.1588 0.3706,-0.3176 0.5823,-0.4235 0,-1.641 -1.1116,-2.435 -2.2233,-2.435 -1.4292,0.6881 -1.5351,1.4822 -1.1116,3.3879 -0.3176,0 -0.6353,0.0529 -0.9529,0.1058 -0.1588,0.2118 -0.2646,0.4765 -0.3705,0.7411 -0.1588,0.053 -0.3176,0.1059 -0.4764,0.2118 0,0.9528 0,1.9057 0,2.8585 0.3176,0.3706 0.6352,0.7941 1.0057,1.2175 0,0.2647 0,0.5294 0.053,0.847 -0.2118,0.3176 -0.4235,0.6352 -0.5823,0.9529 -1.4822,1.0057 -3.0174,1.3233 -4.3937,1.1645 -1.2704,0 -1.4822,0.5823 -2.2233,1.0058 -0.2647,0.2118 -0.4764,0.4235 -0.6882,0.6353 -0.6881,1.3763 -2.0644,2.7526 -3.282,4.0231 -0.4235,-0.2647 -0.8469,-0.5294 -1.2175,-0.7941 -0.4764,0 -0.9528,0 -1.3763,0.053 -0.053,0.4235 -0.2647,1.0587 -0.5823,1.2175 -0.6882,-0.8999 -1.3763,-0.7411 -1.8528,-0.6882 -0.2117,0.6353 -0.5823,1.3234 -1.2704,1.7998 -1.5881,0.6882 -2.1704,3.0703 -3.6526,3.9702 -0.3705,0.7941 -0.3176,1.5352 -0.3176,2.6997 0.1059,0.4235 -0.0529,1.6411 -0.2647,2.3292 -0.1059,0.053 -0.2117,0.1059 -0.2647,0.1588 -2.2233,0 -3.7584,-0.3705 -5.3465,-0.6352 -0.5823,-0.3176 -1.1646,-0.5823 -1.6939,-0.847 -0.3176,-0.3705 -0.6353,-0.6881 -0.8999,-1.0058 -0.5823,-0.1588 -1.1646,-0.2646 -1.7469,-0.3705 0,-0.5294 0,-1.0587 0,-1.5881 0.794,-1.0587 1.6939,-2.435 1.6939,-3.7584 -0.3705,-1.5352 -1.588,-1.2175 -2.3291,-1.2175 -0.2647,0.1058 -0.4765,0.2646 -0.6882,0.4234 -1.8528,0.1589 -1.1646,0.053 -1.4822,1.9587 -0.3706,0.3705 -0.4235,0.4764 -0.5294,1.0058 -0.3705,0.5822 -0.6881,1.1645 -1.0057,1.7998 0,0.6352 0.0529,1.3234 0.1058,2.0115 -0.2117,0.2647 -0.4235,0.5294 -0.6352,0.7941 -1.3763,0.1588 -1.4822,0.3176 -2.1704,1.0057 -0.9528,0.1588 -1.8527,0.3706 -2.7526,0.5823 -0.8999,0.4235 -1.0058,1.0058 -1.694,1.3234z",
            "name": "内蒙古"
        },
        "TAJ": {
            "path": "M210.604,127.114c-0.8999,-0.4235 -1.8528,-1.3763 -1.9586,-1.3763 -0.7941,-1.2175 -0.4765,-2.5939 -0.8999,-3.0174 -0.053,-0.2117 -0.1059,-0.4234 -0.1589,-0.5822 -0.5816,-0.42494 0.73632,-1.46243 2.50766,-2.57871 0,1.3763 -0.44316,1.67871 1.30374,2.84331 0.3176,0.4235 0.6352,0.847 1.0058,1.2705 -1.3234,0.6352 -1.3234,0.4235 -1.9057,1.4293 0,0.6352 0.0529,1.3233 0.1059,2.0115z",
            "name": "天津"
        },
        "LIA": {
            "path": "M227.278 123.938c-0.0529,-0.1059 -0.1058,-0.1588 -0.1058,-0.2118 0.4235,-1.0587 0.794,-1.0058 1.4292,-1.641 0.1589,-0.3705 0.3177,-0.6881 0.5294,-1.0058 0,-0.2646 0,-0.5293 0,-0.794 -0.3705,-0.2117 -0.7411,-0.4235 -1.0587,-0.6352 -0.4764,-1.7469 0.4764,-2.2763 1.3763,-3.282 0.6882,-1.0588 0.5294,-2.2233 0.5294,-3.1233 -0.6882,-0.6881 -1.3234,-1.3763 -1.9587,-2.0645 -0.3176,-0.0529 -0.5822,-0.1058 -0.8469,-0.1058 -0.5823,0.1058 -1.1646,0.2117 -1.7469,0.3176 -1.0058,0.794 -1.6939,1.7998 -2.5939,2.8056 -0.6352,1.0058 -1.1645,2.0645 -1.9586,2.8585 -1.3763,-0.9528 -2.8056,-1.7998 -3.7055,-2.6468 -1.0587,-0.1058 -1.5351,-0.5823 -1.7998,-0.8469 0,-1.1117 -0.1059,-1.2176 0.847,-1.4293 0.3705,-0.4764 0.7411,-0.9529 1.1646,-1.3763 -0.053,-0.8999 -0.1059,-1.7999 -0.1588,-2.6468 -0.1059,-0.053 -0.1589,-0.1059 -0.2118,-0.1059 -0.1059,-0.1588 -0.2117,-0.3176 -0.2647,-0.4764 -0.1588,-0.3706 -0.3176,-0.7411 -0.4235,-1.0587 0,-0.7411 -0.0529,-1.3234 0.3706,-1.7469 0.5823,0.1588 0.794,0.5293 1.1116,1.4822 0.6882,0.6352 0.9529,1.3763 2.541,1.0058 0.2646,-0.3176 0.5823,-0.6353 0.8999,-0.8999 1.588,-1.0058 3.4937,-2.7527 5.0289,-3.8114 0.5823,-0.6882 1.1116,-1.694 1.3763,-2.2763 1.3763,-0.4234 1.9057,-1.0057 3.3879,0.1059 0.3176,0 0.6882,0 1.0587,0 0.2647,-0.3176 0.5294,-0.6352 0.794,-0.9528 0,-0.847 0,-1.694 0,-2.488 0.053,-0.2647 0.1588,-0.5294 0.2647,-0.794 0.5823,0 1.3763,0.4234 2.1174,1.5351 0.4765,0.3705 0.6882,0.847 1.8528,0.847 0.2647,-0.2647 0.3706,-0.8999 0.3706,-1.0587 0.1588,-0.2118 0.3176,-0.3706 0.4764,-0.5294 0.1058,0.1059 0.2647,0.2117 0.4235,0.3705 0,0.6353 0.0529,1.2705 0.1058,1.9587 0.847,0.8469 1.5352,1.9586 2.8586,3.282 0,0.847 0,1.6939 0,2.5409 0.2117,0.2647 0.4234,0.5294 0.6881,0.847 0.5294,0.4235 1.1117,0.8469 1.694,1.2704 0.4235,0.2647 0.8469,0.5294 1.2704,0.7941 0,0.5823 -3.0702,2.5938 -3.4408,2.8056 -0.3176,0.2646 -0.6352,0.5823 -0.9528,0.8999 -0.5294,0.5823 -1.0588,1.1646 -1.5352,1.7998 -0.2117,0.5823 -0.0529,1.1646 -0.4235,1.9586 -0.5293,0.2118 -1.0587,0.4235 -1.5351,0.6882 -2.9115,0.5823 -4.4466,1.6939 -6.1405,3.9702 -0.1589,0.2646 -0.2647,0.5293 -0.3706,0.8469 -0.2647,0.7941 -0.4764,1.641 -0.6882,2.488 -1.1116,0.3706 -1.8527,0.4764 -2.6468,0.5294z",
            "name": "辽宁"
        },
        "JIL": {
            "path": "M245.012 107.369c-0.7411,-0.8999 -2.2762,-1.694 -2.7526,-2.0645 -0.1588,-0.1588 -0.2647,-0.3176 -0.3706,-0.4764 0,-1.3234 0.2118,-2.0116 -0.2117,-2.8586 -0.9529,-0.6881 -0.9529,-0.9528 -1.1646,-1.4292 -0.4764,-0.5294 -0.9529,-1.0058 -1.3763,-1.4822 -0.053,-0.053 -0.1059,-0.053 -0.1588,-0.053 -0.053,-0.6881 -0.053,-1.3763 -0.053,-2.0115 -0.5823,-0.7411 -0.8999,-0.6353 -1.2704,-0.6353 -0.5823,0.5823 -0.6353,0.847 -0.8999,1.641 -0.1059,-0.0529 -0.2118,-0.0529 -0.2647,-0.0529 -0.7941,-0.794 -1.8528,-1.9057 -2.488,-2.3292 -2.6468,-0.3176 -2.6997,-1.1646 -3.0173,-2.9644 -0.4235,-1.2175 -1.1646,-1.9586 -1.5352,-2.5938 -0.0529,-0.2647 -0.1059,-0.5294 -0.1588,-0.7941 -0.1588,-0.0529 -0.3176,-0.0529 -0.4235,-0.0529 -0.5293,0.4235 -1.0587,0.8999 -1.5881,1.3763 -0.2646,0.4235 -0.5293,0.8999 -0.794,1.3764 -1.0587,-0.7941 -0.847,-2.0645 -1.2704,-2.488 -0.2118,-0.4764 -0.4235,-0.8999 -0.5823,-1.3234 0,-0.6352 0,-1.2175 0,-1.7998 -0.847,-1.1117 -1.694,-1.7469 -2.4351,-2.3821 -1.1116,0 -0.3705,-1.641 -0.2117,-1.8528 0.1058,-0.0529 0.2117,-0.0529 0.3176,-0.0529 0.8999,0.5823 1.7469,1.4822 3.2291,1.4822 0.7411,-0.4764 1.2704,-1.3234 1.9586,-1.8528 0.6882,-1.1646 1.4293,-1.8527 2.435,-0.0529 0.2118,1.4822 1.641,2.5938 3.6526,3.0703 0.8999,-0.3176 1.8528,-0.6353 2.8056,-0.8999 0.794,-0.6882 1.5881,-1.3764 2.3821,-2.0116 0.1059,0.0529 0.2647,0.1059 0.4235,0.2117 0,0.847 -0.5823,2.8586 1.5351,2.8586 0.2647,-0.1588 0.5823,-0.2647 0.8999,-0.3706 0.8999,-0.8999 1.641,0.2118 2.4351,1.1646 0.3705,0.1059 0.794,0.2118 1.2175,0.3706 0.3706,0.6881 1.1117,2.0115 2.4351,2.9114 0.1058,0 0.2646,0 0.4234,0 0.7411,-0.7411 0.9529,-1.4822 1.1646,-2.2233 0.2647,0.053 0.5823,0.1588 0.8999,0.2647 0.2118,0.794 0.7941,1.7469 1.9587,2.6468 0,0.0529 0,0.1059 0,0.1588 0.4234,0.3706 0.8469,0.7411 1.3234,1.1646 0.4764,-0.0529 1.0057,-0.1059 1.5351,-0.1588 0.2117,-0.2647 0.4235,-0.5294 0.6882,-0.7411 0.2117,0 0.5822,-0.3706 0.6881,-0.4764 0,-0.1588 0,-0.3177 0,-0.4235 -0.1588,-0.053 -0.2647,-0.1059 -0.3705,-0.1588 0,-0.6882 1.4292,-0.8999 2.0645,-1.1117 0.1588,-0.1059 0.3176,-0.2117 0.5293,-0.2647 0.1059,-0.1588 0.2118,-0.3176 0.3706,-0.4764 0.3705,0.1588 0.2117,1.0058 1.3763,1.5881 0.5823,0.4235 1.2175,0.847 1.8528,1.2704 0.5293,0.053 1.0587,0.1589 1.588,0.2647 0,0.5294 0.3176,2.1175 -0.4764,2.6997 -0.2117,0.4235 -0.3705,0.847 -0.5294,1.2705 -0.1058,0.5823 -0.2117,1.1646 -0.3176,1.7469 -0.1588,0 -0.3176,0.0529 -0.4764,0.1059 -0.2117,-1.0058 -1.3234,-0.3706 -1.3763,-0.3177 -0.1059,-0.0529 -0.2118,-0.1058 -0.2647,-0.1588 0,-0.7411 0,-1.4292 0,-2.1174 -1.0058,-1.4293 -1.6939,-0.794 -2.3821,0.3176 -0.2647,1.3234 -1.1646,2.488 -1.5881,3.8114 -0.2117,0.2117 -0.3705,0.4764 -0.5293,0.7411 -2.1175,1.4822 -3.4409,-0.4764 -3.1232,2.8056 0.4234,0.3705 0.8469,0.7411 1.2704,1.1116 0,0.3177 -0.4764,0.847 -0.7411,1.1117 -1.0587,0.3176 -3.0703,0 -3.6526,-0.2647 -1.2175,-1.2175 -1.9586,-0.3705 -2.6997,0.4235 -0.3705,1.0587 -0.7411,2.1174 -1.1116,3.1761 -0.1059,0.1589 -0.2118,0.3177 -0.2647,0.4765 -0.2118,0.0529 -0.3706,0.1058 -0.5294,0.1588z",
            "name": "吉林"
        },
        "HLJ": {
            "path": "M253.746 90.5357c-0.6881,-0.6882 -1.3763,-1.3234 -2.0115,-1.9586 -0.847,-1.7469 -1.3234,-2.5409 -2.8056,-2.3292 -0.3176,0.6882 -0.6353,1.3763 -0.9529,2.0645 -0.8469,0 -1.8527,-1.9586 -1.9057,-2.1704 -0.3176,0 -0.3705,-0.4764 -0.4764,-0.6352 -0.3705,-0.1059 -0.7411,-0.2117 -1.1116,-0.2647 -1.0587,-1.6939 -1.641,-1.4822 -2.8586,-1.588 -0.0529,0.0529 -0.1058,0.1588 -0.1588,0.2646 -2.1703,1.0587 -1.7468,-1.0057 -1.6939,-2.0645 -0.6882,-0.6881 -0.8999,-0.5823 -1.4293,-0.5823 -0.3176,0.3177 -0.6352,0.6882 -0.9528,1.0588 -0.2118,0.1058 -0.4235,0.2117 -0.6352,0.3705 -0.6882,0.9529 -2.6468,1.2705 -3.5467,1.3763 -1.9057,-0.794 -2.488,-1.3234 -2.8056,-2.7526 -1.0588,-1.5881 -0.847,-1.1117 -2.2233,-1.2705 -0.053,0 -0.1059,0.053 -0.1589,0.1059 -0.5822,-0.2647 -0.7411,-0.6352 -0.7411,-1.0058 0.4765,-0.2647 1.1646,-0.2117 1.8528,-0.7411 0,-0.847 -0.1588,-1.3234 -0.2647,-1.7469 -0.1588,-0.2646 -0.3176,-0.4764 -0.4235,-0.6881 -1.2175,0 -1.1116,0.1588 -1.641,1.2175 -1.0058,0 -1.588,-0.794 -2.1703,-1.0058 -0.2118,-0.847 -0.3177,-0.794 -0.6882,-1.2704 -0.0529,-0.4235 -0.0529,-0.847 -0.0529,-1.2705 1.0057,-0.7411 1.4822,-1.4293 2.0645,-2.3292 0.2117,-1.7998 1.588,-2.5938 2.1174,-3.9702 0,-0.3705 0,-0.6881 0.0529,-1.0057 0.3706,0 0.5294,0.3176 0.6353,0.5823 0,0.6352 -0.4765,1.641 0.6881,2.2233 0.5294,0 1.2705,0.1058 1.8528,-0.4765 0,-1.1646 0.1588,-2.7526 -0.053,-3.4937 -1.3763,-1.3764 -0.8999,-2.1704 -0.2646,-3.282 0,-1.2176 -0.6882,-2.6468 -1.0058,-2.8056 -0.053,-0.4235 -0.1059,-0.847 -0.1588,-1.2705 0.2117,-0.4764 0.4235,-0.9528 0.6352,-1.3763 0,-0.9529 0.4235,-1.694 0.6882,-2.5939 0,-2.0645 -1.1117,-4.923 -2.488,-5.6112 -1.3234,0 -1.9586,0.053 -2.6468,0.7411 -0.794,1.3764 -0.847,1.5352 -2.2762,1.8528 -1.3234,0 -2.2763,0.5293 -3.2821,0.6881 -1.1646,-0.5822 -1.0057,-1.3763 -1.2175,-1.9586 -0.2117,-1.4822 -0.6882,-2.2762 -1.2704,-2.8585 -2.541,-1.0587 -2.9644,-0.794 -2.9644,1.4822 -0.7411,-0.5823 -1.4822,-1.1117 -2.1704,-1.641 -0.0529,-0.1059 -0.0529,-0.2118 -0.0529,-0.3176 0.3176,-0.3706 0.6352,-0.7411 1.0057,-1.1117 0.053,-0.6352 0.1588,-1.2704 0.2647,-1.8527 -0.2647,-0.2118 -0.5293,-0.4235 -0.7411,-0.6353 1.0587,-0.6352 2.1174,-1.2175 3.1762,-1.7998 1.1116,-0.4235 1.9056,-0.6881 3.5466,-0.3705 0.847,0.6352 1.5881,0.794 3.0703,0.8999 1.4822,-0.4235 2.1175,-0.4764 3.9173,0.3176 1.3234,1.4822 2.8056,3.5467 4.6054,5.5053 0.3176,0.794 0.6352,1.5881 1.0058,2.4351 0.6881,0.6352 1.3763,1.2704 2.1174,1.9056 0.847,1.0588 1.0058,1.1117 1.1646,2.8586 0.2117,0.3176 0.9528,0.7411 1.6939,1.3234 0.053,0.1058 0.1588,0.2646 0.2647,0.4235 0,0.5822 0,0.9528 0.3706,2.0645 0.3176,0.2117 2.2762,0.2646 3.282,-0.053 0.8469,0 1.0057,-0.1059 2.2762,0.6352 0.3706,0 0.7411,0 1.1646,0 0.3705,-0.3705 0.3176,-0.3705 1.2705,-0.3705 0.6881,0.5823 1.3763,1.2175 2.0644,1.8527 0.6882,0 1.694,-0.1058 2.488,0.6882 0.2647,0.6352 0.5294,1.2705 0.847,1.9057 0.2647,1.2175 1.4293,4.3937 3.8114,2.9644 1.0058,-0.1588 2.1174,-0.5294 3.3879,-0.9528 0.2117,-0.2118 0.4764,-0.4235 0.7411,-0.5823 0.9528,-1.694 1.6939,-2.3821 3.1761,-3.5997 0.4235,-0.4764 0.847,-0.9528 1.2705,-1.3763 0.794,-0.6882 1.588,-1.3763 2.435,-2.0645 1.2705,0.2117 1.3234,0 0.9529,1.694 0,0.6881 0,1.4292 0,2.1703 0.3705,0.4235 1.3234,1.0587 1.588,2.2233 -0.0529,0.6882 -0.1058,1.3763 -0.1588,2.1174 -0.2117,0.4235 -0.3705,0.847 -0.5293,1.3234 -0.5823,0.5823 -0.4765,1.7469 -0.2118,2.9644 -0.0529,1.1117 -0.0529,2.2233 -0.0529,3.335 -0.1588,0.6352 -0.3176,1.3234 -0.4764,2.0116 0,0.6881 0.0529,1.4292 0.1058,2.1703 -0.3176,0.3176 -0.5823,0.6882 -1.0057,0.8999 -0.4235,0 -0.7941,0.053 -1.1646,0.1059 -1.3764,-0.4235 -1.9057,-0.3705 -2.7527,-0.4235 -0.4764,0.4764 -0.4764,0.8999 -0.847,1.3763 -1.4822,0.3706 -1.6939,0.9 -1.5351,2.4351 0.2647,0.4235 0.5294,0.847 0.847,1.2705 0.2117,1.2704 0.8469,2.8585 1.7998,4.5524 0.1588,0.6882 0.3176,1.3764 0.4764,2.0645 -1.7998,0 -2.8056,-1.3763 -3.5467,-1.7469 0,-1.1116 -1.1116,-1.3763 -1.4822,-1.0057 -0.0529,0.1058 -0.0529,0.2117 -0.0529,0.3705 -1.1646,0.1588 -1.9586,0.794 -2.8586,1.2175 0,0.3176 0,0.6353 0,0.9529 0.053,0.0529 0.1059,0.1059 0.1589,0.1588 -0.5294,0.2647 -0.6882,0.4764 -1.0058,0.794 -0.3176,0.053 -0.6353,0.1588 -0.9529,0.2647z",
            "name": "黑龙江"
        },
        "GAN": {
            "path": "M166.455 151.677c-1.6638,-1.2834 -2.8577,-1.2004 -4.2339,-1.1319 -0.2819,0.129 -0.6464,0.2435 -1.1127,0.3379 -1.1116,1.641 -0.5293,3.5467 0.4235,5.6112 0.053,0.8469 0.2118,1.6939 -0.1058,2.8585 -0.847,0 -1.694,0 -2.541,0 -0.8469,0.4235 -0.5293,0.3705 -0.6881,1.4293 0.3176,0.2117 0.6881,0.4764 1.0587,0.7411 0,0.2646 0,0.5293 0,0.794 -0.2117,0.4764 -0.3706,1.0058 -0.5294,1.5351 -1.2704,0 -1.588,0.5823 -2.435,0.847 -0.9529,0 -1.9057,0.0529 -2.8585,0.1059 -0.1059,-0.053 -0.2118,-0.1059 -0.2647,-0.1059 -0.4764,-0.7411 -1.0058,-1.1116 -1.2705,-1.1116 -0.1058,-0.2647 -0.2117,-0.5294 -0.3176,-0.7941 -0.3705,-0.794 -0.7411,-1.5351 -1.1116,-2.2762 -0.4235,-0.3176 -0.847,-0.6352 -1.2176,-0.9529 -0.6352,-1.0057 -1.6939,-1.3763 -2.2233,-1.5351 -0.3705,-0.2117 -0.6881,-0.4235 -1.0057,-0.6352 -1.2705,-2.5939 -1.7999,-2.3821 -3.7585,-1.1646 -0.7411,0.7411 -0.794,0.5293 -0.794,1.8527 0.2647,0.3706 0.5823,0.8999 0.5823,1.8528 -0.4235,0.2647 -0.6353,0.5293 -1.2705,0.7411 -0.2647,0 -0.5293,0 -0.794,0.0529 -1.694,-0.9528 -3.1762,-2.0645 -4.0231,-3.1232 -1.1117,-0.5293 -1.0588,-2.5409 -1.0588,-2.9644 0.6882,0 1.3764,0 2.1175,0.0529 0.5293,0.3706 1.1116,0.7411 1.6939,1.1117 0.847,0 1.694,0.3176 2.4351,-0.6352 0,-0.2647 0,-0.5294 0,-0.7941 -0.7411,-0.6881 -1.5352,-1.3763 -1.694,-1.7468 1.1117,-0.6882 3.1232,-2.8056 3.4408,-4.0761 0.4765,-0.2117 1.0588,-0.4764 1.3764,-0.794 0.2647,0 0.6881,-0.5823 0.9528,-0.847 -0.0529,-0.6882 -0.1059,-1.3763 -0.1059,-2.0645 -1.1645,-1.1646 -0.6881,-2.7527 -0.8999,-2.9644 -0.3705,-0.847 -0.7411,-1.694 -1.0587,-2.488 -0.1058,-0.5823 -0.2117,-1.1646 -0.3176,-1.6939 -0.4235,-0.9529 -1.1116,-2.4351 -1.3763,-2.541 -0.7941,0 -1.5881,0 -2.3821,0 -1.4822,-0.4764 -3.0174,-1.9056 -3.8114,-2.2762 -0.794,-1.0058 -1.5881,-1.9586 -2.3821,-2.9115 -0.847,0 -0.9529,0.1589 -1.4822,0.3177 -0.4235,-0.053 -0.847,-0.053 -1.2705,-0.053 -0.794,-0.6881 -1.588,-1.3234 -2.3291,-1.9586 -0.7411,-0.3176 -1.4293,-0.6352 -2.1175,-0.9528 -1.3234,-0.053 -2.435,-0.3706 -3.1761,-0.5823 -1.641,-1.2705 -2.1175,-0.9529 -3.5997,-1.0058 -0.3176,0.1588 -0.6352,0.3705 -0.8999,0.5823 0,0.794 0.4765,1.4292 0.2118,2.6468 -1.4293,1.4292 -4.129,-1.1117 -4.7642,-1.8528 -0.6882,-0.5293 -1.3764,-1.0587 -2.0645,-1.5881 -1.4293,-0.794 -2.6468,-1.5351 -3.7055,-1.8527 -2.0645,0 -4.3408,0.2647 -5.9288,-0.5294 -0.2118,-0.0529 -0.3706,-0.0529 -0.5294,-0.0529 -0.0529,-0.794 -0.4235,-2.2233 -0.5823,-2.3821 -0.2117,-1.1646 -0.8999,-2.0645 0.1588,-2.3821 0.3176,-0.5294 0.6352,-1.0058 0.7941,-1.5881 1.1645,0 3.0702,0 4.1289,-1.0587 0.1588,-0.4764 0.3177,-0.8999 0.5294,-1.3234 0.3705,-0.4235 0.7411,-0.847 1.1116,-1.2175 1.0058,-2.5939 1.9587,-2.4351 4.8701,-2.7527 0.3706,0 3.1232,0.2118 3.9173,-0.5823 -0.1588,-0.794 -0.3176,-1.5881 -0.4235,-2.3292 0,-1.4292 0.0529,-3.8643 1.9586,-2.9114 1.4293,0.1588 2.9115,0.3705 4.3937,0.5823 -0.2118,0.4764 -0.1588,1.3234 -0.1059,2.1703 0.4764,0.6882 0.8999,1.1646 1.2705,2.3292 0,0.4235 0,0.847 0,1.2705 -0.2647,0.6881 -0.7411,1.4292 -0.5823,2.488 0.7411,0.6881 1.4822,1.3763 2.2233,2.1174 0.1059,0.2117 0.2117,0.4235 0.3705,0.6352 -0.0529,0.6882 -0.0529,1.3763 -0.0529,2.1174 0.1588,0.1588 0.794,0.2118 1.5351,0.2118 1.4822,-1.1646 4.0232,-1.4822 6.3523,-1.4822 0.053,0.2647 0.1588,0.5293 0.2647,0.847 -0.2647,0.4764 -0.4764,1.0057 -0.6882,1.5351 -1.1116,1.2705 -2.435,1.1646 -2.1703,3.1232 0.4764,0.1588 1.0058,0.3706 1.5351,0.5823 0.6882,0.8999 1.1646,1.4293 2.488,2.2233 0.4764,0.4764 0.6352,2.0116 1.6939,2.435 0.4765,0.6353 1.0058,1.2705 1.5352,1.9587 0.3705,0.1588 2.2762,1.1646 2.8585,0 0.1588,-2.2763 -0.3176,-2.5939 1.641,-2.9115 0.847,0 1.4293,-0.2647 2.4351,0.7411 0.2646,0 0.5293,0 0.8469,0.0529 0.8999,-0.4235 1.7998,-1.2175 2.5409,-1.588 0.4765,-0.4765 0.9529,-0.4235 1.9057,-0.5294 0.2118,0.3176 0.4765,0.6352 0.7411,1.0058 0,1.0587 -1.641,2.2233 -2.4879,2.8056 -1.0058,1.2704 -1.1117,2.0115 -1.1117,3.9702 0.3706,0.7411 0.7411,1.4822 1.1646,2.2233 0.5294,0.6352 1.3763,1.9057 2.8056,1.9057 0.0529,-0.1059 0.1059,-0.1589 0.1588,-0.2118 0.2117,0 0.4235,0 0.6352,0 0.7411,0.2118 2.8586,2.3821 3.7055,3.7055 0.2118,1.1117 0.5294,2.488 0.6353,4.2349 0.1058,0.4764 0.2117,1.0058 0.3705,1.5351 0.8999,1.1646 1.0373,0.8334 2.6783,2.1568 0.1959,0 1.3834,-0.5841 2.1159,-0.8661 0.0344,-0.6521 0.2722,-0.6913 1.611,-1.026 1.2176,-1.2175 0.4765,-2.5939 -0.2646,-3.335 -1.694,-0.4235 -1.4293,-0.6881 -1.3234,-1.9057 0.3176,-0.4764 0.6352,-0.9528 1.0057,-1.4292 0,-0.5294 0,-1.0587 0,-1.5881 0.3177,-0.3176 0.7411,-0.1588 1.1646,-0.2117 0.5294,-0.5294 0.7941,-0.7941 1.3764,-1.0587 0,0.2646 0.2117,1.0057 -0.3706,1.588 -0.0529,0.3176 -0.0529,0.6882 -0.0529,1.0587 0.4764,0.7411 2.2233,1.0058 3.4408,1.3764 0.847,0.5293 1.6939,1.1116 2.5409,1.6939 0.2647,0 0.5294,0 0.794,0 -0.2646,0.4764 -0.4764,1.0058 -0.6881,1.5352 0.1059,1.0057 0.2117,2.0115 0.3176,3.0173 -0.1588,0.4764 -0.3176,0.9528 -0.4235,1.4293 -0.3176,0 -0.6352,0 -0.8999,-0.2647 -1.2705,-0.2118 -2.0645,-0.2118 -2.6997,0.7411 0,0.6352 0,1.3234 0,2.0115 -0.1588,0 -0.3176,0.053 -0.4764,0.1059z",
            "name": "甘肃"
        },
        "BEJ": {
            "path": "M207.07534,121.66617c-0.85299,-0.72143 -0.79884,-0.66619 -1.32819,-0.81178 -0.52935,-0.14559 -1.07195,-0.0397 -1.91895,0.22491 -0.2117,0.2118 -0.4235,0.4235 -0.5823,0.6882 -0.847,0 -1.6939,0 -2.488,0.0529 0,-1.0057 -0.2117,-1.7468 0.847,-1.9057 0.3706,-0.3176 0.7411,-0.5822 1.1117,-0.8469 0.6352,-1.2705 -0.3177,-1.8528 -0.3177,-2.4351 0.7411,-0.4235 1.7999,-1.0587 2.4351,-1.6939 0.1588,-0.8999 0.0529,-1.1117 0.9528,-1.1117 0.2647,0.2647 0.5294,0.5294 0.847,0.7941 0.5823,0.0529 1.2175,0.1058 1.8528,0.1588 -0.3177,0.5293 -0.5294,2.6468 0.1058,3.7055 0.3176,0.0529 0.6353,0.1059 0.9529,0.1588 0.1588,0.1059 0.3176,0.2647 0.5293,0.4235 -1.55238,1.00558 -2.64701,0.89412 -2.99926,2.59837z",
            "name": "北京"
        },
        "MAC": {
            "path": "M198.97211,226.7557c0,0 0.85426,0.91069 0.16017,1.10867 -0.7784,0.22203 -0.80085,-0.51475 -0.80085,-0.51475 0,0 0.0767,-0.59102 -0.53392,-0.91069 -0.90765,-0.47515 0.32035,-0.83151 0.32035,-0.83151z",
            "name": "澳门"
        },
        "HKG": {
            "path": "M201.47606,223.16014c0,0 -0.0974,0.7312 -0.29248,1.07242 0,0 -1.07241,0.38996 -0.92616,0.77993 0.0974,0.5362 0.48744,0.5362 1.31613,0.5362 0.87743,-0.0975 1.31615,-0.92616 1.31615,-0.92616l-0.38997,-1.21866c0,0 -0.48746,-0.5362 -1.02367,-0.24373z",
            "name": "香港"
        },
        "SHH": {
            "path": "M237.00475,168.65506c0,0.99416 -0.82731,1.72414 -1.72414,1.73109 -0.94549,0 -1.75168,-0.82038 -1.74498,-1.73109 0.007,-0.94549 0.82035,-1.73103 1.74498,-1.73804 0.93159,0.007 1.73109,0.77169 1.72414,1.73804z",
            "name": "上海"
        }
    }
});

(function ($) {
  var CountTo = function (element, options) {
    this.$element = $(element);
    this.options  = $.extend({}, CountTo.DEFAULTS, this.dataOptions(), options);
    this.init();
  };

  CountTo.DEFAULTS = {
    from: 0,               // the number the element should start at
    to: 0,                 // the number the element should end at
    speed: 1000,           // how long it should take to count between the target numbers
    refreshInterval: 100,  // how often the element should be updated
    decimals: 0,           // the number of decimal places to show
    formatter: formatter,  // handler for formatting the value before rendering
    onUpdate: null,        // callback method for every time the element is updated
    onComplete: null       // callback method for when the element finishes updating
  };

  CountTo.prototype.init = function () {
    this.value     = this.options.from;
    this.loops     = Math.ceil(this.options.speed / this.options.refreshInterval);
    this.loopCount = 0;
    this.increment = (this.options.to - this.options.from) / this.loops;
  };

  CountTo.prototype.dataOptions = function () {
    var options = {
      from:            this.$element.data('from'),
      to:              this.$element.data('to'),
      speed:           this.$element.data('speed'),
      refreshInterval: this.$element.data('refresh-interval'),
      decimals:        this.$element.data('decimals')
    };

    var keys = Object.keys(options);

    for (var i in keys) {
      var key = keys[i];

      if (typeof(options[key]) === 'undefined') {
        delete options[key];
      }
    }

    return options;
  };

  CountTo.prototype.update = function () {
    this.value += this.increment;
    this.loopCount++;

    this.render();

    if (typeof(this.options.onUpdate) == 'function') {
      this.options.onUpdate.call(this.$element, this.value);
    }

    if (this.loopCount >= this.loops) {
      clearInterval(this.interval);
      this.value = this.options.to;

      if (typeof(this.options.onComplete) == 'function') {
        this.options.onComplete.call(this.$element, this.value);
      }
    }
  };

  CountTo.prototype.render = function () {
    var formattedValue = this.options.formatter.call(this.$element, this.value, this.options);
    this.$element.text(formattedValue);
  };

  CountTo.prototype.restart = function () {
    this.stop();
    this.init();
    this.start();
  };

  CountTo.prototype.start = function () {
    this.stop();
    this.render();
    this.interval = setInterval(this.update.bind(this), this.options.refreshInterval);
  };

  CountTo.prototype.stop = function () {
    if (this.interval) {
      clearInterval(this.interval);
    }
  };

  CountTo.prototype.toggle = function () {
    if (this.interval) {
      this.stop();
    } else {
      this.start();
    }
  };

  function formatter(value, options) {
    return value.toFixed(options.decimals);
  }

  $.fn.countTo = function (option) {
    return this.each(function () {
      var $this   = $(this);
      var data    = $this.data('countTo');
      var init    = !data || typeof(option) === 'object';
      var options = typeof(option) === 'object' ? option : {};
      var method  = typeof(option) === 'string' ? option : 'start';

      if (init) {
        if (data) data.stop();
        $this.data('countTo', data = new CountTo(this, options));
      }

      data[method].call(data);
    });
  };
}(jQuery));


/**
 * jQuery.timers - Timer abstractions for jQuery
 * Written by Blair Mitchelmore (blair DOT mitchelmore AT gmail DOT com)
 * Licensed under the WTFPL (http://sam.zoy.org/wtfpl/).
 * Date: 2009/10/16
 *
 * @author Blair Mitchelmore
 * @version 1.2
 *
 **/

jQuery.fn.extend({
	everyTime: function(interval, label, fn, times) {
		return this.each(function() {
			jQuery.timer.add(this, interval, label, fn, times);
		});
	},
	oneTime: function(interval, label, fn) {
		return this.each(function() {
			jQuery.timer.add(this, interval, label, fn, 1);
		});
	},
	stopTime: function(label, fn) {
		return this.each(function() {
			jQuery.timer.remove(this, label, fn);
		});
	}
});

jQuery.extend({
	timer: {
		global: [],
		guid: 1,
		dataKey: "jQuery.timer",
		regex: /^([0-9]+(?:\.[0-9]*)?)\s*(.*s)?$/,
		powers: {
			// Yeah this is major overkill...
			'ms': 1,
			'cs': 10,
			'ds': 100,
			's': 1000,
			'das': 10000,
			'hs': 100000,
			'ks': 1000000
		},
		timeParse: function(value) {
			if (value == undefined || value == null)
				return null;
			var result = this.regex.exec(jQuery.trim(value.toString()));
			if (result[2]) {
				var num = parseFloat(result[1]);
				var mult = this.powers[result[2]] || 1;
				return num * mult;
			} else {
				return value;
			}
		},
		add: function(element, interval, label, fn, times) {
			var counter = 0;
			
			if (jQuery.isFunction(label)) {
				if (!times) 
					times = fn;
				fn = label;
				label = interval;
			}
			
			interval = jQuery.timer.timeParse(interval);

			if (typeof interval != 'number' || isNaN(interval) || interval < 0)
				return;

			if (typeof times != 'number' || isNaN(times) || times < 0) 
				times = 0;
			
			times = times || 0;
			
			var timers = jQuery.data(element, this.dataKey) || jQuery.data(element, this.dataKey, {});
			
			if (!timers[label])
				timers[label] = {};
			
			fn.timerID = fn.timerID || this.guid++;
			
			var handler = function() {
				if ((++counter > times && times !== 0) || fn.call(element, counter) === false)
					jQuery.timer.remove(element, label, fn);
			};
			
			handler.timerID = fn.timerID;
			
			if (!timers[label][fn.timerID])
				timers[label][fn.timerID] = window.setInterval(handler,interval);
			
			this.global.push( element );
			
		},
		remove: function(element, label, fn) {
			var timers = jQuery.data(element, this.dataKey), ret;
			
			if ( timers ) {
				
				if (!label) {
					for ( label in timers )
						this.remove(element, label, fn);
				} else if ( timers[label] ) {
					if ( fn ) {
						if ( fn.timerID ) {
							window.clearInterval(timers[label][fn.timerID]);
							delete timers[label][fn.timerID];
						}
					} else {
						for ( var fn in timers[label] ) {
							window.clearInterval(timers[label][fn]);
							delete timers[label][fn];
						}
					}
					
					for ( ret in timers[label] ) break;
					if ( !ret ) {
						ret = null;
						delete timers[label];
					}
				}
				
				for ( ret in timers ) break;
				if ( !ret ) 
					jQuery.removeData(element, this.dataKey);
			}
		}
	}
});

jQuery(window).bind("unload", function() {
	jQuery.each(jQuery.timer.global, function(index, item) {
		jQuery.timer.remove(item);
	});
});

var as = 'webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend';

$(function() {

  // 禁用默认touch事件
  // $('body').on('touchmove', function(e) {
  //   e.preventDefault();
  // });

  /**
   * 页面切换效果
   */
  var pw = new pageSwitch('wrap', {
    duration: 1000, //int 页面过渡时间
    direction: 1, //int 页面切换方向，0横向，1纵向
    start: 1, //int 默认显示页面
    loop: false, //bool 是否循环切换
    ease: 'ease', //string|function 过渡曲线动画，详见下方说明
    transition: 'scroll', //string|function转场方式，详见下方说明
    freeze: false, //bool 是否冻结页面（冻结后不可响应用户操作，可以通过 `.freeze(false)` 方法来解冻）
    mouse: true, //bool 是否启用鼠标拖拽
    arrowkey: true, //bool 是否启用键盘方向切换
  });

  /* 事件绑定
   * event可选值:
   * before 页面切换前
   * after 页面切换后
   * update 页面切换中
   * dragStart 开始拖拽
   * dragMove 拖拽中
   * dragEnd 结束拖拽
   */
  pw.on('after', function() {
    var p = this,
      cur = this.current + 1;

    // p1
    if (cur == 1) {
      p1.init();
    } else {
      p1.reset();
    }

    // p2
    if (cur == 2) {
      p2.init();
    } else {
      p2.reset();
    }
  });


  /**
   * p1
   */
  var p1 = {};

  // p1初始化
  p1.init = function() {
    var _p1 = $('#p1');

    // 冻结pw
    // pw.freeze(true);

    // p1动画
    // _p1.find('div').addClass('animated');
    _p1.find('.logo-ost1').removeClass('hide').addClass('zoomIn').one(as, function() {
      _p1.find('.txt1').removeClass('hide').addClass('fadeInUp').one(as, function() {
        _p1.find('.line').removeClass('hide').addClass('zoomIn').one(as, function() {
          _p1.find('.logo-t2').addClass('fadeOut');
          _p1.find('.txt1').addClass('stu2');
          // _p1.find('.logo-t1').addClass('stu2').one(as, function() {
          _p1.find('.logo-t1').addClass('stu2');
          $('body').oneTime('1s', function() {
            _p1.find('.logo-t3').removeClass('hide').addClass('fadeIn');
            _p1.find('.logo-t4').removeClass('hide').addClass('fadeIn').one(as, function() {
              _p1.find('.logo-t5').removeClass('hide').addClass('fadeInUp').one(as, function() {
                _p1.find('.logo-t6').removeClass('hide').addClass('fadeInRight').one(as, function() {
                  _p1.find('.btn').removeClass('hide').addClass('fadeInDown').one(as, function() {
                    _p1.find('.btn').addClass('animate');
                    _p1.find('.btn').on('click', function() {
                      pw.pw.slide(1);
                    });
                    // 解冻pw
                    // pw.freeze(false);
                  });
                });
              });
              _p1.find('.logo-t1').addClass('hide');
            });
          });
          // });
        });
      });
    });
  };

  // p1重置
  p1.reset = function() {
    var _p1 = $('#p1');
    // _p1.find('div').removeClass('animated');
    _p1.find('.logo-ost1,.line').addClass('hide').removeClass('zoomIn');
    _p1.find('.txt1,.logo-t5').addClass('hide').removeClass('fadeInUp');
    _p1.find('.logo-t2').removeClass('fadeOut');
    _p1.find('.txt1').removeClass('stu2');
    _p1.find('.logo-t1').removeClass('hide stu2');
    _p1.find('.logo-t3,.logo-t4').addClass('hide').removeClass('fadeIn');
    _p1.find('.logo-t6').addClass('hide').removeClass('fadeInRight');
    _p1.find('.btn').addClass('hide').removeClass('fadeInDown animate');
  };

  /**
   * p2
   */
  var p2 = {};

  // p1初始化
  p2.init = function() {
    var p = $('#p2'),
      map = $('#map-10-china');

    // 冻结pw
    // pw.freeze(true);

    // 需要选中的省市数据
    p2MapData = ['BEJ', 'LIA', 'SHD', 'JSU', 'SHH', 'ZHJ', 'GUD', 'HKG', 'SCH', 'HUB', 'HEN', 'SHX'];

    // 如果已经存在中国地图，则需要先取消选中，但不需要重新初始化地图
    if (map.html() != '') {
      var mapObject = map.vectorMap('get', 'mapObject');
      for (var i = 0; i < p2MapData.length; i++) {
        mapObject.setSelectedRegions(p2MapData[i], false);
      }
    } else {
      // 初始化中国地图
      map.vectorMap({
        map: 'map_format_cn',
        backgroundColor: 'rgba(0,0,0,0)',
        zoomOnScroll: false,
        panOnDrag: false,
        regionsSelectable: false,
        regionStyle: {
          initial: {
            fill: '#88b8ad',
            "fill-opacity": 1,
            stroke: 'none',
            "stroke-width": 0,
            "stroke-opacity": 1
          },
          hover: {},
          selected: {
            fill: '#e35e5d'
          },
          selectedHover: {}
        }
      });
    }

    p.find('.tit').removeClass('hide').addClass('slideInLeft').one(as, function() {
      p.find('.map').removeClass('hide').addClass('zoomInDown').one(as, function() {
        p.find('.num1 > .num,.num1>.txt').removeClass('hide').addClass('fadeInDown').one(as, function() {
          // 点亮分社所在省市
          var mapObject = map.vectorMap('get', 'mapObject'),
            p2MapQue = function(time, regions) {
              map.oneTime(time + 's', regions, function() {
                mapObject.setSelectedRegions(regions);
              });
            };
          for (var i = 1; i <= p2MapData.length; i++) {
            p2MapQue(i / 16, p2MapData[i - 1]);
          }
          // 分社数字自增
          p.find('.num1>.num').countTo({
            from: 0,
            to: 12,
            speed: 500,
            refreshInterval: 5
          });
        });
        $('.num2').oneTime('1s', 'p1Num2', function() {
          p.find('.num2 > .num, .num2 > .txt').removeClass('hide').addClass('fadeInUp').one(as, function() {
            // 摄影师数字自增
            p.find('.num2 > .plus').removeClass('hide').addClass('fadeIn');
            p.find('.num2 > .num').countTo({
              from: 0,
              to: 1000,
              speed: 2000,
              refreshInterval: 50,
              formatter: function(value, options) {
                return (value.toFixed(0) + '').replace(/\d{1,3}(?=(\d{3})+(\.\d*)?$)/g, '$&,');
              },
            });
            // 摄影师icon动画
            p.find('.people > span').removeClass('hide').addClass('bounceInUp');
            // 解冻pw
            // pw.freeze(false);
          });
        });
      });
    });

  };

  // p2重置
  p2.reset = function() {
    var p = $('#p2');

    // 销毁中国地图
    p.find('.map').empty();

    // 清除动画
    // p.find('div,span').removeClass('animated');
    p.find('.tit').addClass('hide').removeClass('slideInLeft');
    p.find('.map').addClass('hide').removeClass('zoomInDown');
    p.find('.num1 > .num,.num1>.txt').addClass('hide').removeClass('fadeInDown');
    p.find('.num1>.num,.num2>.num').empty();
    p.find('.num2 > .num, .num2 > .txt').addClass('hide').removeClass('fadeInUp');
    p.find('.people > span').addClass('hide').removeClass('bounceInUp');
    p.find('.num2 > .plus').addClass('hide').removeClass('fadeIn');
  };

  // 初始化p1
  Pace.on('hide', function() {
    p2.init();
  });

});

